
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -Wall -q -c -b -D loadbas=0 -o lean.bin -L lean-bin.lst main.asm
; Sat Nov  2 19:44:00 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=0					loadbas=0

;******  Processing input file: main.asm

=$0801					ProgramStart = $0801 						; where source code starts.
=$b52b					UserDictionary = EndCode 					; user dictionary
=$a000					CodeMemory = $A000 							; where object code goes.
=$01					CodePage = $01 								; page for code memory.
=$063f					AssemblerStack = $063F 						; compiler stack space.
=$0640					lineBuffer = $0640	 						; current line, match encoded.
=$0680					valueBuffer = $0680 						; buffer for associated values.
=$0700					VariableMemory = $0700 						; data memory allocaed from here
=$0700					BankCode = $0700 							; bank handling code goes here.
=64					LINEBUFFSIZE = 64
=128					VALBUFFSIZE = 128

;******  Processing file: data.asm

=$9f61					ramBank = $9F61 							; RAM Memory bank register.
>0010					scanPtr:	.word ?							; BASIC scan position.
>0012					aStackPtr:	.word ? 						; compiler stack.
>0014					dictPtr:	.word ? 						; dictionary pointer
>0016					genPtr:		.word ? 						; code generation pointer
>0018					varPtr: 	.word ?							; next free variable pointer.
>001a					zTemp0:		.word ? 						; temps.
>001c					zTemp1:		.word ?
>001e					zTemp2:		.word ?
>0020					zTemp3:		.word ?
>0022					lastCreate:	.word ? 						; last created dictionary word
>0024					codePtr:	.word ? 						; code pointer
>0026					codeBank:	.byte ?							; code bank
>0027					originalSP:			.byte ? 				; 6502 stack on entry.
>0028					lastDefine:			.fill 3 				; last defined word (addr/page)
>002b					lineNumber:			.word ? 				; current line number
>002d					identStart:			.byte ? 				; start offset of current identifier
>002e					dirLowByte:			.byte ?					; values returned from search
>002f					dirHighByte:		.byte ?
>0030					dirBank:			.byte ?
>0031					dirLength:			.byte ?
>0032					valueBufferPos:		.byte ? 				; position in value buffer.
>0033					genPos: 			.byte ? 				; position in line buffer, generation.
>0034					generateVar:		.word ? 				; variables used in set value
>0036					elementData:		.fill 3 				; data from matched constant/identifier
>0039					codeBackup:			.fill 3 				; backup code pointer.
>003c					varSize:			.byte ? 				; size of current variable.
>003d					matchCount:			.byte ? 				; successful line matches (for errors)
=$8f					REM_TOKEN = $8F 							; C64 REM Token
="*"					SCM_TOP = '*'								; top of stack marker.
="P"					SCM_PROC = 'P'								; procedure marker
="R"					SCM_REPEAT = 'R'							; repeat marker
="F"					SCM_FOR = 'F' 								; for marker (8 bit)
="G"					SCM_INTFOR = 'G'							; for marker (16 bit)
="I"					SCM_IF = 'I'								; if/else/endif marker.
=$60					CPU_RETURN = $60 							; RTS opcode.
=$48					CPU_PHA = $48 								; PHA
=$68					CPU_PLA = $68 								; PLA
=$3a					CPU_DECA = $3A 								; DEC A
=$d0					CPU_BNE = $D0								; BNE
=$80					CPU_BRA = $80								; BRA
=$20					CPU_JSR = $20 								; JSR
=$da					CPU_PHX = $DA 								; PHX
=$fa					CPU_PLX = $FA 								; PLX
=$c9					CPU_CMPIM = $C9 							; CMP#
=$e0					CPU_CPXIM = $E0 							; CPX#
=$ca					CPU_DEX = $CA 								; DEX

;******  Return to file: main.asm


;******  Processing file: generated/cgconst.inc

=$53					CGEN_C_ISZERO = $53
=$63					CGEN_C_LOW = $63
=$73					CGEN_C_HIGH = $73
=$83					CGEN_C_LOWPLUS1 = $83
=$93					CGEN_C_SETDATA = $93
=$a3					CGEN_C_EXEC = $a3

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.a000					Start:
.a000	4c 21 a0	jmp $a021			jmp 	RunCompiler
.a003	4c 56 a0	jmp $a056			jmp 	CallCodeMemory
.a006					LeanMessage:
>a006	0d 20 20 20 20 4c 45 41				.text 	13,"    LEAN V0.9 (02-NOV-19)",0
>a00e	4e 20 56 30 2e 39 20 28 30 32 2d 4e 4f 56 2d 31
>a01e	39 29 00
.a021					RunCompiler:
.a021	ba		tsx				tsx 									; save SP
.a022	86 27		stx $27				stx 	originalSP
.a024	a2 05		ldx #$05			ldx 	#5 								; set up vectors.
.a026	bd 00 a0	lda $a000,x	_RCCopy:lda 	Start,x
.a029	95 00		sta $00,x			sta 	$00,x
.a02b	ca		dex				dex
.a02c	10 f8		bpl $a026			bpl 	_RCCopy
.a02e	20 a8 a3	jsr $a3a8			jsr 	BankCopyCode 					; copy banked code to RAM space.
.a031	20 e3 a8	jsr $a8e3			jsr 	StackReset 						; reset convert stack.
.a034	20 27 a7	jsr $a727			jsr 	VariableReset 					; reset variable memory.
.a037	20 1d a4	jsr $a41d			jsr 	DictionaryReset 				; reset user dictionary
.a03a	20 91 a4	jsr $a491			jsr 	CodeReset 						; reset code output.
.a03d	20 74 a0	jsr $a074			jsr 	ScannerReset 					; reset scanner
.a040					AsmLoop:
.a040	20 77 a0	jsr $a077			jsr 	ScannerFind 					; next thing in code
.a043	90 08		bcc $a04d			bcc 	AsmEnd 							; nothing more
.a045	20 b9 a0	jsr $a0b9			jsr 	ProcessLineToBuffer 			; convert it.
.a048	20 05 a2	jsr $a205			jsr 	GeneratorSearch 				; check it for generators
.a04b	80 f3		bra $a040			bra 	AsmLoop 						; and keep going.
.a04d					AsmEnd:
.a04d	a9 2a		lda #$2a			lda 	#SCM_TOP 						; check structures are done
.a04f	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a052					ReturnCaller:
.a052	a6 27		ldx $27				ldx		originalSP 						; restore XP and exit.
.a054	9a		txs				txs
.a055	60		rts				rts
.a056					CallCodeMemory:
.a056	a5 28		lda $28				lda 	lastDefine 					; check if something defined (no error)
.a058	05 29		ora $29				ora 	lastDefine+1
.a05a	05 2a		ora $2a				ora 	lastDefine+2
.a05c	f0 06		beq $a064			beq 	_NoExecute
.a05e	20 a8 a3	jsr $a3a8			jsr 	BankCopyCode 				; copy banked code to RAM space.
.a061	4c 02 07	jmp $0702			jmp 	CodeRunCode
.a064					_NoExecute:
.a064	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a067	4c 45 41 4e 3a 4e 4f 20				.text 	"LEAN:","NO CODE",$00
>a06f	43 4f 44 45 00

;******  Processing file: lean/scanner.asm

.a074					ScannerReset:
.a074	64 11		stz $11				stz 	scanPtr+1 					; zero MSB means the start
.a076	60		rts				rts
.a077					ScannerFind:
.a077	48		pha				pha 								; save registers
.a078	da		phx				phx
.a079	5a		phy				phy
.a07a	a5 11		lda $11				lda 	scanPtr+1 					; reset the scanner pointer ?
.a07c	d0 0a		bne $a088			bne 	_SFScanForward 				; no, scan forward from current.
.a07e	a9 01		lda #$01			lda 	#(ProgramStart) & $FF
.a080	85 10		sta $10				sta 	scanPtr
.a082	a9 08		lda #$08			lda 	#(ProgramStart) >> 8
.a084	85 11		sta $11				sta 	scanPtr+1
.a086	80 12		bra $a09a			bra 	_SFCheck 					; check if this one is a REM.
.a088					_SFScanForward:
.a088	a0 01		ldy #$01			ldy 	#1 							; check if the offset is zero
.a08a	b2 10		lda ($10)			lda 	(scanPtr)
.a08c	11 10		ora ($10),y			ora 	(scanPtr),y
.a08e	18		clc				clc 								; if so exit with CC.
.a08f	f0 24		beq $a0b5			beq 	_SFExit
.a091	b2 10		lda ($10)			lda 	(scanPtr) 					; forward to next.
.a093	aa		tax				tax
.a094	b1 10		lda ($10),y			lda 	(scanPtr),y
.a096	86 10		stx $10				stx 	scanPtr
.a098	85 11		sta $11				sta 	scanPtr+1
.a09a					_SFCheck:
.a09a	a0 02		ldy #$02			ldy 	#2 								; copy line number.
.a09c	b1 10		lda ($10),y			lda 	(scanPtr),y
.a09e	85 2b		sta $2b				sta 	lineNumber
.a0a0	c8		iny				iny
.a0a1	b1 10		lda ($10),y			lda 	(scanPtr),y
.a0a3	85 2c		sta $2c				sta 	lineNumber+1
.a0a5	c8		iny				iny
.a0a6	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it a "REM." line ?
.a0a8	c9 8f		cmp #$8f			cmp 	#REM_TOKEN
.a0aa	d0 dc		bne $a088			bne 	_SFScanForward
.a0ac	c8		iny				iny
.a0ad	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it followed by a '.'
.a0af	c8		iny				iny
.a0b0	c9 2e		cmp #$2e			cmp 	#"."
.a0b2	d0 d4		bne $a088			bne 	_SFScanForward
.a0b4	38		sec				sec 								; found something, exit with CS.
.a0b5					_SFExit:
.a0b5	7a		ply				ply 								; load registers and exit.
.a0b6	fa		plx				plx
.a0b7	68		pla				pla
.a0b8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: lean/process.asm

.a0b9					ProcessLineToBuffer:
.a0b9	a0 06		ldy #$06			ldy 	#6 							; position in line
.a0bb	a2 00		ldx #$00			ldx 	#0 							; position in buffer
.a0bd	64 32		stz $32				stz 	valueBufferPos 				; reset value buffer pos
.a0bf	a9 ff		lda #$ff			lda 	#$FF
.a0c1	8d 80 06	sta $0680			sta 	valueBuffer 				; erase value buffer (end marker $FF)
.a0c4					_PLTConvert:
.a0c4	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a0c6	f0 7a		beq $a142			beq 	_PLTExit
.a0c8	c8		iny				iny
.a0c9	c9 20		cmp #$20			cmp 	#' ' 						; skip over spaces.
.a0cb	f0 f7		beq $a0c4			beq 	_PLTConvert
.a0cd	20 a6 a1	jsr $a1a6			jsr 	PLTCheckCharacter 			; identifier character.
.a0d0	b0 08		bcs $a0da			bcs 	_PLTIsIdentifier 			; it's an identifier.
.a0d2	09 80		ora #$80			ora 	#$80 						; set bit 7
.a0d4	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write out
.a0d7	e8		inx				inx
.a0d8	80 ea		bra $a0c4			bra 	_PLTConvert
.a0da					_PLTIsIdentifier:
.a0da	86 2d		stx $2d				stx 	identStart 					; save as start of identifier.
.a0dc					_PLTGetIdentifier:
.a0dc	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out.
.a0df	e8		inx				inx
.a0e0	b1 10		lda ($10),y			lda 	(scanPtr),y	 				; get next character
.a0e2	c8		iny				iny
.a0e3	20 a6 a1	jsr $a1a6			jsr 	PLTCheckCharacter 			; still identifier
.a0e6	b0 f4		bcs $a0dc			bcs 	_PLTGetIdentifier
.a0e8	88		dey				dey 								; undo last bump.
.a0e9					_PLTGotIdentifier:
.a0e9	bd 3f 06	lda $063f,x			lda 	lineBuffer-1,x 				; set bit 7 of last
.a0ec	09 80		ora #$80			ora 	#$80
.a0ee	9d 3f 06	sta $063f,x			sta 	lineBuffer-1,x
.a0f1	5a		phy				phy
.a0f2	da		phx				phx
.a0f3	20 9a a1	jsr $a19a			jsr 	PLTGetAddress 				; XY <= address of identifier.
.a0f6	20 2c a4	jsr $a42c			jsr 	DictionarySearch 			; is it in the dictionaries ?
.a0f9	90 0c		bcc $a107			bcc 	_PLTTryConstant
.a0fb	c9 50		cmp #$50			cmp 	#"P" 						; procedure, short or var ?
.a0fd	f0 4b		beq $a14a			beq 	_PLTFoundIdentifier
.a0ff	c9 53		cmp #$53			cmp 	#"S"
.a101	f0 47		beq $a14a			beq 	_PLTFoundIdentifier
.a103	c9 49		cmp #$49			cmp 	#"I"
.a105	f0 43		beq $a14a			beq 	_PLTFoundIdentifier
.a107					_PLTTryConstant:
.a107	20 9a a1	jsr $a19a			jsr 	PLTGetAddress 				; try as a constant
.a10a	20 53 a8	jsr $a853			jsr 	StringToInt
.a10d	b0 04		bcs $a113			bcs 	_PLTAttachIdentifier
.a10f	fa		plx				plx 								; leave as it is - unknown identifier
.a110	7a		ply				ply
.a111	80 b1		bra $a0c4			bra 	_PLTConvert
.a113					_PLTAttachIdentifier:
.a113	86 1a		stx $1a				stx 	zTemp0 						; save XY
.a115	84 1b		sty $1b				sty 	zTemp0+1
.a117	fa		plx				plx 								; restore current position
.a118	7a		ply				ply
.a119	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a11b	c9 2d		cmp #$2d			cmp 	#"-"
.a11d	d0 04		bne $a123			bne 	_PLTNotMinus
.a11f	20 8c a1	jsr $a18c			jsr 	_PLTNegateZTemp0 			; negate zTemp0
.a122	c8		iny				iny 								; skip it if '-'
.a123					_PLTNotMinus:
.a123	5a		phy				phy 								; save current positions
.a124	da		phx				phx
.a125	a6 1a		ldx $1a				ldx 	zTemp0 						; restore XY number
.a127	a4 1b		ldy $1b				ldy 	zTemp0+1
.a129	a9 00		lda #$00			lda 	#0
.a12b	20 ca a1	jsr $a1ca			jsr 	ProcessRecordData 			; record associated data
.a12e	a9 62		lda #$62			lda 	#"b"
.a130	c0 00		cpy #$00			cpy 	#0
.a132	f0 02		beq $a136			beq 	_PLTRecord
.a134	a9 77		lda #$77			lda 	#"w"
.a136					_PLTRecord:
.a136	fa		plx				plx 								; restore XY position
.a137	7a		ply				ply
.a138	a6 2d		ldx $2d				ldx 	identStart 					; overwrite the position with ident start
.a13a	09 80		ora #$80			ora 	#$80 						; bit 7, it's an element in its own right
.a13c	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out
.a13f	e8		inx				inx 								; bump the position
.a140	80 82		bra $a0c4			bra		_PLTConvert 				; do the next one.
.a142					_PLTExit:
.a142	9e 40 06	stz $0640,x			stz 	lineBuffer,x 				; make it ASCIIZ
.a145	e0 40		cpx #$40			cpx		#LINEBUFFSIZE 				; line too long.
.a147	b0 31		bcs $a17a			bcs 	_PLTBuffer
.a149	60		rts				rts
.a14a					_PLTFoundIdentifier:
.a14a	48		pha				pha 								; save type.
.a14b	a6 2e		ldx $2e				ldx 	dirLowByte 					; get the dictionary AXY values
.a14d	a4 2f		ldy $2f				ldy 	dirHighByte
.a14f	a5 30		lda $30				lda 	dirBank
.a151	20 ca a1	jsr $a1ca			jsr 	ProcessRecordData 			; attached to identstart
.a154	68		pla				pla 								; get type back, which is I or S or P
.a155	09 20		ora #$20			ora 	#$20 						; make it lower case.
.a157	c9 70		cmp #$70			cmp 	#"p"						; P goes untrammelled
.a159	f0 db		beq $a136			beq 	_PLTRecord
.a15b	c0 00		cpy #$00			cpy 	#0 							; if Y = 0, e.g. zero page, use that.
.a15d	f0 d7		beq $a136			beq 	_PLTRecord
.a15f	49 05		eor #$05			eor 	#"i"^"l" 					; convert it to L
.a161	c9 6c		cmp #$6c			cmp 	#"l"
.a163	f0 d1		beq $a136			beq 	_PLTRecord
.a165	a9 63		lda #$63			lda 	#"c" 						; otherwise C
.a167	80 cd		bra $a136			bra 	_PLTRecord
.a169					_PLTError:
.a169	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a16c	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX ?",$00
>a174	54 41 58 20 3f 00
.a17a					_PLTBuffer:
.a17a	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a17d	4c 45 41 4e 3a 4c 49 4e				.text 	"LEAN:","LINE SIZE",$00
>a185	45 20 53 49 5a 45 00
.a18c					_PLTNegateZTemp0:
.a18c	38		sec				sec 								; negate zTemp0
.a18d	a9 00		lda #$00			lda 	#0
.a18f	e5 1a		sbc $1a				sbc 	zTemp0
.a191	85 1a		sta $1a				sta 	zTemp0
.a193	a9 00		lda #$00			lda 	#0
.a195	e5 1b		sbc $1b				sbc 	zTemp0+1
.a197	85 1b		sta $1b				sta 	zTemp0+1
.a199	60		rts				rts
.a19a					PLTGetAddress:
.a19a	18		clc				clc
.a19b	a5 2d		lda $2d				lda 	identStart
.a19d	69 40		adc #$40			adc 	#lineBuffer & $FF
.a19f	aa		tax				tax
.a1a0	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a1a2	90 01		bcc $a1a5			bcc 	_PLGANoCarry
.a1a4	c8		iny				iny
.a1a5					_PLGANoCarry:
.a1a5	60		rts				rts
.a1a6					PLTCheckCharacter:
.a1a6	c9 25		cmp #$25			cmp 	#'%'
.a1a8	f0 1c		beq $a1c6			beq 	_PLCCYes
.a1aa	c9 5f		cmp #$5f			cmp 	#'_'
.a1ac	f0 18		beq $a1c6			beq 	_PLCCYes
.a1ae	c9 24		cmp #$24			cmp 	#'$'
.a1b0	f0 14		beq $a1c6			beq 	_PLCCYes
.a1b2	c9 2e		cmp #$2e			cmp 	#'.'
.a1b4	f0 10		beq $a1c6			beq 	_PLCCYes
.a1b6	c9 30		cmp #$30			cmp 	#'0'
.a1b8	90 0e		bcc $a1c8			bcc 	_PLCCNo
.a1ba	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1bc	90 08		bcc $a1c6			bcc 	_PLCCYes
.a1be	c9 41		cmp #$41			cmp 	#'A'
.a1c0	90 06		bcc $a1c8			bcc 	_PLCCNo
.a1c2	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a1c4	b0 02		bcs $a1c8			bcs 	_PLCCNo
.a1c6					_PLCCYes:
.a1c6	38		sec				sec
.a1c7	60		rts				rts
.a1c8					_PLCCNo:
.a1c8	18		clc				clc
.a1c9	60		rts				rts
.a1ca					ProcessRecordData:
.a1ca	48		pha				pha
.a1cb	da		phx				phx
.a1cc	5a		phy				phy
.a1cd	da		phx				phx
.a1ce	a6 32		ldx $32				ldx 	valueBufferPos 				; get current position
.a1d0	9d 83 06	sta $0683,x			sta 	valueBuffer+3,x 			; copy data to it
.a1d3	98		tya				tya
.a1d4	9d 82 06	sta $0682,x			sta 	valueBuffer+2,x
.a1d7	68		pla				pla
.a1d8	9d 81 06	sta $0681,x			sta 	valueBuffer+1,x
.a1db	a5 2d		lda $2d				lda 	identStart
.a1dd	9d 80 06	sta $0680,x			sta 	valueBuffer+0,x
.a1e0	e8		inx				inx 								; next position
.a1e1	e8		inx				inx
.a1e2	e8		inx				inx
.a1e3	e8		inx				inx
.a1e4	86 32		stx $32				stx 	valueBufferPos 				; save
.a1e6	a9 ff		lda #$ff			lda 	#$FF 						; write end marker.
.a1e8	9d 80 06	sta $0680,x			sta 	valueBuffer,x
.a1eb	e0 80		cpx #$80			cpx 	#VALBUFFSIZE
.a1ed	b0 04		bcs $a1f3			bcs 	_PRDError
.a1ef	7a		ply				ply
.a1f0	fa		plx				plx
.a1f1	68		pla				pla
.a1f2	60		rts				rts
.a1f3					_PRDError:
.a1f3	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a1f6	4c 45 41 4e 3a 43 4f 4d				.text 	"LEAN:","COMPLEX ?",$00
>a1fe	50 4c 45 58 20 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/generate.asm

.a205					GeneratorSearch:
.a205	64 33		stz $33				stz 	genPos 						; reset the generator pointer
.a207	64 3d		stz $3d				stz 	matchCount 					; reset the match count.
.a209					_GSNextItem:
.a209	a6 33		ldx $33				ldx 	genPos 						; check end ?
.a20b	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a20e	f0 07		beq $a217			beq 	_GSExit
.a210	20 18 a2	jsr $a218			jsr 	GenerateOne 				; do one match
.a213	e6 3d		inc $3d				inc 	matchCount 					; bump the count.
.a215	80 f2		bra $a209			bra 	_GSNextItem
.a217					_GSExit:
.a217	60		rts				rts
.a218					GenerateOne:
.a218	a5 33		lda $33				lda 	genPos 						; point XY to the next thing
.a21a	18		clc				clc 								; the actual address in the line buffer.
.a21b	69 40		adc #$40			adc 	#lineBuffer & $FF
.a21d	aa		tax				tax
.a21e	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a220	90 01		bcc $a223			bcc 	_GSNoCarry
.a222	c8		iny				iny
.a223					_GSNoCarry:
.a223	20 29 a4	jsr $a429			jsr 	DictionarySearchSystemOnly 	; dictionary search
.a226	b0 10		bcs $a238			bcs 	_GSFound
.a228					_GSError:
.a228	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a22b	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX?",$00
>a233	54 41 58 3f 00
.a238					_GSFound:
.a238	c9 4d		cmp #$4d			cmp 	#"M"						; check it's a match.
.a23a	d0 ec		bne $a228			bne 	_GSError
.a23c	a4 31		ldy $31				ldy 	dirLength 					; advance to next
.a23e	a6 33		ldx $33				ldx 	genPos 						; checking for a-z.
.a240					_GSCheckData:
.a240	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a243	29 7f		and #$7f			and 	#$7F
.a245	c9 61		cmp #$61			cmp 	#'a'
.a247	90 08		bcc $a251			bcc 	_GSNotLC
.a249	c9 7b		cmp #$7b			cmp 	#'z'+1
.a24b	b0 04		bcs $a251			bcs 	_GSNotLC
.a24d	8a		txa				txa
.a24e	20 d4 a2	jsr $a2d4			jsr 	GenCopyData
.a251					_GSNotLC:
.a251	e8		inx				inx
.a252	88		dey				dey
.a253	d0 eb		bne $a240			bne 	_GSCheckData
.a255	86 33		stx $33				stx 	genPos
.a257	a5 2e		lda $2e				lda 	dirLowByte					; copy address to genPtr
.a259	85 16		sta $16				sta 	genPtr
.a25b	a5 2f		lda $2f				lda 	dirHighByte
.a25d	85 17		sta $17				sta 	genPtr+1
.a25f	b2 16		lda ($16)			lda 	(genPtr)					; count in A
.a261	f0 25		beq $a288			beq 	_GSNext 					; nothing !
.a263	aa		tax				tax 								; X is count
.a264	a0 01		ldy #$01			ldy 	#1
.a266					_GSGenerate:
.a266	b1 16		lda ($16),y			lda 	(genPtr),y 					; execute something
.a268	c9 a3		cmp #$a3			cmp 	#CGEN_C_EXEC
.a26a	f0 1d		beq $a289			beq 	_GSExecute
.a26c	c9 93		cmp #$93			cmp 	#CGEN_C_SETDATA 			; set data ?
.a26e	d0 0e		bne $a27e			bne 	_GSCopy
.a270	c8		iny				iny									; copy next two bytes out.
.a271	b1 16		lda ($16),y			lda 	(genPtr),y
.a273	85 34		sta $34				sta 	generateVar
.a275	c8		iny				iny
.a276	b1 16		lda ($16),y			lda 	(genPtr),y
.a278	85 35		sta $35				sta 	generateVar+1
.a27a	ca		dex				dex
.a27b	ca		dex				dex
.a27c	80 06		bra $a284			bra 	_GSContinue
.a27e					_GSCopy:
.a27e	20 a5 a2	jsr $a2a5			jsr 	GenConvertByte 				; replace bytes
.a281	20 00 07	jsr $0700			jsr 	CodeWriteByte				; write out.
.a284					_GSContinue:
.a284	c8		iny				iny
.a285	ca		dex				dex
.a286	d0 de		bne $a266			bne 	_GSGenerate
.a288					_GSNext:
.a288	60		rts				rts
.a289					_GSExecute:
.a289	c8		iny				iny 								; grab one.
.a28a	ca		dex				dex
.a28b	da		phx				phx 								; save XY
.a28c	5a		phy				phy
.a28d	b1 16		lda ($16),y			lda 	(genPtr),y 					; read the execution ID
.a28f	0a		asl a				asl 	a 							; index into table.
.a290	aa		tax				tax
.a291	bd af ad	lda $adaf,x			lda 	ExecutableVectorTable,x 	; read jump vector
.a294	85 1a		sta $1a				sta 	zTemp0
.a296	bd b0 ad	lda $adb0,x			lda 	ExecutableVectorTable+1,x
.a299	85 1b		sta $1b				sta 	zTemp0+1
.a29b	20 a2 a2	jsr $a2a2			jsr 	_GSCallzTemp0 				; call routine
.a29e	7a		ply				ply 								; restore XY
.a29f	fa		plx				plx
.a2a0	80 e2		bra $a284			bra 	_GSContinue
.a2a2					_GSCallzTemp0:
.a2a2	6c 1a 00	jmp ($001a)			jmp 	(zTemp0)
.a2a5					GenConvertByte:
.a2a5	c9 63		cmp #$63			cmp 	#CGEN_C_LOW
.a2a7	f0 09		beq $a2b2			beq 	_GCBLowByte
.a2a9	c9 83		cmp #$83			cmp 	#CGEN_C_LOWPLUS1
.a2ab	f0 08		beq $a2b5			beq 	_GCBLowBytePlus1
.a2ad	c9 73		cmp #$73			cmp 	#CGEN_C_HIGH
.a2af	f0 0a		beq $a2bb			beq 	_GCBHighByte
.a2b1	60		rts				rts
.a2b2					_GCBLowByte:
.a2b2	a5 36		lda $36				lda 	elementData
.a2b4	60		rts				rts
.a2b5					_GCBLowBytePlus1:
.a2b5	a5 36		lda $36				lda 	elementData
.a2b7	1a		inc a				inc 	a
.a2b8	f0 04		beq $a2be			beq 	_GCBSystem
.a2ba	60		rts				rts
.a2bb					_GCBHighByte:
.a2bb	a5 37		lda $37				lda 	elementData+1
.a2bd	60		rts				rts
.a2be					_GCBSystem:
.a2be	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a2c1	4c 45 41 4e 3a 57 4f 52				.text 	"LEAN:","WORD OFF PAGE",$00
>a2c9	44 20 4f 46 46 20 50 41 47 45 00
.a2d4					GenCopyData:
.a2d4	48		pha				pha
.a2d5	da		phx				phx
.a2d6	5a		phy				phy
.a2d7	85 1a		sta $1a				sta 	zTemp0
.a2d9	a2 fc		ldx #$fc			ldx 	#256-4
.a2db					_GCDLoop:
.a2db	e8		inx				inx 								; next slot
.a2dc	e8		inx				inx
.a2dd	e8		inx				inx
.a2de	e8		inx				inx
.a2df	bd 80 06	lda $0680,x			lda 	valueBuffer,x 				; next in value buffer
.a2e2	c9 ff		cmp #$ff			cmp 	#$FF
.a2e4	f0 16		beq $a2fc			beq 	_GCDError 					; system ?
.a2e6	c5 1a		cmp $1a				cmp 	zTemp0 						; match.
.a2e8	d0 f1		bne $a2db			bne 	_GCDLoop
.a2ea	a0 00		ldy #$00			ldy 	#0 							; copy assoc data back
.a2ec					_GCDCopy:
.a2ec	bd 81 06	lda $0681,x			lda 	valueBuffer+1,x
.a2ef	99 36 00	sta $0036,y			sta 	elementData,y
.a2f2	e8		inx				inx
.a2f3	c8		iny				iny
.a2f4	c0 03		cpy #$03			cpy 	#3
.a2f6	d0 f4		bne $a2ec			bne 	_GCDCopy
.a2f8	7a		ply				ply
.a2f9	fa		plx				plx
.a2fa	68		pla				pla
.a2fb	60		rts				rts
.a2fc					_GCDError:
.a2fc	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a2ff	4c 45 41 4e 3a 53 59 53				.text 	"LEAN:","SYS0?",$00
>a307	30 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/extract.asm

.a30a					EGetUnknownIdentifier:
.a30a	a6 33		ldx $33				ldx 	genPos 						; get next character
.a30c	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a30f	29 7f		and #$7f			and 	#$7F
.a311	20 a6 a1	jsr $a1a6			jsr 	PLTCheckCharacter 			; is it an identifier ?
.a314	90 15		bcc $a32b			bcc 	_EUIError 					; no
.a316	da		phx				phx 								; save start position on stack.
.a317					_EGetFindEnd:
.a317	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a31a	e8		inx				inx
.a31b	0a		asl a				asl 	a
.a31c	90 f9		bcc $a317			bcc 	_EGetFindEnd
.a31e	86 33		stx $33				stx 	genPos 						; points to the next thing.
.a320	68		pla				pla 								; offset
.a321	a0 06		ldy #$06			ldy 	#lineBuffer >> 8 			; make address in YX
.a323	18		clc				clc
.a324	69 40		adc #$40			adc 	#lineBuffer & $FF
.a326	aa		tax				tax
.a327	90 01		bcc $a32a			bcc 	_EGetNoCarry
.a329	c8		iny				iny
.a32a					_EGetNoCarry:
.a32a	60		rts				rts
.a32b					_EUIError:
.a32b	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a32e	4c 45 41 4e 3a 49 44 45				.text 	"LEAN:","IDENTIFIER ?",$00
>a336	4e 54 49 46 49 45 52 20 3f 00
.a340					EGetSyntaxCheck:
.a340	48		pha				pha
.a341	da		phx				phx
.a342	a6 33		ldx $33				ldx 	genPos 						; position of next
.a344	5d 40 06	eor $0640,x			eor 	lineBuffer,x 				; bits 0-6 will be zero if match
.a347	29 7f		and #$7f			and 	#$7F
.a349	d0 05		bne $a350			bne 	_EGSFail 					; different
.a34b	e6 33		inc $33				inc 	genPos 						; skip it and exit
.a34d	fa		plx				plx
.a34e	68		pla				pla
.a34f	60		rts				rts
.a350					_EGSFail:
.a350	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a353	4c 45 41 4e 3a 4d 49 53				.text 	"LEAN:","MISSING ?",$00
>a35b	53 49 4e 47 20 3f 00
.a362					EGLookNext:
.a362	da		phx				phx
.a363	a6 33		ldx $33				ldx 	genPos 						; position of next
.a365	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a368	fa		plx				plx
.a369	60		rts				rts
.a36a					EGSkipNext:
.a36a	e6 33		inc $33				inc 	genPos
.a36c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: bank/banking.asm

.a36d					BANKEDStart:
=$0700					CodeWriteByte = BankCode
=1794					CodeRunCode = Bankcode+2
.a36d	80 21		bra $a390			bra 	BankedCodeWriteByte
.a36f	80 00		bra $a371			bra 	BankedCodeRun
.a371					BankedCodeRun:
.a371	ad 61 9f	lda $9f61			lda 	ramBank 					; save current RAM bank
.a374	48		pha				pha
.a375	a5 2a		lda $2a				lda 	lastDefine+2 				; set page number
.a377	8d 61 9f	sta $9f61			sta 	ramBank
.a37a	a5 28		lda $28				lda 	lastDefine 					; overwrite the call address
.a37c	8d 1c 07	sta $071c			sta 	_BCRCode-BANKEDStart+BankCode+1
.a37f	a5 29		lda $29				lda 	lastDefine+1
.a381	8d 1d 07	sta $071d			sta 	_BCRCode-BANKEDStart+BankCode+2
.a384	a5 24		lda $24				lda 	codePtr						; pass in byte after code.
.a386	a6 25		ldx $25				ldx 	codePtr+1
.a388					_BCRCode:
.a388	20 00 00	jsr $0000			jsr 	$0000 						; call the code
.a38b	68		pla				pla 								; restore RAM page.
.a38c	8d 61 9f	sta $9f61			sta 	ramBank
.a38f	60		rts				rts
.a390					BankedCodeWriteByte:
.a390	da		phx				phx 								; save XY
.a391	5a		phy				phy
.a392	ae 61 9f	ldx $9f61			ldx 	ramBank  					; save old RAM Bank# in X
.a395	a4 26		ldy $26				ldy 	codeBank 					; get code RAM bank and save code there.
.a397	8c 61 9f	sty $9f61			sty 	ramBank
.a39a	92 24		sta ($24)			sta 	(codePtr) 					; save byte out
.a39c	e6 24		inc $24				inc 	codePtr 					; bump pointer
.a39e	d0 02		bne $a3a2			bne 	_CWBNoCarry
.a3a0	e6 25		inc $25				inc 	codePtr+1
.a3a2					_CWBNoCarry:
.a3a2	8e 61 9f	stx $9f61			stx 	ramBank 					; restore page
.a3a5	7a		ply				ply 								; and exit.
.a3a6	fa		plx				plx
.a3a7	60		rts				rts
.a3a8					BANKEDEnd:
.a3a8					BankCopyCode:
.a3a8	48		pha				pha
.a3a9	da		phx				phx
.a3aa	a2 3b		ldx #$3b			ldx 	#BANKEDEnd-BANKEDStart
.a3ac					_BCCCopy:
.a3ac	bd 6d a3	lda $a36d,x			lda 	BANKEDStart,x
.a3af	9d 00 07	sta $0700,x			sta 	BankCode,x
.a3b2	ca		dex				dex
.a3b3	e0 ff		cpx #$ff			cpx 	#$FF
.a3b5	d0 f5		bne $a3ac			bne 	_BCCCopy
.a3b7	fa		plx				plx
.a3b8	68		pla				pla
.a3b9	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/create.asm

.a3ba					DictionaryCreate:
.a3ba	86 1a		stx $1a				stx 	zTemp0 						; save identifier position
.a3bc	84 1b		sty $1b				sty 	zTemp0+1
.a3be	a0 01		ldy #$01			ldy 	#1 							; write the type byte out.
.a3c0	91 14		sta ($14),y			sta 	(dictPtr),y
.a3c2	a0 00		ldy #$00			ldy 	#0 							; work out length.
.a3c4					_DCGetLength:
.a3c4	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a3c6	c8		iny				iny
.a3c7	0a		asl a				asl 	a
.a3c8	90 fa		bcc $a3c4			bcc 	_DCGetLength
.a3ca	5a		phy				phy 								; save Y on stack.
.a3cb	98		tya				tya 								; save length +6 as offset
.a3cc	18		clc				clc
.a3cd	69 06		adc #$06			adc 	#6
.a3cf	92 14		sta ($14)			sta 	(dictPtr)
.a3d1	a0 02		ldy #$02			ldy 	#2 							; fill 2 to 4 with $FF
.a3d3	a9 ff		lda #$ff	_DCFill:lda 	#$FF
.a3d5	91 14		sta ($14),y			sta 	(dictPtr),y
.a3d7	c8		iny				iny
.a3d8	c0 05		cpy #$05			cpy 	#5
.a3da	d0 f7		bne $a3d3			bne 	_DCFill
.a3dc	68		pla				pla 								; get length, store in X
.a3dd	aa		tax				tax
.a3de	91 14		sta ($14),y			sta 	(dictPtr),y 				; write length out.
.a3e0	a0 00		ldy #$00			ldy 	#0
.a3e2					_DCCopy:
.a3e2	b1 1a		lda ($1a),y			lda 	(zTemp0),y 					; next identifier character
.a3e4	c8		iny				iny 								; save +1 on stack
.a3e5	5a		phy				phy
.a3e6	c8		iny				iny 								; advance by 6 total
.a3e7	c8		iny				iny
.a3e8	c8		iny				iny
.a3e9	c8		iny				iny
.a3ea	c8		iny				iny
.a3eb	91 14		sta ($14),y			sta 	(dictPtr),y 				; write out
.a3ed	7a		ply				ply 								; restore +1
.a3ee	ca		dex				dex
.a3ef	d0 f1		bne $a3e2			bne 	_DCCopy 					; do that the required# times.
.a3f1	a5 14		lda $14				lda 	dictPtr 					; copy last created
.a3f3	85 22		sta $22				sta 	lastCreate
.a3f5	a5 15		lda $15				lda 	dictPtr+1
.a3f7	85 23		sta $23				sta 	lastCreate+1
.a3f9	18		clc				clc 								; advance dictionary pointer
.a3fa	b2 14		lda ($14)			lda 	(dictPtr)
.a3fc	65 14		adc $14				adc 	dictPtr
.a3fe	85 14		sta $14				sta 	dictPtr
.a400	90 02		bcc $a404			bcc 	_DCNoCarry
.a402	e6 15		inc $15				inc 	dictPtr+1
.a404					_DCNoCarry:
.a404	a9 00		lda #$00			lda 	#$00 						; write end of dictionary marker
.a406	92 14		sta ($14)			sta 	(dictPtr)
.a408	60		rts				rts
.a409					DictionarySet:
.a409	48		pha				pha
.a40a	da		phx				phx
.a40b	5a		phy				phy
.a40c	5a		phy				phy 								; copy data out to
.a40d	a0 04		ldy #$04			ldy 	#4 							; offset 2,3,4 => A X Y
.a40f	91 22		sta ($22),y			sta 	(lastCreate),y
.a411	88		dey				dey
.a412	68		pla				pla
.a413	91 22		sta ($22),y			sta 	(lastCreate),y
.a415	88		dey				dey
.a416	8a		txa				txa
.a417	91 22		sta ($22),y			sta 	(lastCreate),y
.a419	7a		ply				ply
.a41a	fa		plx				plx
.a41b	68		pla				pla
.a41c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/search.asm

.a41d					DictionaryReset:
.a41d	a9 2b		lda #$2b			lda 	#(UserDictionary) & $FF
.a41f	85 14		sta $14				sta 	dictPtr
.a421	a9 b5		lda #$b5			lda 	#(UserDictionary) >> 8
.a423	85 15		sta $15				sta 	dictPtr+1
.a425	9c 2b b5	stz $b52b			stz 	UserDictionary
.a428	60		rts				rts
.a429					DictionarySearchSystemOnly:
.a429	38		sec				sec
.a42a	80 01		bra $a42d			bra 	DictionarySearchContinue
.a42c					DictionarySearch:
.a42c	18		clc				clc
.a42d					DictionarySearchContinue:
.a42d	da		phx				phx
.a42e	5a		phy				phy
.a42f	08		php				php 								; CS if user only
.a430	8a		txa				txa 								; subtract 6 so can use offset Y
.a431	38		sec				sec
.a432	e9 06		sbc #$06			sbc 	#6
.a434	85 1a		sta $1a				sta 	zTemp0
.a436	98		tya				tya
.a437	e9 00		sbc #$00			sbc 	#0
.a439	85 1b		sta $1b				sta 	zTemp0+1 					; in zTemp0
.a43b	28		plp				plp
.a43c	b0 09		bcs $a447			bcs 	_DSCOnly
.a43e	a2 2b		ldx #$2b			ldx 	#UserDictionary & $FF
.a440	a0 b5		ldy #$b5			ldy 	#UserDictionary >> 8
.a442	20 51 a4	jsr $a451			jsr 	DSSearch
.a445	b0 07		bcs $a44e			bcs 	_DSCExit
.a447					_DSCOnly:
.a447	a2 cb		ldx #$cb			ldx 	#SystemDictionary & $FF
.a449	a0 ad		ldy #$ad			ldy 	#SystemDictionary >> 8
.a44b	20 51 a4	jsr $a451			jsr 	DSSearch
.a44e					_DSCExit:
.a44e	7a		ply				ply 								; restore YX
.a44f	fa		plx				plx
.a450	60		rts				rts
.a451					DSSearch:
.a451	86 1c		stx $1c				stx 	zTemp1 						; save dictionary in zTemp1
.a453	84 1d		sty $1d				sty 	zTemp1+1
.a455					_DSLoop:
.a455	b2 1c		lda ($1c)			lda 	(zTemp1) 					; offset 0 ?
.a457	f0 36		beq $a48f			beq 	_DSExit
.a459	a0 05		ldy #$05			ldy 	#5 							; get length in X
.a45b	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a45d	aa		tax				tax
.a45e					_DSCompare:
.a45e	c8		iny				iny 								; match next ?
.a45f	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a461	d1 1a		cmp ($1a),y			cmp 	(zTemp0),y
.a463	d0 1d		bne $a482			bne 	_DSNext
.a465	ca		dex				dex 								; done all
.a466	d0 f6		bne $a45e			bne 	_DSCompare
.a468	a0 05		ldy #$05			ldy 	#5 							; copy bank/address
.a46a	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a46c	85 31		sta $31				sta 	dirLength
.a46e	88		dey				dey
.a46f	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a471	85 30		sta $30				sta 	dirBank
.a473	88		dey				dey
.a474	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a476	85 2f		sta $2f				sta 	dirHighByte
.a478	88		dey				dey
.a479	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a47b	85 2e		sta $2e				sta 	dirLowByte
.a47d	88		dey				dey
.a47e	b1 1c		lda ($1c),y			lda 	(zTemp1),y 					; return type
.a480	38		sec				sec
.a481	60		rts				rts
.a482					_DSNext:
.a482	18		clc				clc 								; advance to next.
.a483	b2 1c		lda ($1c)			lda 	(zTemp1)
.a485	65 1c		adc $1c				adc 	zTemp1
.a487	85 1c		sta $1c				sta 	zTemp1
.a489	90 ca		bcc $a455			bcc 	_DSLoop
.a48b	e6 1d		inc $1d				inc 	zTemp1+1
.a48d	80 c6		bra $a455			bra 	_DSLoop
.a48f					_DSExit:
.a48f	18		clc				clc
.a490	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/code.asm

.a491					CodeReset:
.a491	a2 00		ldx #$00			ldx 	#CodeMemory & 255
.a493	a0 a0		ldy #$a0			ldy 	#CodeMemory >> 8
.a495	a9 01		lda #$01			lda 	#CodePage
.a497	80 00		bra $a499			bra 	CodeSetPointer
.a499					CodeSetPointer:
.a499	48		pha				pha 								; copy old to backup
.a49a	a5 24		lda $24				lda 	codePtr
.a49c	85 39		sta $39				sta 	codeBackup
.a49e	a5 25		lda $25				lda 	codePtr+1
.a4a0	85 3a		sta $3a				sta 	codeBackup+1
.a4a2	a5 26		lda $26				lda 	codeBank
.a4a4	85 3b		sta $3b				sta 	codeBackup+2
.a4a6	68		pla				pla
.a4a7	85 26		sta $26				sta 	codeBank 					; update
.a4a9	86 24		stx $24				stx 	codePtr
.a4ab	84 25		sty $25				sty 	codePtr+1
.a4ad	60		rts				rts
.a4ae					CodeRestorePointer:
.a4ae	a5 39		lda $39				lda 	codeBackup
.a4b0	85 24		sta $24				sta 	codePtr
.a4b2	a5 3a		lda $3a				lda 	codeBackup+1
.a4b4	85 25		sta $25				sta 	codePtr+1
.a4b6	a5 3b		lda $3b				lda 	codeBackup+2
.a4b8	85 26		sta $26				sta 	codeBank
.a4ba	60		rts				rts
.a4bb					CodeWriteBranch:
.a4bb	18		clc				clc 								; borrow 1 as branch is from one on
.a4bc	8a		txa				txa
.a4bd	e5 24		sbc $24				sbc 	codePtr
.a4bf	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; compile anyway.
.a4c2	aa		tax				tax 								; actual result in X.
.a4c3	98		tya				tya
.a4c4	e5 25		sbc $25				sbc 	codePtr+1
.a4c6	f0 14		beq $a4dc			beq 	_CWBCheckPositive 			; 00xx
.a4c8	c9 ff		cmp #$ff			cmp 	#$FF
.a4ca	f0 14		beq $a4e0			beq 	_CWBCheckNegative 			; FFxx
.a4cc					_CWBError:
.a4cc	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a4cf	4c 45 41 4e 3a 42 52 41				.text 	"LEAN:","BRANCH?",$00
>a4d7	4e 43 48 3f 00
.a4dc					_CWBCheckPositive:
.a4dc	8a		txa				txa
.a4dd	30 ed		bmi $a4cc			bmi 	_CWBError
.a4df	60		rts				rts
.a4e0					_CWBCheckNegative:
.a4e0	8a		txa				txa
.a4e1	10 e9		bpl $a4cc			bpl 	_CWBError
.a4e3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/error.asm

.a4e4					SyntaxError:
.a4e4	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a4e7	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX",$00
>a4ef	54 41 58 00
.a4f3					ErrorHandler:
.a4f3	fa		plx				plx 								; pull address off.
.a4f4	7a		ply				ply
.a4f5	e8		inx				inx 								; point to message
.a4f6	d0 01		bne $a4f9			bne 	_EHNoCarry
.a4f8	c8		iny				iny
.a4f9					_EHNoCarry:
.a4f9	20 3f a5	jsr $a53f			jsr 	PrintStringXY 				; print string at XY
.a4fc	a5 2b		lda $2b				lda 	lineNumber
.a4fe	05 2c		ora $2c				ora 	lineNumber+1
.a500	f0 28		beq $a52a			beq 	_EHNoLine
.a502	a2 3a		ldx #$3a			ldx 	#_EHMessage & $FF 			; print " AT "
.a504	a0 a5		ldy #$a5			ldy 	#_EHMessage >> 8
.a506	20 3f a5	jsr $a53f			jsr 	PrintStringXY
.a509	a6 2b		ldx $2b				ldx 	lineNumber 					; convert line number
.a50b	a4 2c		ldy $2c				ldy 	lineNumber+1
.a50d	20 08 a8	jsr $a808			jsr 	IntToString
.a510	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a512	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a514	20 3f a5	jsr $a53f			jsr 	PrintStringXY
.a517	a9 3a		lda #$3a			lda 	#":"						; print match count
.a519	20 50 a5	jsr $a550			jsr 	PrintCharacter
.a51c	a6 3d		ldx $3d				ldx 	matchCount
.a51e	a0 00		ldy #$00			ldy 	#0
.a520	20 08 a8	jsr $a808			jsr 	IntToString
.a523	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a525	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a527	20 3f a5	jsr $a53f			jsr 	PrintStringXY
.a52a					_EHNoLine:
.a52a	64 28		stz $28				stz 	lastDefine 					; disable running by zeroing last defined
.a52c	64 29		stz $29				stz 	lastDefine+1
.a52e	64 2a		stz $2a				stz 	lastDefine+2
.a530	a2 06		ldx #$06			ldx 	#LeanMessage & $FF 			; print LEAN info
.a532	a0 a0		ldy #$a0			ldy 	#LeanMessage >> 8
.a534	20 3f a5	jsr $a53f			jsr 	PrintStringXY
.a537	4c 52 a0	jmp $a052			jmp 	ReturnCaller 				; exit the compiler.
.a53a					_EHMessage:
>a53a	20 41 54 20 00					.text	" AT ",0
.a53f					PrintStringXY:
.a53f	86 1a		stx $1a				stx 	zTemp0
.a541	84 1b		sty $1b				sty 	zTemp0+1
.a543	a0 00		ldy #$00			ldy 	#0
.a545	b1 1a		lda ($1a),y	_PSLoop:lda 	(zTemp0),y
.a547	f0 06		beq $a54f			beq 	_PSExit
.a549	20 50 a5	jsr $a550			jsr 	PrintCharacter
.a54c	c8		iny				iny
.a54d	80 f6		bra $a545			bra 	_PSLoop
.a54f	60		rts		_PSExit:rts
.a550					PrintCharacter:
.a550	48		pha				pha
.a551	da		phx				phx
.a552	5a		phy				phy
.a553	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a556	7a		ply				ply
.a557	fa		plx				plx
.a558	68		pla				pla
.a559	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/procedure.asm

.a55a					Action_Procedure_Def:
.a55a	20 0a a3	jsr $a30a			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a55d	a9 50		lda #$50			lda 	#"P"
.a55f	20 ba a3	jsr $a3ba			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a562	a5 26		lda $26				lda 	codeBank 					; and assign it the current PC value.
.a564	a6 24		ldx $24				ldx 	codePtr
.a566	a4 25		ldy $25				ldy 	codePtr+1
.a568	86 28		stx $28				stx 	lastDefine 					; update last defined
.a56a	84 29		sty $29				sty 	lastDefine+1
.a56c	85 2a		sta $2a				sta 	lastDefine+2
.a56e	20 09 a4	jsr $a409			jsr 	DictionarySet 				; set the dictionary values.
.a571	a9 28		lda #$28			lda 	#"("
.a573	20 40 a3	jsr $a340			jsr 	EGetSyntaxCheck
.a576	a9 29		lda #$29			lda 	#")"
.a578	20 40 a3	jsr $a340			jsr 	EGetSyntaxCheck
.a57b	a9 50		lda #$50			lda 	#SCM_PROC 					; put a procedure marker on the stack.
.a57d	20 00 a9	jsr $a900			jsr 	StackPush
.a580	60		rts				rts
.a581					_APError:
.a581	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a584	4c 45 41 4e 3a 50 52 4f				.text 	"LEAN:","PROCDEF",$00
>a58c	43 44 45 46 00
.a591					Action_EndProc:
.a591	a9 50		lda #$50			lda 	#SCM_PROC 					; check corresponding PROC
.a593	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a596	a9 60		lda #$60			lda 	#CPU_RETURN					; write out RTS
.a598	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a59b	a9 01		lda #$01			lda 	#1 							; remove from stack.
.a59d	20 49 a9	jsr $a949			jsr 	StackPopStack
.a5a0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/call.asm

.a5a1					Action_Call:
.a5a1	a5 33		lda $33				lda 	genPos 						; get position
.a5a3	3a		dec a				dec 	a 							; point to the <proc>
.a5a4	48		pha				pha 								; save it
.a5a5	a9 28		lda #$28			lda 	#'('						; check (
.a5a7	20 40 a3	jsr $a340			jsr 	EGetSyntaxCheck
.a5aa	20 62 a3	jsr $a362			jsr 	EGLookNext 					; ) next ?
.a5ad	c9 a9		cmp #$a9			cmp 	#')'+$80
.a5af	f0 1a		beq $a5cb			beq 	_ACNoParameters
.a5b1	a9 52		lda #$52			lda 	#"R" 	 					; do R=<something>
.a5b3	20 e4 a5	jsr $a5e4			jsr 	ACDoParameter 				; do the parameter.
.a5b6	20 6a a3	jsr $a36a			jsr 	EGSkipNext 					; skip the parameter
.a5b9	20 62 a3	jsr $a362			jsr 	EGLookNext 					; what follows
.a5bc	c9 ac		cmp #$ac			cmp 	#","+$80 					; if not comma
.a5be	d0 0b		bne $a5cb			bne 	_ACNoParameters 			; should be end of parameters
.a5c0	20 6a a3	jsr $a36a			jsr 	EGSkipNext 					; skip ,
.a5c3	a9 59		lda #$59			lda 	#"Y"						; do Y=<something>
.a5c5	20 e4 a5	jsr $a5e4			jsr 	ACDoParameter 				; do the parameter.
.a5c8	20 6a a3	jsr $a36a			jsr 	EGSkipNext 					; skip parameter.
.a5cb					_ACNoParameters:
.a5cb	a9 29		lda #$29			lda 	#')' 						; check closing bracket.
.a5cd	20 40 a3	jsr $a340			jsr 	EGetSyntaxCheck
.a5d0	68		pla				pla 								; restore procedure posiion.
.a5d1	20 d4 a2	jsr $a2d4			jsr 	GenCopyData					; get the data
.a5d4	a9 20		lda #$20			lda 	#CPU_JSR					; output a call to it.
.a5d6	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5d9	a5 36		lda $36				lda 	elementData
.a5db	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5de	a5 37		lda $37				lda 	elementData+1
.a5e0	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5e3	60		rts				rts
.a5e4					ACDoParameter:
.a5e4	a6 33		ldx $33				ldx 	genPos 						; save position
.a5e6	da		phx				phx
.a5e7	48		pha				pha 								; save the target register
.a5e8	bd 40 06	lda $0640,x			lda 	lineBuffer,x 				; what is there ?
.a5eb	c9 e1		cmp #$e1			cmp 	#"a"+$80 					; check a-z
.a5ed	90 1a		bcc $a609			bcc 	_ADPError
.a5ef	c9 fb		cmp #$fb			cmp 	#"z"+$81
.a5f1	b0 16		bcs $a609			bcs 	_ADPError
.a5f3	ca		dex				dex 								; write = before it
.a5f4	a9 bd		lda #$bd			lda 	#"="+$80
.a5f6	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a5f9	ca		dex				dex
.a5fa	68		pla				pla 								; write Y/R before that
.a5fb	09 80		ora #$80			ora 	#$80
.a5fd	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a600	86 33		stx $33				stx 	genPos 						; make genPos point to that.
.a602	20 18 a2	jsr $a218			jsr 	GenerateOne 				; generate that.
.a605	68		pla				pla 								; restore position
.a606	85 33		sta $33				sta 	genPos
.a608	60		rts				rts
.a609					_ADPError:
.a609	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a60c	4c 45 41 4e 3a 50 41 52				.text 	"LEAN:","PARAMETER?",$00
>a614	41 4d 45 54 45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/if.asm

.a61c					Action_If:
.a61c	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a61e	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a620	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; output it
.a623	20 f0 a8	jsr $a8f0			jsr 	StackPushPC 				; push branch position on stack
.a626	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a628	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a62b	a9 49		lda #$49			lda 	#SCM_IF 					; put if marker on the stack.
.a62d	20 00 a9	jsr $a900			jsr 	StackPush
.a630	60		rts				rts
.a631					Action_Else:
.a631	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a633	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a636	a9 80		lda #$80			lda 	#CPU_BRA 					; compile branch
.a638	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a63b	a5 24		lda $24				lda 	codePtr 					; push current position on the stack
.a63d	48		pha				pha
.a63e	a5 25		lda $25				lda 	codePtr+1
.a640	48		pha				pha
.a641	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a643	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a646	20 61 a6	jsr $a661			jsr 	BackPatchIf 				; do the backpatch.
.a649	68		pla				pla 								; overwrite backpatch address
.a64a	a0 01		ldy #$01			ldy 	#1 							; with stacked position.
.a64c	91 12		sta ($12),y			sta 	(aStackPtr),y
.a64e	68		pla				pla
.a64f	c8		iny				iny
.a650	91 12		sta ($12),y			sta 	(aStackPtr),y
.a652	60		rts				rts
.a653					Action_Endif:
.a653	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a655	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a658	20 61 a6	jsr $a661			jsr 	BackPatchIf 				; do the backpatch.
.a65b	a9 04		lda #$04			lda 	#3+1 						; throw the stack.
.a65d	20 49 a9	jsr $a949			jsr 	StackPopStack
.a660	60		rts				rts
.a661					BackPatchIf:
.a661	a5 24		lda $24					lda 	codePtr 					; save code pointer
.a663	48		pha				pha
.a664	a5 25		lda $25				lda 	codePtr+1
.a666	48		pha				pha
.a667	a0 03		ldy #$03			ldy 	#3 							; AYX = address.
.a669	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a66b	48		pha				pha
.a66c	88		dey				dey
.a66d	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a66f	aa		tax				tax
.a670	88		dey				dey
.a671	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a673	a8		tay				tay
.a674	68		pla				pla
.a675	20 99 a4	jsr $a499			jsr 	CodeSetPointer 				; set write position to that
.a678	7a		ply				ply 								; target address in YX
.a679	fa		plx				plx
.a67a	20 bb a4	jsr $a4bb			jsr 	CodeWriteBranch 			; write the actual branch there
.a67d	20 ae a4	jsr $a4ae			jsr 	CodeRestorePointer 			; undo the set pointer.
.a680	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/repeat.asm

.a681					Action_Repeat:
.a681	20 f0 a8	jsr $a8f0			jsr 	StackPushPC 					; push loop position on stack
.a684	a9 52		lda #$52			lda 	#SCM_REPEAT 					; put a repeat marker on the stack.
.a686	20 00 a9	jsr $a900			jsr 	StackPush
.a689	60		rts				rts
.a68a					Action_Until:
.a68a	a9 52		lda #$52			lda 	#SCM_REPEAT 				; check corresponding repeat
.a68c	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a68f	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a691	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a693	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a695	20 34 a9	jsr $a934			jsr 	StackCompileBranch 			; compile a branch.
.a698	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a69a	20 49 a9	jsr $a949			jsr 	StackPopStack
.a69d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/for.asm

.a69e					Action_AFor:
.a69e	20 f0 a8	jsr $a8f0			jsr 	StackPushPC 					; push loop position on stack
.a6a1	a9 3a		lda #$3a			lda 	#CPU_DECA 						; counts backwards from n-1 to 0.
.a6a3	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6a6	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6a8	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6ab	a9 46		lda #$46			lda 	#SCM_FOR 						; put a for marker on the stack.
.a6ad	20 00 a9	jsr $a900			jsr 	StackPush
.a6b0	60		rts				rts
.a6b1					Action_RFor:
.a6b1	20 f0 a8	jsr $a8f0			jsr 	StackPushPC 					; push loop position on stack
.a6b4	a9 c9		lda #$c9			lda 	#CPU_CMPIM 						; dec XA code cmp #0
.a6b6	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6b9	a9 00		lda #$00			lda 	#0
.a6bb	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6be	a9 d0		lda #$d0			lda 	#CPU_BNE 						; bne +1
.a6c0	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c3	a9 01		lda #$01			lda 	#1
.a6c5	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c8	a9 ca		lda #$ca			lda 	#CPU_DEX 						; dex
.a6ca	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6cd	a9 3a		lda #$3a			lda 	#CPU_DECA 						; dec a
.a6cf	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d2	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6d4	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d7	a9 da		lda #$da			lda 	#CPU_PHX
.a6d9	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6dc	a9 47		lda #$47			lda 	#SCM_INTFOR 					; put a for marker on the stack.
.a6de	20 00 a9	jsr $a900			jsr 	StackPush
.a6e1	60		rts				rts
.a6e2					Action_Next:
.a6e2	b2 12		lda ($12)			lda 	(aStackPtr) 				; check for R-Next
.a6e4	c9 47		cmp #$47			cmp 	#SCM_INTFOR
.a6e6	f0 17		beq $a6ff			beq 	_AN16Bit
.a6e8	a9 46		lda #$46			lda 	#SCM_FOR 					; check corresponding for
.a6ea	20 1c a9	jsr $a91c			jsr 	StackCheckStructureMarker
.a6ed	a9 68		lda #$68			lda 	#CPU_PLA 					; pop index off stack.
.a6ef	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6f2	a9 d0		lda #$d0			lda 	#CPU_BNE 					; branch back if #0
.a6f4	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a6f6	20 34 a9	jsr $a934			jsr 	StackCompileBranch 			; compile a branch.
.a6f9	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a6fb	20 49 a9	jsr $a949			jsr 	StackPopStack
.a6fe	60		rts				rts
.a6ff					_AN16Bit:
.a6ff	a9 fa		lda #$fa			lda 	#CPU_PLX 					; pop index on stack
.a701	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a704	a9 68		lda #$68			lda 	#CPU_PLA
.a706	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a709	a9 d0		lda #$d0			lda 	#CPU_BNE
.a70b	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a70d	20 34 a9	jsr $a934			jsr 	StackCompileBranch 			; compile a branch (check LSB)
.a710	a9 e0		lda #$e0			lda 	#CPU_CPXIM  				; check MSB of index
.a712	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a715	a9 00		lda #$00			lda 	#0
.a717	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a71a	a9 d0		lda #$d0			lda 	#CPU_BNE
.a71c	a0 01		ldy #$01			ldy 	#1
.a71e	20 34 a9	jsr $a934			jsr 	StackCompileBranch
.a721	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a723	20 49 a9	jsr $a949			jsr 	StackPopStack
.a726	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/variables.asm

.a727					VariableReset:
.a727	a9 00		lda #$00			lda 	#(VariableMemory) & $FF
.a729	85 18		sta $18				sta 	varPtr
.a72b	a9 07		lda #$07			lda 	#(VariableMemory) >> 8
.a72d	85 19		sta $19				sta 	varPtr+1
.a72f	60		rts				rts
.a730					Action_ByteVar:
.a730	a9 01		lda #$01			lda 	#1
.a732	80 02		bra $a736			bra 	VariableDeclare
.a734					Action_WordVar:
.a734	a9 02		lda #$02			lda 	#2
.a736					VariableDeclare:
.a736	85 3c		sta $3c				sta 	varSize 					; save variable size.
.a738					_VDLoop:
.a738	a9 53		lda #$53			lda 	#"S"						; get I or S
.a73a	a6 3c		ldx $3c				ldx 	varSize
.a73c	ca		dex				dex
.a73d	f0 02		beq $a741			beq 	_VDNotWord
.a73f	a9 49		lda #$49			lda 	#"I"
.a741					_VDNotWord:
.a741	48		pha				pha
.a742	20 0a a3	jsr $a30a			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a745	68		pla				pla
.a746	20 ba a3	jsr $a3ba			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a749	20 62 a3	jsr $a362			jsr 	EGLookNext 					; what's next ?
.a74c	c9 c0		cmp #$c0			cmp 	#'@'|$80 					; if not @, use default
.a74e	d0 21		bne $a771			bne 	_VDDefault
.a750	20 6a a3	jsr $a36a			jsr 	EGSkipNext 					; skip @
.a753	20 62 a3	jsr $a362			jsr 	EGLookNext 					; get next
.a756	c9 e2		cmp #$e2			cmp 	#'b'|$80 					; must be b/w constant
.a758	f0 04		beq $a75e			beq 	_VDLegit
.a75a	c9 f7		cmp #$f7			cmp 	#'w'|$80
.a75c	d0 34		bne $a792			bne 	_VDError
.a75e					_VDLegit:
.a75e	a5 33		lda $33				lda 	genPos 						; position
.a760	20 d4 a2	jsr $a2d4			jsr 	GenCopyData					; access data
.a763	a9 00		lda #$00			lda 	#0 		 					; set the address
.a765	a6 36		ldx $36				ldx 	elementData
.a767	a4 37		ldy $37				ldy 	elementData+1
.a769	20 09 a4	jsr $a409			jsr 	DictionarySet
.a76c	20 6a a3	jsr $a36a			jsr 	EGSkipNext 					; consume the constant
.a76f	80 14		bra $a785			bra 	_VDTryNext
.a771					_VDDefault:
.a771	a6 18		ldx $18				ldx 	varPtr 						; place at default position
.a773	a4 19		ldy $19				ldy 	varPtr+1
.a775	a9 00		lda #$00			lda 	#0
.a777	20 09 a4	jsr $a409			jsr 	DictionarySet
.a77a	a5 3c		lda $3c				lda 	varSize 					; get count of bytes back
.a77c	18		clc				clc
.a77d	65 18		adc $18				adc 	varPtr
.a77f	85 18		sta $18				sta 	varPtr
.a781	90 02		bcc $a785			bcc 	_VDNoCarry
.a783	e6 19		inc $19				inc 	varPtr+1
.a785					_VDNoCarry:
.a785					_VDTryNext:
.a785	20 62 a3	jsr $a362			jsr 	EGLookNext 					; what's next ?
.a788	c9 ac		cmp #$ac			cmp 	#","|$80 					; is it a comma
.a78a	d0 05		bne $a791			bne 	_VDExit 					; no, exit.
.a78c	20 6a a3	jsr $a36a			jsr 	EGSkipNext
.a78f	80 a7		bra $a738			bra 	_VDLoop
.a791					_VDExit:
.a791	60		rts				rts
.a792					_VDError:
.a792	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a795	4c 45 41 4e 3a 41 44 44				.text 	"LEAN:","ADDRESS?",$00
>a79d	52 45 53 53 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/crunch.asm

.a7a3					Action_DictionaryCrunch:
.a7a3	a9 2b		lda #$2b			lda 	#(UserDictionary) & $FF
.a7a5	85 1a		sta $1a				sta 	zTemp0
.a7a7	a9 b5		lda #$b5			lda 	#(UserDictionary) >> 8
.a7a9	85 1b		sta $1b				sta 	zTemp0+1
.a7ab					_ADCLoop:
.a7ab	b2 1a		lda ($1a)			lda 	(zTemp0) 					; reached end of dictionary
.a7ad	f0 58		beq $a807			beq 	_ADCExit
.a7af	a0 06		ldy #$06			ldy 	#6							; read first character
.a7b1	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a7b3	29 7f		and #$7f			and 	#$7F 						; is it a '.' ?
.a7b5	c9 2e		cmp #$2e			cmp 	#'.'
.a7b7	d0 41		bne $a7fa			bne 	_ADCNext 					; if not, it's a global, skip to next.
.a7b9	a5 1a		lda $1a				lda 	zTemp0 						; work out copy from, into zTemp1
.a7bb	48		pha				pha
.a7bc	18		clc				clc
.a7bd	72 1a		adc ($1a)			adc 	(zTemp0)
.a7bf	85 1c		sta $1c				sta 	zTemp1
.a7c1	a5 1b		lda $1b				lda 	zTemp0+1
.a7c3	48		pha				pha
.a7c4	69 00		adc #$00			adc 	#0
.a7c6	85 1d		sta $1d				sta 	zTemp1+1
.a7c8					_ADCopyOverwrite:
.a7c8	b2 1c		lda ($1c)			lda 	(zTemp1) 					; byte copy
.a7ca	92 1a		sta ($1a)			sta 	(zTemp0)
.a7cc	a5 1c		lda $1c				lda 	zTemp1 						; until the upper address = dictionary top
.a7ce	c5 14		cmp $14				cmp 	dictPtr
.a7d0	d0 06		bne $a7d8			bne 	_ADCNextCopy
.a7d2	a5 1d		lda $1d				lda 	zTemp1+1
.a7d4	c5 15		cmp $15				cmp 	dictPtr+1
.a7d6	f0 0e		beq $a7e6			beq 	_ADCRemoved
.a7d8					_ADCNextCopy:
.a7d8	e6 1a		inc $1a				inc 	zTemp0
.a7da	d0 02		bne $a7de			bne 	_NoCarry
.a7dc	e6 1b		inc $1b				inc 	zTemp0+1
.a7de					_NoCarry:
.a7de	e6 1c		inc $1c				inc 	zTemp1
.a7e0	d0 02		bne $a7e4			bne 	_NoCarry
.a7e2	e6 1d		inc $1d				inc 	zTemp1+1
.a7e4					_NoCarry:
.a7e4	80 e2		bra $a7c8			bra 	_ADCopyOverwrite
.a7e6					_ADCRemoved:
.a7e6	a5 1a		lda $1a				lda 	zTemp0 						; copy from position is new top.
.a7e8	85 14		sta $14				sta 	dictPtr
.a7ea	a5 1b		lda $1b				lda 	zTemp0+1
.a7ec	85 15		sta $15				sta 	dictPtr+1
.a7ee	a9 00		lda #$00			lda 	#0							; mark end as not copied in loop
.a7f0	92 14		sta ($14)			sta 	(dictPtr)
.a7f2	68		pla				pla 								; restore original position.
.a7f3	85 1b		sta $1b				sta 	zTemp0+1
.a7f5	68		pla				pla
.a7f6	85 1a		sta $1a				sta 	zTemp0
.a7f8	80 b1		bra $a7ab			bra 	_ADCLoop 					; and continue from same position.
.a7fa					_ADCNext:
.a7fa	18		clc				clc 								; advance to next.
.a7fb	a5 1a		lda $1a				lda 	zTemp0
.a7fd	72 1a		adc ($1a)			adc 	(zTemp0)
.a7ff	85 1a		sta $1a				sta 	zTemp0
.a801	90 a8		bcc $a7ab			bcc 	_ADCLoop
.a803	e6 1b		inc $1b				inc 	zTemp0+1
.a805	80 a4		bra $a7ab			bra 	_ADCLoop
.a807					_ADCExit:
.a807	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/tostring.asm

.a808					IntToString:
.a808	86 1a		stx $1a				stx 	zTemp0 						; count is in zTemp0
.a80a	84 1b		sty $1b				sty 	zTemp0+1
.a80c	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a80e	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a810					_ITSLoop:
.a810	64 1c		stz $1c				stz 	zTemp1 						; this is the count of subtracts.
.a812					_ITSSubtractLoop:
.a812	38		sec				sec
.a813	a5 1a		lda $1a				lda 	zTemp0 						; try to calculate
.a815	fd 4b a8	sbc $a84b,x			sbc 	_ITSWords,x
.a818	48		pha				pha
.a819	a5 1b		lda $1b				lda 	zTemp0+1
.a81b	fd 4c a8	sbc $a84c,x			sbc 	_ITSWords+1,x
.a81e	90 09		bcc $a829			bcc 	_ITSEndSub 					; can't subtract any more.
.a820	85 1b		sta $1b				sta 	zTemp0+1 					; update zTemp
.a822	68		pla				pla
.a823	85 1a		sta $1a				sta 	zTemp0
.a825	e6 1c		inc $1c				inc 	zTemp1 						; bump subtract count.
.a827	80 e9		bra $a812			bra 	_ITSSubtractLoop
.a829					_ITSEndSub:
.a829	68		pla				pla 								; throw away the interim result
.a82a	a5 1c		lda $1c				lda 	zTemp1 						; if the subtract count is non zero
.a82c	d0 04		bne $a832			bne 	_ITSWriteOut 				; always write it out
.a82e	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a830	f0 06		beq $a838			beq 	_ITSNext 					; suppressing leading zeros.
.a832					_ITSWriteOut:
.a832	09 30		ora #$30			ora 	#48 						; output digit.
.a834	99 40 06	sta $0640,y			sta 	lineBuffer,y
.a837	c8		iny				iny
.a838					_ITSNext:
.a838	e8		inx				inx
.a839	e8		inx				inx
.a83a	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a83c	d0 d2		bne $a810			bne 	_ITSLoop 					; do the new digits
.a83e	a5 1a		lda $1a				lda 	zTemp0 						; output the last digit
.a840	09 30		ora #$30			ora 	#48
.a842	99 40 06	sta $0640,y			sta 	lineBuffer,y 				; make it ASCIIZ.
.a845	a9 00		lda #$00			lda 	#0
.a847	99 41 06	sta $0641,y			sta 	lineBuffer+1,y
.a84a	60		rts				rts
.a84b					_ITSWords:
>a84b	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a853					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: utility/tointeger.asm

.a853					StringToInt:
.a853	86 20		stx $20				stx 	zTemp3 						; save string
.a855	84 21		sty $21				sty 	zTemp3+1
.a857	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a859	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a85b	b2 20		lda ($20)			lda 	(zTemp3) 					; first character
.a85d	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a85f	f0 1b		beq $a87c			beq 	_STIConvert 				; convert from character 1, base 16.
.a861	88		dey				dey 								; from character 0
.a862	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a864	c9 2d		cmp #$2d			cmp 	#"-"						; first char is unary minus ?
.a866	d0 14		bne $a87c			bne 	_STIConvert 				; no, convert as +ve decimal
.a868	c8		iny				iny 								; skip the minus
.a869	20 7c a8	jsr $a87c			jsr 	_STIConvert 				; convert the unsigned part.
.a86c	90 0d		bcc $a87b			bcc 	_STIExit 					; failed
.a86e	8a		txa				txa 								; 1's complement YX
.a86f	49 ff		eor #$ff			eor 	#$FF
.a871	aa		tax				tax
.a872	98		tya				tya
.a873	49 ff		eor #$ff			eor 	#$FF
.a875	a8		tay				tay
.a876	e8		inx				inx 								; +1 to make it negative
.a877	38		sec				sec
.a878	d0 01		bne $a87b			bne 	_STIExit
.a87a	c8		iny				iny
.a87b					_STIExit:
.a87b	60		rts				rts
.a87c					_STIConvert:
.a87c	86 1c		stx $1c				stx 	zTemp1 						; save base in zTemp1
.a87e	b1 20		lda ($20),y			lda 	(zTemp3),y 					; get first character
.a880	f0 5f		beq $a8e1			beq 	_STIFail 					; if zero, then it has failed anyway.
.a882	64 1a		stz $1a				stz 	zTemp0 						; clear the result.
.a884	64 1b		stz $1b				stz 	zTemp0+1
.a886					_STILoop:
.a886	a5 1a		lda $1a				lda 	zTemp0 						; copy current to zTemp2
.a888	85 1e		sta $1e				sta 	zTemp2
.a88a	a5 1b		lda $1b				lda 	zTemp0+1
.a88c	85 1f		sta $1f				sta 	zTemp2+1
.a88e	64 1a		stz $1a				stz 	zTemp0 						; clear result
.a890	64 1b		stz $1b				stz 	zTemp0+1
.a892	a6 1c		ldx $1c				ldx 	zTemp1 						; X contains the base.
.a894					_STIMultiply:
.a894	8a		txa				txa 								; shift Y right into carry.
.a895	4a		lsr a				lsr 	a
.a896	aa		tax				tax
.a897	90 0d		bcc $a8a6			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a899	18		clc				clc
.a89a	a5 1e		lda $1e				lda 	zTemp2 						; add zTemp2 into zTemp0
.a89c	65 1a		adc $1a				adc 	zTemp0
.a89e	85 1a		sta $1a				sta 	zTemp0
.a8a0	a5 1f		lda $1f				lda 	zTemp2+1
.a8a2	65 1b		adc $1b				adc 	zTemp0+1
.a8a4	85 1b		sta $1b				sta 	zTemp0+1
.a8a6					_STINoAdd:
.a8a6	06 1e		asl $1e				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a8a8	26 1f		rol $1f				rol 	zTemp2+1
.a8aa	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a8ac	d0 e6		bne $a894			bne 	_STIMultiply
.a8ae	b1 20		lda ($20),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a8b0	29 7f		and #$7f			and 	#$7F 						; remove End of Token bit if set
.a8b2	c9 30		cmp #$30			cmp 	#"0"
.a8b4	90 2b		bcc $a8e1			bcc 	_STIFail
.a8b6	c9 3a		cmp #$3a			cmp 	#"9"+1
.a8b8	90 0b		bcc $a8c5			bcc 	_STIOkay
.a8ba	c9 41		cmp #$41			cmp 	#"A"
.a8bc	90 23		bcc $a8e1			bcc 	_STIFail
.a8be	c9 47		cmp #$47			cmp 	#"F"+1
.a8c0	b0 1f		bcs $a8e1			bcs 	_STIFail
.a8c2	38		sec				sec 								; hex adjust
.a8c3	e9 07		sbc #$07			sbc 	#7
.a8c5					_STIOkay:
.a8c5	38		sec				sec
.a8c6	e9 30		sbc #$30			sbc 	#48
.a8c8	c5 1c		cmp $1c				cmp 	zTemp1  					; if >= base then fail.
.a8ca	b0 15		bcs $a8e1			bcs 	_STIFail
.a8cc	d8		cld				cld
.a8cd	65 1a		adc $1a				adc 	zTemp0 						; add into the current value
.a8cf	85 1a		sta $1a				sta 	zTemp0
.a8d1	90 02		bcc $a8d5			bcc 	_STINoCarry
.a8d3	e6 1b		inc $1b				inc 	zTemp0+1
.a8d5					_STINoCarry:
.a8d5	b1 20		lda ($20),y			lda 	(zTemp3),y					; get character just done.
.a8d7	c8		iny				iny 								; point to next
.a8d8	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8d9	90 ab		bcc $a886			bcc 	_STILoop 					; not reached the end.
.a8db	a6 1a		ldx $1a				ldx 	zTemp0 						; return result
.a8dd	a4 1b		ldy $1b				ldy 	zTemp0+1
.a8df	38		sec				sec
.a8e0	60		rts				rts
.a8e1					_STIFail:
.a8e1	18		clc				clc
.a8e2	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/astack.asm

.a8e3					StackReset:
.a8e3	a9 3f		lda #$3f			lda 	#(assemblerStack) & $FF
.a8e5	85 12		sta $12				sta 	aStackPtr
.a8e7	a9 06		lda #$06			lda 	#(assemblerStack) >> 8
.a8e9	85 13		sta $13				sta 	aStackPtr+1
.a8eb	a9 2a		lda #$2a			lda 	#SCM_TOP
.a8ed	92 12		sta ($12)			sta 	(aStackPtr)
.a8ef	60		rts				rts
.a8f0					StackPushPC:
.a8f0	a5 26		lda $26				lda 	codeBank
.a8f2	20 00 a9	jsr $a900			jsr 	StackPush
.a8f5	a5 24		lda $24				lda 	codePtr
.a8f7	20 00 a9	jsr $a900			jsr 	StackPush
.a8fa	a5 25		lda $25				lda 	codePtr+1
.a8fc	20 00 a9	jsr $a900			jsr 	StackPush
.a8ff	60		rts				rts
.a900					StackPush:
.a900	c6 12		dec $12				dec 	aStackPtr 					; decrement TOS pointer.
.a902	f0 03		beq $a907			beq 	_SPStack
.a904	92 12		sta ($12)			sta 	(aStackPtr)					; write to new TOS
.a906	60		rts				rts
.a907					_SPStack:
.a907	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a90a	4c 45 41 4e 3a 52 45 54				.text 	"LEAN:","RETURN STACK",$00
>a912	55 52 4e 20 53 54 41 43 4b 00
.a91c					StackCheckStructureMarker:
.a91c	d2 12		cmp ($12)			cmp 	(aStackPtr)					; check if tos matches
.a91e	d0 01		bne $a921			bne 	_SCSError
.a920	60		rts				rts
.a921					_SCSError:
.a921	20 f3 a4	jsr $a4f3			jsr 	ErrorHandler
>a924	4c 45 41 4e 3a 53 54 52				.text 	"LEAN:","STRUCTURES",$00
>a92c	55 43 54 55 52 45 53 00
.a934					StackCompileBranch:
.a934	48		pha				pha
.a935	da		phx				phx
.a936	5a		phy				phy
.a937	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; write the opcode.
.a93a	c8		iny				iny
.a93b	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a93d	aa		tax				tax
.a93e	88		dey				dey
.a93f	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a941	a8		tay				tay
.a942	20 bb a4	jsr $a4bb			jsr 	CodeWriteBranch 			; write a branch there.
.a945	7a		ply				ply
.a946	fa		plx				plx
.a947	68		pla				pla
.a948	60		rts				rts
.a949					StackPopStack:
.a949	18		clc				clc 								; return stack all in same page
.a94a	65 12		adc $12				adc 	aStackPtr 					; so we don't carry out.
.a94c	85 12		sta $12				sta 	aStackPtr
.a94e	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/system.inc

.a94f					L10000:
>a94f	04					.byte L10000_END-L10000-1
.a950	a9 63		lda #$63		lda  #$63
.a952	a2 73		ldx #$73		ldx  #$73
.a954					L10000_END:
.a954					L10001:
>a954	02					.byte L10001_END-L10001-1
.a955	84 63		sty $63			sty  $63
.a957					L10001_END:
.a957					L10002:
>a957	02					.byte L10002_END-L10002-1
.a958	85 63		sta $63			sta  $63
.a95a					L10002_END:
.a95a					L10003:
>a95a	02					.byte L10003_END-L10003-1
.a95b	85 63		sta $63			sta  $63
.a95d					L10003_END:
.a95d					L10004:
>a95d	04					.byte L10004_END-L10004-1
.a95e	a5 63		lda $63			lda  $63
.a960	a2 00		ldx #$00		ldx  #0
.a962					L10004_END:
.a962					L10005:
>a962	02					.byte L10005_END-L10005-1
>a963	a3 00					.byte $a3,$00
.a965					L10005_END:
.a965					L10006:
>a965	09					.byte L10006_END-L10006-1
.a966	91 63		sta ($63),y		sta  ($7363& $ff),y
.a968	c8		iny			iny
.a969	8a		txa			txa
.a96a	91 63		sta ($63),y		sta  ($7363& $ff),y
.a96c	88		dey			dey
.a96d	b1 63		lda ($63),y		lda  ($7363& $ff),y
.a96f					L10006_END:
.a96f					L10007:
>a96f	02					.byte L10007_END-L10007-1
.a970	91 63		sta ($63),y		sta  ($7363& $ff),y
.a972					L10007_END:
.a972					L10008:
>a972	06					.byte L10008_END-L10008-1
.a973	8d 63 73	sta $7363		sta  $7363
.a976	8e 83 73	stx $7383		stx  $7383
.a979					L10008_END:
.a979					L10009:
>a979	06					.byte L10009_END-L10009-1
.a97a	ad 63 73	lda $7363		lda  $7363
.a97d	ae 83 73	ldx $7383		ldx  $7383
.a980					L10009_END:
.a980					L10010:
>a980	09					.byte L10010_END-L10010-1
.a981	91 63		sta ($63),y		sta  ($63& $ff),y
.a983	c8		iny			iny
.a984	8a		txa			txa
.a985	91 63		sta ($63),y		sta  ($63& $ff),y
.a987	88		dey			dey
.a988	b1 63		lda ($63),y		lda  ($63& $ff),y
.a98a					L10010_END:
.a98a					L10011:
>a98a	02					.byte L10011_END-L10011-1
.a98b	91 63		sta ($63),y		sta  ($63& $ff),y
.a98d					L10011_END:
.a98d					L10012:
>a98d	04					.byte L10012_END-L10012-1
.a98e	85 63		sta $63			sta  $63
.a990	86 83		stx $83			stx  $83
.a992					L10012_END:
.a992					L10013:
>a992	04					.byte L10013_END-L10013-1
.a993	a5 63		lda $63			lda  $63
.a995	a6 83		ldx $83			ldx  $83
.a997					L10013_END:
.a997					L10014:
>a997	03					.byte L10014_END-L10014-1
.a998	8c 63 73	sty $7363		sty  $7363
.a99b					L10014_END:
.a99b					L10015:
>a99b	03					.byte L10015_END-L10015-1
.a99c	8d 63 73	sta $7363		sta  $7363
.a99f					L10015_END:
.a99f					L10016:
>a99f	03					.byte L10016_END-L10016-1
.a9a0	8d 63 73	sta $7363		sta  $7363
.a9a3					L10016_END:
.a9a3					L10017:
>a9a3	05					.byte L10017_END-L10017-1
.a9a4	ad 63 73	lda $7363		lda  $7363
.a9a7	a2 00		ldx #$00		ldx  #0
.a9a9					L10017_END:
.a9a9					L10018:
>a9a9	04					.byte L10018_END-L10018-1
.a9aa	a9 63		lda #$63		lda  #$63
.a9ac	a2 73		ldx #$73		ldx  #$73
.a9ae					L10018_END:
.a9ae					L10019:
>a9ae	08					.byte L10019_END-L10019-1
.a9af	48		pha			pha
.a9b0	8a		txa			txa
.a9b1	49 ff		eor #$ff		eor  #$ff
.a9b3	aa		tax			tax
.a9b4	68		pla			pla
.a9b5	49 ff		eor #$ff		eor  #$ff
.a9b7					L10019_END:
.a9b7					L10020:
>a9b7	02					.byte L10020_END-L10020-1
.a9b8	49 ff		eor #$ff		eor  #$ff
.a9ba					L10020_END:
.a9ba					L10021:
>a9ba	02					.byte L10021_END-L10021-1
.a9bb	a4 63		ldy $63			ldy  $63
.a9bd					L10021_END:
.a9bd					L10022:
>a9bd	03					.byte L10022_END-L10022-1
.a9be	ac 63 73	ldy $7363		ldy  $7363
.a9c1					L10022_END:
.a9c1					L10023:
>a9c1	02					.byte L10023_END-L10023-1
.a9c2	a0 63		ldy #$63		ldy  #$63
.a9c4					L10023_END:
.a9c4					L10024:
>a9c4	01					.byte L10024_END-L10024-1
.a9c5	a8		tay			tay
.a9c6					L10024_END:
.a9c6					L10025:
>a9c6	01					.byte L10025_END-L10025-1
.a9c7	a8		tay			tay
.a9c8					L10025_END:
.a9c8					L10026:
>a9c8	01					.byte L10026_END-L10026-1
.a9c9	5a		phy			phy
.a9ca					L10026_END:
.a9ca					L10027:
>a9ca	02					.byte L10027_END-L10027-1
>a9cb	a3 01					.byte $a3,$01
.a9cd					L10027_END:
.a9cd					L10028:
>a9cd	02					.byte L10028_END-L10028-1
>a9ce	a3 02					.byte $a3,$02
.a9d0					L10028_END:
.a9d0					L10029:
>a9d0	01					.byte L10029_END-L10029-1
.a9d1	7a		ply			ply
.a9d2					L10029_END:
.a9d2					L10030:
>a9d2	03					.byte L10030_END-L10030-1
.a9d3	7a		ply			ply
.a9d4	fa		plx			plx
.a9d5	68		pla			pla
.a9d6					L10030_END:
.a9d6					L10031:
>a9d6	02					.byte L10031_END-L10031-1
.a9d7	fa		plx			plx
.a9d8	68		pla			pla
.a9d9					L10031_END:
.a9d9					L10032:
>a9d9	01					.byte L10032_END-L10032-1
.a9da	68		pla			pla
.a9db					L10032_END:
.a9db					L10033:
>a9db	02					.byte L10033_END-L10033-1
>a9dc	a3 03					.byte $a3,$03
.a9de					L10033_END:
.a9de					L10034:
>a9de	02					.byte L10034_END-L10034-1
>a9df	a3 04					.byte $a3,$04
.a9e1					L10034_END:
.a9e1					L10035:
>a9e1	03					.byte L10035_END-L10035-1
.a9e2	48		pha			pha
.a9e3	da		phx			phx
.a9e4	5a		phy			phy
.a9e5					L10035_END:
.a9e5					L10036:
>a9e5	0a					.byte L10036_END-L10036-1
.a9e6	c9 63		cmp #$63		cmp  #$63
.a9e8	48		pha			pha
.a9e9	8a		txa			txa
.a9ea	e9 73		sbc #$73		sbc  #$73
.a9ec	68		pla			pla
>a9ed	93					.byte $93
.a9ee	b0 fe		bcs $a9ee		bcs *
.a9f0					L10036_END:
.a9f0					L10037:
>a9f0	0c					.byte L10037_END-L10037-1
.a9f1	cd 63 73	cmp $7363		cmp  $7363
.a9f4	48		pha			pha
.a9f5	8a		txa			txa
.a9f6	ed 83 73	sbc $7383		sbc  $7383
.a9f9	68		pla			pla
>a9fa	93					.byte $93
.a9fb	b0 fe		bcs $a9fb		bcs *
.a9fd					L10037_END:
.a9fd					L10038:
>a9fd	0a					.byte L10038_END-L10038-1
.a9fe	c5 63		cmp $63			cmp  $63
.aa00	48		pha			pha
.aa01	8a		txa			txa
.aa02	e5 83		sbc $83			sbc  $83
.aa04	68		pla			pla
>aa05	93					.byte $93
.aa06	b0 fe		bcs $aa06		bcs *
.aa08					L10038_END:
.aa08					L10039:
>aa08	09					.byte L10039_END-L10039-1
.aa09	c9 63		cmp #$63		cmp  #$63
.aa0b	d0 02		bne $aa0f		bne  _skip1
.aa0d	e0 73		cpx #$73		cpx  #$73
.aa0f					_skip1:
>aa0f	93					.byte $93
.aa10	f0 fe		beq $aa10		beq *
.aa12					L10039_END:
.aa12					L10040:
>aa12	04					.byte L10040_END-L10040-1
.aa13	a9 63		lda #$63		lda  #$63
.aa15	a2 73		ldx #$73		ldx  #$73
.aa17					L10040_END:
.aa17					L10041:
>aa17	04					.byte L10041_END-L10041-1
.aa18	a5 63		lda $63			lda  $63
.aa1a	a2 00		ldx #$00		ldx  #0
.aa1c					L10041_END:
.aa1c					L10042:
>aa1c	07					.byte L10042_END-L10042-1
.aa1d	c8		iny			iny
.aa1e	b1 63		lda ($63),y		lda  ($7363& $ff),y
.aa20	aa		tax			tax
.aa21	88		dey			dey
.aa22	b1 63		lda ($63),y		lda  ($7363& $ff),y
.aa24					L10042_END:
.aa24					L10043:
>aa24	0b					.byte L10043_END-L10043-1
.aa25	cd 63 73	cmp $7363		cmp  $7363
.aa28	d0 03		bne $aa2d		bne  _skip1
.aa2a	ec 83 73	cpx $7383		cpx  $7383
.aa2d					_skip1:
>aa2d	93					.byte $93
.aa2e	f0 fe		beq $aa2e		beq *
.aa30					L10043_END:
.aa30					L10044:
>aa30	06					.byte L10044_END-L10044-1
.aa31	ad 63 73	lda $7363		lda  $7363
.aa34	ae 83 73	ldx $7383		ldx  $7383
.aa37					L10044_END:
.aa37					L10045:
>aa37	07					.byte L10045_END-L10045-1
.aa38	c8		iny			iny
.aa39	b1 63		lda ($63),y		lda  ($63& $ff),y
.aa3b	aa		tax			tax
.aa3c	88		dey			dey
.aa3d	b1 63		lda ($63),y		lda  ($63& $ff),y
.aa3f					L10045_END:
.aa3f					L10046:
>aa3f	09					.byte L10046_END-L10046-1
.aa40	c5 63		cmp $63			cmp  $63
.aa42	d0 02		bne $aa46		bne  _skip1
.aa44	e4 83		cpx $83			cpx  $83
.aa46					_skip1:
>aa46	93					.byte $93
.aa47	f0 fe		beq $aa47		beq *
.aa49					L10046_END:
.aa49					L10047:
>aa49	04					.byte L10047_END-L10047-1
.aa4a	a5 63		lda $63			lda  $63
.aa4c	a6 83		ldx $83			ldx  $83
.aa4e					L10047_END:
.aa4e					L10048:
>aa4e	05					.byte L10048_END-L10048-1
.aa4f	ad 63 73	lda $7363		lda  $7363
.aa52	a2 00		ldx #$00		ldx  #0
.aa54					L10048_END:
.aa54					L10049:
>aa54	04					.byte L10049_END-L10049-1
.aa55	a9 63		lda #$63		lda  #$63
.aa57	a2 73		ldx #$73		ldx  #$73
.aa59					L10049_END:
.aa59					L10050:
>aa59	03					.byte L10050_END-L10050-1
.aa5a	98		tya			tya
.aa5b	a2 00		ldx #$00		ldx  #0
.aa5d					L10050_END:
.aa5d					L10051:
>aa5d	02					.byte L10051_END-L10051-1
.aa5e	a2 00		ldx #$00		ldx  #0
.aa60					L10051_END:
.aa60					L10052:
>aa60	09					.byte L10052_END-L10052-1
.aa61	c9 00		cmp #$00		cmp #0
.aa63	d0 02		bne $aa67		bne *+4
.aa65	e0 00		cpx #$00		cpx #0
>aa67	93					.byte $93
.aa68	f0 fe		beq $aa68		beq *
.aa6a					L10052_END:
.aa6a					L10053:
>aa6a	0a					.byte L10053_END-L10053-1
.aa6b	c9 63		cmp #$63		cmp  #$63
.aa6d	48		pha			pha
.aa6e	8a		txa			txa
.aa6f	e9 73		sbc #$73		sbc  #$73
.aa71	68		pla			pla
>aa72	93					.byte $93
.aa73	90 fe		bcc $aa73		bcc *
.aa75					L10053_END:
.aa75					L10054:
>aa75	0c					.byte L10054_END-L10054-1
.aa76	cd 63 73	cmp $7363		cmp  $7363
.aa79	48		pha			pha
.aa7a	8a		txa			txa
.aa7b	ed 83 73	sbc $7383		sbc  $7383
.aa7e	68		pla			pla
>aa7f	93					.byte $93
.aa80	90 fe		bcc $aa80		bcc *
.aa82					L10054_END:
.aa82					L10055:
>aa82	0a					.byte L10055_END-L10055-1
.aa83	c5 63		cmp $63			cmp  $63
.aa85	48		pha			pha
.aa86	8a		txa			txa
.aa87	e5 83		sbc $83			sbc  $83
.aa89	68		pla			pla
>aa8a	93					.byte $93
.aa8b	90 fe		bcc $aa8b		bcc *
.aa8d					L10055_END:
.aa8d					L10056:
>aa8d	09					.byte L10056_END-L10056-1
.aa8e	c9 63		cmp #$63		cmp  #$63
.aa90	d0 02		bne $aa94		bne  _skip1
.aa92	e0 73		cpx #$73		cpx  #$73
.aa94					_skip1:
>aa94	93					.byte $93
.aa95	d0 fe		bne $aa95		bne *
.aa97					L10056_END:
.aa97					L10057:
>aa97	0b					.byte L10057_END-L10057-1
.aa98	cd 63 73	cmp $7363		cmp  $7363
.aa9b	d0 03		bne $aaa0		bne  _skip1
.aa9d	ec 83 73	cpx $7383		cpx  $7383
.aaa0					_skip1:
>aaa0	93					.byte $93
.aaa1	d0 fe		bne $aaa1		bne *
.aaa3					L10057_END:
.aaa3					L10058:
>aaa3	09					.byte L10058_END-L10058-1
.aaa4	c5 63		cmp $63			cmp  $63
.aaa6	d0 02		bne $aaaa		bne  _skip1
.aaa8	e4 83		cpx $83			cpx  $83
.aaaa					_skip1:
>aaaa	93					.byte $93
.aaab	d0 fe		bne $aaab		bne *
.aaad					L10058_END:
.aaad					L10059:
>aaad	09					.byte L10059_END-L10059-1
.aaae	c9 00		cmp #$00		cmp #0
.aab0	d0 02		bne $aab4		bne *+4
.aab2	e0 00		cpx #$00		cpx #0
>aab4	93					.byte $93
.aab5	d0 fe		bne $aab5		bne *
.aab7					L10059_END:
.aab7					L10060:
>aab7	08					.byte L10060_END-L10060-1
.aab8	09 63		ora #$63		ora  #$63
.aaba	48		pha			pha
.aabb	8a		txa			txa
.aabc	09 73		ora #$73		ora  #$73
.aabe	aa		tax			tax
.aabf	68		pla			pla
.aac0					L10060_END:
.aac0					L10061:
>aac0	02					.byte L10061_END-L10061-1
.aac1	05 63		ora $63			ora  $63
.aac3					L10061_END:
.aac3					L10062:
>aac3	0a					.byte L10062_END-L10062-1
.aac4	11 63		ora ($63),y		ora  ($7363& $ff),y
.aac6	48		pha			pha
.aac7	8a		txa			txa
.aac8	c8		iny			iny
.aac9	11 63		ora ($63),y		ora  ($7363& $ff),y
.aacb	88		dey			dey
.aacc	aa		tax			tax
.aacd	68		pla			pla
.aace					L10062_END:
.aace					L10063:
>aace	0a					.byte L10063_END-L10063-1
.aacf	0d 63 73	ora $7363		ora  $7363
.aad2	48		pha			pha
.aad3	8a		txa			txa
.aad4	0d 83 73	ora $7383		ora  $7383
.aad7	aa		tax			tax
.aad8	68		pla			pla
.aad9					L10063_END:
.aad9					L10064:
>aad9	0a					.byte L10064_END-L10064-1
.aada	11 63		ora ($63),y		ora  ($63& $ff),y
.aadc	48		pha			pha
.aadd	8a		txa			txa
.aade	c8		iny			iny
.aadf	11 63		ora ($63),y		ora  ($63& $ff),y
.aae1	88		dey			dey
.aae2	aa		tax			tax
.aae3	68		pla			pla
.aae4					L10064_END:
.aae4					L10065:
>aae4	08					.byte L10065_END-L10065-1
.aae5	05 63		ora $63			ora  $63
.aae7	48		pha			pha
.aae8	8a		txa			txa
.aae9	05 83		ora $83			ora  $83
.aaeb	aa		tax			tax
.aaec	68		pla			pla
.aaed					L10065_END:
.aaed					L10066:
>aaed	03					.byte L10066_END-L10066-1
.aaee	0d 63 73	ora $7363		ora  $7363
.aaf1					L10066_END:
.aaf1					L10067:
>aaf1	02					.byte L10067_END-L10067-1
.aaf2	09 63		ora #$63		ora  #$63
.aaf4					L10067_END:
.aaf4					L10068:
>aaf4	03					.byte L10068_END-L10068-1
.aaf5	48		pha			pha
.aaf6	8a		txa			txa
.aaf7	fa		plx			plx
.aaf8					L10068_END:
.aaf8					L10069:
>aaf8	02					.byte L10069_END-L10069-1
>aaf9	a3 05					.byte $a3,$05
.aafb					L10069_END:
.aafb					L10070:
>aafb	09					.byte L10070_END-L10070-1
.aafc	38		sec			sec
.aafd	e9 63		sbc #$63		sbc  #$63
.aaff	48		pha			pha
.ab00	8a		txa			txa
.ab01	e9 73		sbc #$73		sbc  #$73
.ab03	aa		tax			tax
.ab04	68		pla			pla
.ab05					L10070_END:
.ab05					L10071:
>ab05	06					.byte L10071_END-L10071-1
.ab06	38		sec			sec
.ab07	e5 63		sbc $63			sbc  $63
.ab09	b0 01		bcs $ab0c		bcs  *+3
.ab0b	ca		dex			dex
.ab0c					L10071_END:
.ab0c					L10072:
>ab0c	0b					.byte L10072_END-L10072-1
.ab0d	38		sec			sec
.ab0e	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.ab10	48		pha			pha
.ab11	8a		txa			txa
.ab12	c8		iny			iny
.ab13	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.ab15	88		dey			dey
.ab16	aa		tax			tax
.ab17	68		pla			pla
.ab18					L10072_END:
.ab18					L10073:
>ab18	0b					.byte L10073_END-L10073-1
.ab19	38		sec			sec
.ab1a	ed 63 73	sbc $7363		sbc  $7363
.ab1d	48		pha			pha
.ab1e	8a		txa			txa
.ab1f	ed 83 73	sbc $7383		sbc  $7383
.ab22	aa		tax			tax
.ab23	68		pla			pla
.ab24					L10073_END:
.ab24					L10074:
>ab24	0b					.byte L10074_END-L10074-1
.ab25	38		sec			sec
.ab26	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.ab28	48		pha			pha
.ab29	8a		txa			txa
.ab2a	c8		iny			iny
.ab2b	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.ab2d	88		dey			dey
.ab2e	aa		tax			tax
.ab2f	68		pla			pla
.ab30					L10074_END:
.ab30					L10075:
>ab30	09					.byte L10075_END-L10075-1
.ab31	38		sec			sec
.ab32	e5 63		sbc $63			sbc  $63
.ab34	48		pha			pha
.ab35	8a		txa			txa
.ab36	e5 83		sbc $83			sbc  $83
.ab38	aa		tax			tax
.ab39	68		pla			pla
.ab3a					L10075_END:
.ab3a					L10076:
>ab3a	07					.byte L10076_END-L10076-1
.ab3b	38		sec			sec
.ab3c	ed 63 73	sbc $7363		sbc  $7363
.ab3f	b0 01		bcs $ab42		bcs  *+3
.ab41	ca		dex			dex
.ab42					L10076_END:
.ab42					L10077:
>ab42	06					.byte L10077_END-L10077-1
.ab43	38		sec			sec
.ab44	e9 63		sbc #$63		sbc  #$63
.ab46	b0 01		bcs $ab49		bcs  *+3
.ab48	ca		dex			dex
.ab49					L10077_END:
.ab49					L10078:
>ab49	05					.byte L10078_END-L10078-1
.ab4a	e0 00		cpx #$00		cpx #0
>ab4c	93					.byte $93
.ab4d	30 fe		bmi $ab4d		bmi *
.ab4f					L10078_END:
.ab4f					L10079:
>ab4f	02					.byte L10079_END-L10079-1
.ab50	48		pha			pha
.ab51	da		phx			phx
.ab52					L10079_END:
.ab52					L10080:
>ab52	09					.byte L10080_END-L10080-1
.ab53	18		clc			clc
.ab54	69 63		adc #$63		adc  #$63
.ab56	48		pha			pha
.ab57	8a		txa			txa
.ab58	69 73		adc #$73		adc  #$73
.ab5a	aa		tax			tax
.ab5b	68		pla			pla
.ab5c					L10080_END:
.ab5c					L10081:
>ab5c	06					.byte L10081_END-L10081-1
.ab5d	18		clc			clc
.ab5e	65 63		adc $63			adc  $63
.ab60	90 01		bcc $ab63		bcc  *+3
.ab62	e8		inx			inx
.ab63					L10081_END:
.ab63					L10082:
>ab63	0b					.byte L10082_END-L10082-1
.ab64	18		clc			clc
.ab65	71 63		adc ($63),y		adc  ($7363& $ff),y
.ab67	48		pha			pha
.ab68	8a		txa			txa
.ab69	c8		iny			iny
.ab6a	71 63		adc ($63),y		adc  ($7363& $ff),y
.ab6c	88		dey			dey
.ab6d	aa		tax			tax
.ab6e	68		pla			pla
.ab6f					L10082_END:
.ab6f					L10083:
>ab6f	0b					.byte L10083_END-L10083-1
.ab70	18		clc			clc
.ab71	6d 63 73	adc $7363		adc  $7363
.ab74	48		pha			pha
.ab75	8a		txa			txa
.ab76	6d 83 73	adc $7383		adc  $7383
.ab79	aa		tax			tax
.ab7a	68		pla			pla
.ab7b					L10083_END:
.ab7b					L10084:
>ab7b	0b					.byte L10084_END-L10084-1
.ab7c	18		clc			clc
.ab7d	71 63		adc ($63),y		adc  ($63& $ff),y
.ab7f	48		pha			pha
.ab80	8a		txa			txa
.ab81	c8		iny			iny
.ab82	71 63		adc ($63),y		adc  ($63& $ff),y
.ab84	88		dey			dey
.ab85	aa		tax			tax
.ab86	68		pla			pla
.ab87					L10084_END:
.ab87					L10085:
>ab87	09					.byte L10085_END-L10085-1
.ab88	18		clc			clc
.ab89	65 63		adc $63			adc  $63
.ab8b	48		pha			pha
.ab8c	8a		txa			txa
.ab8d	65 83		adc $83			adc  $83
.ab8f	aa		tax			tax
.ab90	68		pla			pla
.ab91					L10085_END:
.ab91					L10086:
>ab91	07					.byte L10086_END-L10086-1
.ab92	18		clc			clc
.ab93	6d 63 73	adc $7363		adc  $7363
.ab96	90 01		bcc $ab99		bcc  *+3
.ab98	e8		inx			inx
.ab99					L10086_END:
.ab99					L10087:
>ab99	06					.byte L10087_END-L10087-1
.ab9a	18		clc			clc
.ab9b	69 63		adc #$63		adc  #$63
.ab9d	90 01		bcc $aba0		bcc  *+3
.ab9f	e8		inx			inx
.aba0					L10087_END:
.aba0					L10088:
>aba0	05					.byte L10088_END-L10088-1
.aba1	e0 00		cpx #$00		cpx #0
>aba3	93					.byte $93
.aba4	10 fe		bpl $aba4		bpl *
.aba6					L10088_END:
.aba6					L10089:
>aba6	08					.byte L10089_END-L10089-1
.aba7	49 63		eor #$63		eor  #$63
.aba9	48		pha			pha
.abaa	8a		txa			txa
.abab	49 73		eor #$73		eor  #$73
.abad	aa		tax			tax
.abae	68		pla			pla
.abaf					L10089_END:
.abaf					L10090:
>abaf	02					.byte L10090_END-L10090-1
.abb0	45 63		eor $63			eor  $63
.abb2					L10090_END:
.abb2					L10091:
>abb2	0a					.byte L10091_END-L10091-1
.abb3	51 63		eor ($63),y		eor  ($7363 & $ff),y
.abb5	48		pha			pha
.abb6	8a		txa			txa
.abb7	c8		iny			iny
.abb8	51 63		eor ($63),y		eor  ($7363 & $ff),y
.abba	88		dey			dey
.abbb	aa		tax			tax
.abbc	68		pla			pla
.abbd					L10091_END:
.abbd					L10092:
>abbd	0a					.byte L10092_END-L10092-1
.abbe	4d 63 73	eor $7363		eor  $7363
.abc1	48		pha			pha
.abc2	8a		txa			txa
.abc3	4d 83 73	eor $7383		eor  $7383
.abc6	aa		tax			tax
.abc7	68		pla			pla
.abc8					L10092_END:
.abc8					L10093:
>abc8	0a					.byte L10093_END-L10093-1
.abc9	51 63		eor ($63),y		eor  ($63 & $ff),y
.abcb	48		pha			pha
.abcc	8a		txa			txa
.abcd	c8		iny			iny
.abce	51 63		eor ($63),y		eor  ($63 & $ff),y
.abd0	88		dey			dey
.abd1	aa		tax			tax
.abd2	68		pla			pla
.abd3					L10093_END:
.abd3					L10094:
>abd3	08					.byte L10094_END-L10094-1
.abd4	45 63		eor $63			eor  $63
.abd6	48		pha			pha
.abd7	8a		txa			txa
.abd8	45 83		eor $83			eor  $83
.abda	aa		tax			tax
.abdb	68		pla			pla
.abdc					L10094_END:
.abdc					L10095:
>abdc	03					.byte L10095_END-L10095-1
.abdd	4d 63 73	eor $7363		eor  $7363
.abe0					L10095_END:
.abe0					L10096:
>abe0	02					.byte L10096_END-L10096-1
.abe1	49 63		eor #$63		eor  #$63
.abe3					L10096_END:
.abe3					L10097:
>abe3	08					.byte L10097_END-L10097-1
.abe4	29 63		and #$63		and  #$63
.abe6	48		pha			pha
.abe7	8a		txa			txa
.abe8	29 73		and #$73		and  #$73
.abea	aa		tax			tax
.abeb	68		pla			pla
.abec					L10097_END:
.abec					L10098:
>abec	04					.byte L10098_END-L10098-1
.abed	25 63		and $63			and  $63
.abef	a2 00		ldx #$00		ldx  #0
.abf1					L10098_END:
.abf1					L10099:
>abf1	0a					.byte L10099_END-L10099-1
.abf2	31 63		and ($63),y		and  ($7363& $ff),y
.abf4	48		pha			pha
.abf5	8a		txa			txa
.abf6	c8		iny			iny
.abf7	31 63		and ($63),y		and  ($7363& $ff),y
.abf9	88		dey			dey
.abfa	aa		tax			tax
.abfb	68		pla			pla
.abfc					L10099_END:
.abfc					L10100:
>abfc	0a					.byte L10100_END-L10100-1
.abfd	2d 63 73	and $7363		and  $7363
.ac00	48		pha			pha
.ac01	8a		txa			txa
.ac02	2d 83 73	and $7383		and  $7383
.ac05	aa		tax			tax
.ac06	68		pla			pla
.ac07					L10100_END:
.ac07					L10101:
>ac07	0a					.byte L10101_END-L10101-1
.ac08	31 63		and ($63),y		and  ($63& $ff),y
.ac0a	48		pha			pha
.ac0b	8a		txa			txa
.ac0c	c8		iny			iny
.ac0d	31 63		and ($63),y		and  ($63& $ff),y
.ac0f	88		dey			dey
.ac10	aa		tax			tax
.ac11	68		pla			pla
.ac12					L10101_END:
.ac12					L10102:
>ac12	08					.byte L10102_END-L10102-1
.ac13	25 63		and $63			and  $63
.ac15	48		pha			pha
.ac16	8a		txa			txa
.ac17	25 83		and $83			and  $83
.ac19	aa		tax			tax
.ac1a	68		pla			pla
.ac1b					L10102_END:
.ac1b					L10103:
>ac1b	05					.byte L10103_END-L10103-1
.ac1c	2d 63 73	and $7363		and  $7363
.ac1f	a2 00		ldx #$00		ldx  #0
.ac21					L10103_END:
.ac21					L10104:
>ac21	04					.byte L10104_END-L10104-1
.ac22	29 63		and #$63		and  #$63
.ac24	a2 00		ldx #$00		ldx  #0
.ac26					L10104_END:
.ac26					L10105:
>ac26	02					.byte L10105_END-L10105-1
>ac27	a3 06					.byte $a3,$06
.ac29					L10105_END:
.ac29					L10106:
>ac29	02					.byte L10106_END-L10106-1
>ac2a	a3 07					.byte $a3,$07
.ac2c					L10106_END:
.ac2c					L10107:
>ac2c	02					.byte L10107_END-L10107-1
>ac2d	a3 08					.byte $a3,$08
.ac2f					L10107_END:
.ac2f					L10108:
>ac2f	02					.byte L10108_END-L10108-1
>ac30	a3 09					.byte $a3,$09
.ac32					L10108_END:
.ac32					L10109:
>ac32	02					.byte L10109_END-L10109-1
>ac33	a3 0a					.byte $a3,$0a
.ac35					L10109_END:
.ac35					L10110:
>ac35	02					.byte L10110_END-L10110-1
>ac36	a3 0b					.byte $a3,$0b
.ac38					L10110_END:
.ac38					L10111:
>ac38	03					.byte L10111_END-L10111-1
>ac39	93					.byte $93
.ac3a	b0 fe		bcs $ac3a		bcs  *
.ac3c					L10111_END:
.ac3c					L10112:
>ac3c	03					.byte L10112_END-L10112-1
>ac3d	93					.byte $93
.ac3e	90 fe		bcc $ac3e		bcc  *
.ac40					L10112_END:
.ac40					L10113:
>ac40	02					.byte L10113_END-L10113-1
>ac41	a3 0c					.byte $a3,$0c
.ac43					L10113_END:
.ac43					L10114:
>ac43	01					.byte L10114_END-L10114-1
>ac44	ff					.byte  $ff
.ac45					L10114_END:
.ac45					L10115:
>ac45	05					.byte L10115_END-L10115-1
.ac46	c5 63		cmp $63			cmp  $63
>ac48	93					.byte $93
.ac49	b0 fe		bcs $ac49		bcs *
.ac4b					L10115_END:
.ac4b					L10116:
>ac4b	06					.byte L10116_END-L10116-1
.ac4c	cd 63 73	cmp $7363		cmp  $7363
>ac4f	93					.byte $93
.ac50	b0 fe		bcs $ac50		bcs *
.ac52					L10116_END:
.ac52					L10117:
>ac52	05					.byte L10117_END-L10117-1
.ac53	c9 63		cmp #$63		cmp  #$63
>ac55	93					.byte $93
.ac56	b0 fe		bcs $ac56		bcs *
.ac58					L10117_END:
.ac58					L10118:
>ac58	05					.byte L10118_END-L10118-1
.ac59	c5 63		cmp $63			cmp  $63
>ac5b	93					.byte $93
.ac5c	f0 fe		beq $ac5c		beq *
.ac5e					L10118_END:
.ac5e					L10119:
>ac5e	02					.byte L10119_END-L10119-1
.ac5f	a5 63		lda $63			lda  $63
.ac61					L10119_END:
.ac61					L10120:
>ac61	02					.byte L10120_END-L10120-1
.ac62	b1 63		lda ($63),y		lda  ($7363& $ff),y
.ac64					L10120_END:
.ac64					L10121:
>ac64	02					.byte L10121_END-L10121-1
.ac65	b1 63		lda ($63),y		lda  ($63& $ff),y
.ac67					L10121_END:
.ac67					L10122:
>ac67	06					.byte L10122_END-L10122-1
.ac68	cd 63 73	cmp $7363		cmp  $7363
>ac6b	93					.byte $93
.ac6c	f0 fe		beq $ac6c		beq *
.ac6e					L10122_END:
.ac6e					L10123:
>ac6e	03					.byte L10123_END-L10123-1
.ac6f	ad 63 73	lda $7363		lda  $7363
.ac72					L10123_END:
.ac72					L10124:
>ac72	05					.byte L10124_END-L10124-1
.ac73	c9 63		cmp #$63		cmp  #$63
>ac75	93					.byte $93
.ac76	f0 fe		beq $ac76		beq *
.ac78					L10124_END:
.ac78					L10125:
>ac78	02					.byte L10125_END-L10125-1
.ac79	a9 63		lda #$63		lda  #$63
.ac7b					L10125_END:
.ac7b					L10126:
>ac7b	01					.byte L10126_END-L10126-1
.ac7c	98		tya			tya
.ac7d					L10126_END:
.ac7d					L10127:
>ac7d	00					.byte L10127_END-L10127-1
.ac7e					L10127_END:
.ac7e					L10128:
>ac7e	05					.byte L10128_END-L10128-1
.ac7f	c9 00		cmp #$00		cmp #0
>ac81	93					.byte $93
.ac82	f0 fe		beq $ac82		beq *
.ac84					L10128_END:
.ac84					L10129:
>ac84	05					.byte L10129_END-L10129-1
.ac85	c5 63		cmp $63			cmp  $63
>ac87	93					.byte $93
.ac88	90 fe		bcc $ac88		bcc *
.ac8a					L10129_END:
.ac8a					L10130:
>ac8a	06					.byte L10130_END-L10130-1
.ac8b	cd 63 73	cmp $7363		cmp  $7363
>ac8e	93					.byte $93
.ac8f	90 fe		bcc $ac8f		bcc *
.ac91					L10130_END:
.ac91					L10131:
>ac91	05					.byte L10131_END-L10131-1
.ac92	c9 63		cmp #$63		cmp  #$63
>ac94	93					.byte $93
.ac95	90 fe		bcc $ac95		bcc *
.ac97					L10131_END:
.ac97					L10132:
>ac97	05					.byte L10132_END-L10132-1
.ac98	c5 63		cmp $63			cmp  $63
>ac9a	93					.byte $93
.ac9b	d0 fe		bne $ac9b		bne *
.ac9d					L10132_END:
.ac9d					L10133:
>ac9d	06					.byte L10133_END-L10133-1
.ac9e	cd 63 73	cmp $7363		cmp  $7363
>aca1	93					.byte $93
.aca2	d0 fe		bne $aca2		bne *
.aca4					L10133_END:
.aca4					L10134:
>aca4	05					.byte L10134_END-L10134-1
.aca5	c9 63		cmp #$63		cmp  #$63
>aca7	93					.byte $93
.aca8	d0 fe		bne $aca8		bne *
.acaa					L10134_END:
.acaa					L10135:
>acaa	05					.byte L10135_END-L10135-1
.acab	c9 00		cmp #$00		cmp #0
>acad	93					.byte $93
.acae	d0 fe		bne $acae		bne *
.acb0					L10135_END:
.acb0					L10136:
>acb0	02					.byte L10136_END-L10136-1
.acb1	05 63		ora $63			ora  $63
.acb3					L10136_END:
.acb3					L10137:
>acb3	02					.byte L10137_END-L10137-1
.acb4	11 63		ora ($63),y		ora  ($7363& $ff),y
.acb6					L10137_END:
.acb6					L10138:
>acb6	02					.byte L10138_END-L10138-1
.acb7	11 63		ora ($63),y		ora  ($63& $ff),y
.acb9					L10138_END:
.acb9					L10139:
>acb9	03					.byte L10139_END-L10139-1
.acba	0d 63 73	ora $7363		ora  $7363
.acbd					L10139_END:
.acbd					L10140:
>acbd	02					.byte L10140_END-L10140-1
.acbe	09 63		ora #$63		ora  #$63
.acc0					L10140_END:
.acc0					L10141:
>acc0	02					.byte L10141_END-L10141-1
>acc1	a3 0d					.byte $a3,$0d
.acc3					L10141_END:
.acc3					L10142:
>acc3	03					.byte L10142_END-L10142-1
.acc4	38		sec			sec
.acc5	e5 63		sbc $63			sbc  $63
.acc7					L10142_END:
.acc7					L10143:
>acc7	03					.byte L10143_END-L10143-1
.acc8	38		sec			sec
.acc9	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.accb					L10143_END:
.accb					L10144:
>accb	03					.byte L10144_END-L10144-1
.accc	38		sec			sec
.accd	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.accf					L10144_END:
.accf					L10145:
>accf	04					.byte L10145_END-L10145-1
.acd0	38		sec			sec
.acd1	ed 63 73	sbc $7363		sbc  $7363
.acd4					L10145_END:
.acd4					L10146:
>acd4	03					.byte L10146_END-L10146-1
.acd5	38		sec			sec
.acd6	e9 63		sbc #$63		sbc  #$63
.acd8					L10146_END:
.acd8					L10147:
>acd8	05					.byte L10147_END-L10147-1
.acd9	c9 00		cmp #$00		cmp #0
>acdb	93					.byte $93
.acdc	30 fe		bmi $acdc		bmi *
.acde					L10147_END:
.acde					L10148:
>acde	01					.byte L10148_END-L10148-1
.acdf	48		pha			pha
.ace0					L10148_END:
.ace0					L10149:
>ace0	03					.byte L10149_END-L10149-1
.ace1	18		clc			clc
.ace2	65 63		adc $63			adc  $63
.ace4					L10149_END:
.ace4					L10150:
>ace4	03					.byte L10150_END-L10150-1
.ace5	18		clc			clc
.ace6	71 63		adc ($63),y		adc  ($7363& $ff),y
.ace8					L10150_END:
.ace8					L10151:
>ace8	03					.byte L10151_END-L10151-1
.ace9	18		clc			clc
.acea	71 63		adc ($63),y		adc  ($63& $ff),y
.acec					L10151_END:
.acec					L10152:
>acec	04					.byte L10152_END-L10152-1
.aced	18		clc			clc
.acee	6d 63 73	adc $7363		adc  $7363
.acf1					L10152_END:
.acf1					L10153:
>acf1	03					.byte L10153_END-L10153-1
.acf2	18		clc			clc
.acf3	69 63		adc #$63		adc  #$63
.acf5					L10153_END:
.acf5					L10154:
>acf5	05					.byte L10154_END-L10154-1
.acf6	c9 00		cmp #$00		cmp #0
>acf8	93					.byte $93
.acf9	10 fe		bpl $acf9		bpl *
.acfb					L10154_END:
.acfb					L10155:
>acfb	02					.byte L10155_END-L10155-1
.acfc	45 63		eor $63			eor  $63
.acfe					L10155_END:
.acfe					L10156:
>acfe	02					.byte L10156_END-L10156-1
.acff	51 63		eor ($63),y		eor  ($7363 & $ff),y
.ad01					L10156_END:
.ad01					L10157:
>ad01	02					.byte L10157_END-L10157-1
.ad02	51 63		eor ($63),y		eor  ($63 & $ff),y
.ad04					L10157_END:
.ad04					L10158:
>ad04	03					.byte L10158_END-L10158-1
.ad05	4d 63 73	eor $7363		eor  $7363
.ad08					L10158_END:
.ad08					L10159:
>ad08	02					.byte L10159_END-L10159-1
.ad09	49 63		eor #$63		eor  #$63
.ad0b					L10159_END:
.ad0b					L10160:
>ad0b	02					.byte L10160_END-L10160-1
.ad0c	25 63		and $63			and  $63
.ad0e					L10160_END:
.ad0e					L10161:
>ad0e	02					.byte L10161_END-L10161-1
.ad0f	31 63		and ($63),y		and  ($7363& $ff),y
.ad11					L10161_END:
.ad11					L10162:
>ad11	02					.byte L10162_END-L10162-1
.ad12	31 63		and ($63),y		and  ($63& $ff),y
.ad14					L10162_END:
.ad14					L10163:
>ad14	03					.byte L10163_END-L10163-1
.ad15	2d 63 73	and $7363		and  $7363
.ad18					L10163_END:
.ad18					L10164:
>ad18	02					.byte L10164_END-L10164-1
.ad19	29 63		and #$63		and  #$63
.ad1b					L10164_END:
.ad1b					L10165:
>ad1b	02					.byte L10165_END-L10165-1
.ad1c	46 63		lsr $63			lsr  $63
.ad1e					L10165_END:
.ad1e					L10166:
>ad1e	06					.byte L10166_END-L10166-1
.ad1f	4e 83 73	lsr $7383		lsr  $7383
.ad22	6e 63 73	ror $7363		ror  $7363
.ad25					L10166_END:
.ad25					L10167:
>ad25	04					.byte L10167_END-L10167-1
.ad26	46 83		lsr $83			lsr  $83
.ad28	66 63		ror $63			ror  $63
.ad2a					L10167_END:
.ad2a					L10168:
>ad2a	03					.byte L10168_END-L10168-1
.ad2b	4e 63 73	lsr $7363		lsr  $7363
.ad2e					L10168_END:
.ad2e					L10169:
>ad2e	06					.byte L10169_END-L10169-1
.ad2f	48		pha			pha
.ad30	8a		txa			txa
.ad31	4a		lsr a			lsr  a
.ad32	aa		tax			tax
.ad33	68		pla			pla
.ad34	6a		ror a			ror  a
.ad35					L10169_END:
.ad35					L10170:
>ad35	01					.byte L10170_END-L10170-1
.ad36	4a		lsr a			lsr  a
.ad37					L10170_END:
.ad37					L10171:
>ad37	02					.byte L10171_END-L10171-1
.ad38	06 63		asl $63			asl  $63
.ad3a					L10171_END:
.ad3a					L10172:
>ad3a	06					.byte L10172_END-L10172-1
.ad3b	0e 63 73	asl $7363		asl  $7363
.ad3e	2e 83 73	rol $7383		rol  $7383
.ad41					L10172_END:
.ad41					L10173:
>ad41	04					.byte L10173_END-L10173-1
.ad42	06 63		asl $63			asl  $63
.ad44	26 83		rol $83			rol  $83
.ad46					L10173_END:
.ad46					L10174:
>ad46	03					.byte L10174_END-L10174-1
.ad47	0e 63 73	asl $7363		asl  $7363
.ad4a					L10174_END:
.ad4a					L10175:
>ad4a	06					.byte L10175_END-L10175-1
.ad4b	0a		asl a			asl  a
.ad4c	48		pha			pha
.ad4d	8a		txa			txa
.ad4e	2a		rol a			rol  a
.ad4f	aa		tax			tax
.ad50	68		pla			pla
.ad51					L10175_END:
.ad51					L10176:
>ad51	01					.byte L10176_END-L10176-1
.ad52	0a		asl a			asl  a
.ad53					L10176_END:
.ad53					L10177:
>ad53	0c					.byte L10177_END-L10177-1
.ad54	48		pha			pha
.ad55	8a		txa			txa
.ad56	49 ff		eor #$ff		eor  #$ff
.ad58	aa		tax			tax
.ad59	68		pla			pla
.ad5a	49 ff		eor #$ff		eor  #$ff
.ad5c	1a		inc a			inc  a
.ad5d	d0 01		bne $ad60		bne  *+3
.ad5f	e8		inx			inx
.ad60					L10177_END:
.ad60					L10178:
>ad60	03					.byte L10178_END-L10178-1
.ad61	49 ff		eor #$ff		eor  #$ff
.ad63	1a		inc a			inc  a
.ad64					L10178_END:
.ad64					L10179:
>ad64	02					.byte L10179_END-L10179-1
.ad65	c6 63		dec $63			dec  $63
.ad67					L10179_END:
.ad67					L10180:
>ad67	0d					.byte L10180_END-L10180-1
.ad68	48		pha			pha
.ad69	ad 63 73	lda $7363		lda  $7363
.ad6c	d0 03		bne $ad71		bne  _noborrow
.ad6e	ce 83 73	dec $7383		dec  $7383
.ad71					_noborrow:
.ad71	ce 63 73	dec $7363		dec  $7363
.ad74	68		pla			pla
.ad75					L10180_END:
.ad75					L10181:
>ad75	0a					.byte L10181_END-L10181-1
.ad76	48		pha			pha
.ad77	a5 63		lda $63			lda  $63
.ad79	d0 02		bne $ad7d		bne  _noborrow
.ad7b	c6 83		dec $83			dec  $83
.ad7d					_noborrow:
.ad7d	c6 63		dec $63			dec  $63
.ad7f	68		pla			pla
.ad80					L10181_END:
.ad80					L10182:
>ad80	03					.byte L10182_END-L10182-1
.ad81	ce 63 73	dec $7363		dec  $7363
.ad84					L10182_END:
.ad84					L10183:
>ad84	01					.byte L10183_END-L10183-1
.ad85	88		dey			dey
.ad86					L10183_END:
.ad86					L10184:
>ad86	06					.byte L10184_END-L10184-1
.ad87	c9 00		cmp #$00		cmp  #0
.ad89	d0 01		bne $ad8c		bne  *+3
.ad8b	ca		dex			dex
.ad8c	3a		dec a			dec  a
.ad8d					L10184_END:
.ad8d					L10185:
>ad8d	01					.byte L10185_END-L10185-1
.ad8e	3a		dec a			dec  a
.ad8f					L10185_END:
.ad8f					L10186:
>ad8f	02					.byte L10186_END-L10186-1
.ad90	e6 63		inc $63			inc  $63
.ad92					L10186_END:
.ad92					L10187:
>ad92	08					.byte L10187_END-L10187-1
.ad93	ee 63 73	inc $7363		inc  $7363
.ad96	d0 03		bne $ad9b		bne  _nocarry
.ad98	ee 83 73	inc $7383		inc  $7383
.ad9b					_nocarry:
.ad9b					L10187_END:
.ad9b					L10188:
>ad9b	06					.byte L10188_END-L10188-1
.ad9c	e6 63		inc $63			inc  $63
.ad9e	d0 02		bne $ada2		bne  _nocarry
.ada0	e6 83		inc $83			inc  $83
.ada2					_nocarry:
.ada2					L10188_END:
.ada2					L10189:
>ada2	03					.byte L10189_END-L10189-1
.ada3	ee 63 73	inc $7363		inc  $7363
.ada6					L10189_END:
.ada6					L10190:
>ada6	01					.byte L10190_END-L10190-1
.ada7	c8		iny			iny
.ada8					L10190_END:
.ada8					L10191:
>ada8	04					.byte L10191_END-L10191-1
.ada9	1a		inc a			inc  a
.adaa	d0 01		bne $adad		bne  *+3
.adac	e8		inx			inx
.adad					L10191_END:
.adad					L10192:
>adad	01					.byte L10192_END-L10192-1
.adae	1a		inc a			inc  a
.adaf					L10192_END:
.adaf					ExecutableVectorTable:
>adaf	a1 a5					.word Action_call                      ; 0
>adb1	34 a7					.word Action_wordvar                   ; 1
>adb3	8a a6					.word Action_until                     ; 2
>adb5	81 a6					.word Action_repeat                    ; 3
>adb7	a3 a7					.word Action_dictionarycrunch          ; 4
>adb9	b1 a6					.word Action_rfor                      ; 5
>adbb	5a a5					.word Action_procedure_def             ; 6
>adbd	e2 a6					.word Action_next                      ; 7
>adbf	1c a6					.word Action_if                        ; 8
>adc1	91 a5					.word Action_endproc                   ; 9
>adc3	53 a6					.word Action_endif                     ; 10
>adc5	31 a6					.word Action_else                      ; 11
>adc7	30 a7					.word Action_bytevar                   ; 12
>adc9	9e a6					.word Action_afor                      ; 13
.adcb					SystemDictionary:
>adcb	07					.byte	7
>adcc	4d					.byte	'M'
>adcd	4f a9					.word	L10000
>adcf	00					.byte	0
>add0	01					.byte	1
>add1	f7					.byte	$f7
>add2	09					.byte	9
>add3	4d					.byte	'M'
>add4	54 a9					.word	L10001
>add6	00					.byte	0
>add7	03					.byte	3
>add8	f3 bd d9				.byte	$f3,$bd,$d9
>addb	09					.byte	9
>addc	4d					.byte	'M'
>addd	57 a9					.word	L10002
>addf	00					.byte	0
>ade0	03					.byte	3
>ade1	f3 bd d2				.byte	$f3,$bd,$d2
>ade4	09					.byte	9
>ade5	4d					.byte	'M'
>ade6	5a a9					.word	L10003
>ade8	00					.byte	0
>ade9	03					.byte	3
>adea	f3 bd c1				.byte	$f3,$bd,$c1
>aded	07					.byte	7
>adee	4d					.byte	'M'
>adef	5d a9					.word	L10004
>adf1	00					.byte	0
>adf2	01					.byte	1
>adf3	f3					.byte	$f3
>adf4	07					.byte	7
>adf5	4d					.byte	'M'
>adf6	62 a9					.word	L10005
>adf8	00					.byte	0
>adf9	01					.byte	1
>adfa	f0					.byte	$f0
>adfb	0c					.byte	12
>adfc	4d					.byte	'M'
>adfd	65 a9					.word	L10006
>adff	00					.byte	0
>ae00	06					.byte	6
>ae01	ec db d9 dd bd d2			.byte	$ec,$db,$d9,$dd,$bd,$d2
>ae07	0c					.byte	12
>ae08	4d					.byte	'M'
>ae09	6f a9					.word	L10007
>ae0b	00					.byte	0
>ae0c	06					.byte	6
>ae0d	ec db d9 dd bd c1			.byte	$ec,$db,$d9,$dd,$bd,$c1
>ae13	09					.byte	9
>ae14	4d					.byte	'M'
>ae15	72 a9					.word	L10008
>ae17	00					.byte	0
>ae18	03					.byte	3
>ae19	ec bd d2				.byte	$ec,$bd,$d2
>ae1c	07					.byte	7
>ae1d	4d					.byte	'M'
>ae1e	79 a9					.word	L10009
>ae20	00					.byte	0
>ae21	01					.byte	1
>ae22	ec					.byte	$ec
>ae23	0c					.byte	12
>ae24	4d					.byte	'M'
>ae25	80 a9					.word	L10010
>ae27	00					.byte	0
>ae28	06					.byte	6
>ae29	e9 db d9 dd bd d2			.byte	$e9,$db,$d9,$dd,$bd,$d2
>ae2f	0c					.byte	12
>ae30	4d					.byte	'M'
>ae31	8a a9					.word	L10011
>ae33	00					.byte	0
>ae34	06					.byte	6
>ae35	e9 db d9 dd bd c1			.byte	$e9,$db,$d9,$dd,$bd,$c1
>ae3b	09					.byte	9
>ae3c	4d					.byte	'M'
>ae3d	8d a9					.word	L10012
>ae3f	00					.byte	0
>ae40	03					.byte	3
>ae41	e9 bd d2				.byte	$e9,$bd,$d2
>ae44	07					.byte	7
>ae45	4d					.byte	'M'
>ae46	92 a9					.word	L10013
>ae48	00					.byte	0
>ae49	01					.byte	1
>ae4a	e9					.byte	$e9
>ae4b	09					.byte	9
>ae4c	4d					.byte	'M'
>ae4d	97 a9					.word	L10014
>ae4f	00					.byte	0
>ae50	03					.byte	3
>ae51	e3 bd d9				.byte	$e3,$bd,$d9
>ae54	09					.byte	9
>ae55	4d					.byte	'M'
>ae56	9b a9					.word	L10015
>ae58	00					.byte	0
>ae59	03					.byte	3
>ae5a	e3 bd d2				.byte	$e3,$bd,$d2
>ae5d	09					.byte	9
>ae5e	4d					.byte	'M'
>ae5f	9f a9					.word	L10016
>ae61	00					.byte	0
>ae62	03					.byte	3
>ae63	e3 bd c1				.byte	$e3,$bd,$c1
>ae66	07					.byte	7
>ae67	4d					.byte	'M'
>ae68	a3 a9					.word	L10017
>ae6a	00					.byte	0
>ae6b	01					.byte	1
>ae6c	e3					.byte	$e3
>ae6d	07					.byte	7
>ae6e	4d					.byte	'M'
>ae6f	a9 a9					.word	L10018
>ae71	00					.byte	0
>ae72	01					.byte	1
>ae73	e2					.byte	$e2
>ae74	08					.byte	8
>ae75	4d					.byte	'M'
>ae76	ae a9					.word	L10019
>ae78	00					.byte	0
>ae79	02					.byte	2
>ae7a	de d2					.byte	$de,$d2
>ae7c	08					.byte	8
>ae7d	4d					.byte	'M'
>ae7e	b7 a9					.word	L10020
>ae80	00					.byte	0
>ae81	02					.byte	2
>ae82	de c1					.byte	$de,$c1
>ae84	09					.byte	9
>ae85	4d					.byte	'M'
>ae86	ba a9					.word	L10021
>ae88	00					.byte	0
>ae89	03					.byte	3
>ae8a	d9 bd f3				.byte	$d9,$bd,$f3
>ae8d	09					.byte	9
>ae8e	4d					.byte	'M'
>ae8f	bd a9					.word	L10022
>ae91	00					.byte	0
>ae92	03					.byte	3
>ae93	d9 bd e3				.byte	$d9,$bd,$e3
>ae96	09					.byte	9
>ae97	4d					.byte	'M'
>ae98	c1 a9					.word	L10023
>ae9a	00					.byte	0
>ae9b	03					.byte	3
>ae9c	d9 bd e2				.byte	$d9,$bd,$e2
>ae9f	09					.byte	9
>aea0	4d					.byte	'M'
>aea1	c4 a9					.word	L10024
>aea3	00					.byte	0
>aea4	03					.byte	3
>aea5	d9 bd d2				.byte	$d9,$bd,$d2
>aea8	09					.byte	9
>aea9	4d					.byte	'M'
>aeaa	c6 a9					.word	L10025
>aeac	00					.byte	0
>aead	03					.byte	3
>aeae	d9 bd c1				.byte	$d9,$bd,$c1
>aeb1	0a					.byte	10
>aeb2	4d					.byte	'M'
>aeb3	c8 a9					.word	L10026
>aeb5	00					.byte	0
>aeb6	04					.byte	4
>aeb7	d9 ad be d3				.byte	$d9,$ad,$be,$d3
>aebb	0a					.byte	10
>aebc	4d					.byte	'M'
>aebd	ca a9					.word	L10027
>aebf	00					.byte	0
>aec0	04					.byte	4
>aec1	57 4f 52 c4				.byte	$57,$4f,$52,$c4
>aec5	0b					.byte	11
>aec6	4d					.byte	'M'
>aec7	cd a9					.word	L10028
>aec9	00					.byte	0
>aeca	05					.byte	5
>aecb	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
>aed0	0a					.byte	10
>aed1	4d					.byte	'M'
>aed2	d0 a9					.word	L10029
>aed4	00					.byte	0
>aed5	04					.byte	4
>aed6	d3 ad be d9				.byte	$d3,$ad,$be,$d9
>aeda	0c					.byte	12
>aedb	4d					.byte	'M'
>aedc	d2 a9					.word	L10030
>aede	00					.byte	0
>aedf	06					.byte	6
>aee0	d3 ad be 52 41 d9			.byte	$d3,$ad,$be,$52,$41,$d9
>aee6	0a					.byte	10
>aee7	4d					.byte	'M'
>aee8	d6 a9					.word	L10031
>aeea	00					.byte	0
>aeeb	04					.byte	4
>aeec	d3 ad be d2				.byte	$d3,$ad,$be,$d2
>aef0	0a					.byte	10
>aef1	4d					.byte	'M'
>aef2	d9 a9					.word	L10032
>aef4	00					.byte	0
>aef5	04					.byte	4
>aef6	d3 ad be c1				.byte	$d3,$ad,$be,$c1
>aefa	0c					.byte	12
>aefb	4d					.byte	'M'
>aefc	db a9					.word	L10033
>aefe	00					.byte	0
>aeff	06					.byte	6
>af00	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
>af06	13					.byte	19
>af07	4d					.byte	'M'
>af08	de a9					.word	L10034
>af0a	00					.byte	0
>af0b	0d					.byte	13
>af0c	52 45 4d 4f 56 45 2e 4c			.byte	$52,$45,$4d,$4f,$56,$45,$2e,$4c,$4f,$43,$41,$4c,$d3
>af14	4f 43 41 4c d3
>af19	0c					.byte	12
>af1a	4d					.byte	'M'
>af1b	e1 a9					.word	L10035
>af1d	00					.byte	0
>af1e	06					.byte	6
>af1f	52 41 d9 ad be d3			.byte	$52,$41,$d9,$ad,$be,$d3
>af25	0b					.byte	11
>af26	4d					.byte	'M'
>af27	e5 a9					.word	L10036
>af29	00					.byte	0
>af2a	05					.byte	5
>af2b	d2 be bd f7 bf				.byte	$d2,$be,$bd,$f7,$bf
>af30	0b					.byte	11
>af31	4d					.byte	'M'
>af32	f0 a9					.word	L10037
>af34	00					.byte	0
>af35	05					.byte	5
>af36	d2 be bd ec bf				.byte	$d2,$be,$bd,$ec,$bf
>af3b	0b					.byte	11
>af3c	4d					.byte	'M'
>af3d	fd a9					.word	L10038
>af3f	00					.byte	0
>af40	05					.byte	5
>af41	d2 be bd e9 bf				.byte	$d2,$be,$bd,$e9,$bf
>af46	0a					.byte	10
>af47	4d					.byte	'M'
>af48	08 aa					.word	L10039
>af4a	00					.byte	0
>af4b	04					.byte	4
>af4c	d2 bd f7 bf				.byte	$d2,$bd,$f7,$bf
>af50	09					.byte	9
>af51	4d					.byte	'M'
>af52	12 aa					.word	L10040
>af54	00					.byte	0
>af55	03					.byte	3
>af56	d2 bd f7				.byte	$d2,$bd,$f7
>af59	09					.byte	9
>af5a	4d					.byte	'M'
>af5b	17 aa					.word	L10041
>af5d	00					.byte	0
>af5e	03					.byte	3
>af5f	d2 bd f3				.byte	$d2,$bd,$f3
>af62	0c					.byte	12
>af63	4d					.byte	'M'
>af64	1c aa					.word	L10042
>af66	00					.byte	0
>af67	06					.byte	6
>af68	d2 bd ec db d9 dd			.byte	$d2,$bd,$ec,$db,$d9,$dd
>af6e	0a					.byte	10
>af6f	4d					.byte	'M'
>af70	24 aa					.word	L10043
>af72	00					.byte	0
>af73	04					.byte	4
>af74	d2 bd ec bf				.byte	$d2,$bd,$ec,$bf
>af78	09					.byte	9
>af79	4d					.byte	'M'
>af7a	30 aa					.word	L10044
>af7c	00					.byte	0
>af7d	03					.byte	3
>af7e	d2 bd ec				.byte	$d2,$bd,$ec
>af81	0c					.byte	12
>af82	4d					.byte	'M'
>af83	37 aa					.word	L10045
>af85	00					.byte	0
>af86	06					.byte	6
>af87	d2 bd e9 db d9 dd			.byte	$d2,$bd,$e9,$db,$d9,$dd
>af8d	0a					.byte	10
>af8e	4d					.byte	'M'
>af8f	3f aa					.word	L10046
>af91	00					.byte	0
>af92	04					.byte	4
>af93	d2 bd e9 bf				.byte	$d2,$bd,$e9,$bf
>af97	09					.byte	9
>af98	4d					.byte	'M'
>af99	49 aa					.word	L10047
>af9b	00					.byte	0
>af9c	03					.byte	3
>af9d	d2 bd e9				.byte	$d2,$bd,$e9
>afa0	09					.byte	9
>afa1	4d					.byte	'M'
>afa2	4e aa					.word	L10048
>afa4	00					.byte	0
>afa5	03					.byte	3
>afa6	d2 bd e3				.byte	$d2,$bd,$e3
>afa9	09					.byte	9
>afaa	4d					.byte	'M'
>afab	54 aa					.word	L10049
>afad	00					.byte	0
>afae	03					.byte	3
>afaf	d2 bd e2				.byte	$d2,$bd,$e2
>afb2	09					.byte	9
>afb3	4d					.byte	'M'
>afb4	59 aa					.word	L10050
>afb6	00					.byte	0
>afb7	03					.byte	3
>afb8	d2 bd d9				.byte	$d2,$bd,$d9
>afbb	09					.byte	9
>afbc	4d					.byte	'M'
>afbd	5d aa					.word	L10051
>afbf	00					.byte	0
>afc0	03					.byte	3
>afc1	d2 bd c1				.byte	$d2,$bd,$c1
>afc4	09					.byte	9
>afc5	4d					.byte	'M'
>afc6	60 aa					.word	L10052
>afc8	00					.byte	0
>afc9	03					.byte	3
>afca	d2 bd bf				.byte	$d2,$bd,$bf
>afcd	0a					.byte	10
>afce	4d					.byte	'M'
>afcf	6a aa					.word	L10053
>afd1	00					.byte	0
>afd2	04					.byte	4
>afd3	d2 bc f7 bf				.byte	$d2,$bc,$f7,$bf
>afd7	0a					.byte	10
>afd8	4d					.byte	'M'
>afd9	75 aa					.word	L10054
>afdb	00					.byte	0
>afdc	04					.byte	4
>afdd	d2 bc ec bf				.byte	$d2,$bc,$ec,$bf
>afe1	0a					.byte	10
>afe2	4d					.byte	'M'
>afe3	82 aa					.word	L10055
>afe5	00					.byte	0
>afe6	04					.byte	4
>afe7	d2 bc e9 bf				.byte	$d2,$bc,$e9,$bf
>afeb	0b					.byte	11
>afec	4d					.byte	'M'
>afed	8d aa					.word	L10056
>afef	00					.byte	0
>aff0	05					.byte	5
>aff1	d2 bc be f7 bf				.byte	$d2,$bc,$be,$f7,$bf
>aff6	0b					.byte	11
>aff7	4d					.byte	'M'
>aff8	97 aa					.word	L10057
>affa	00					.byte	0
>affb	05					.byte	5
>affc	d2 bc be ec bf				.byte	$d2,$bc,$be,$ec,$bf
>b001	0b					.byte	11
>b002	4d					.byte	'M'
>b003	a3 aa					.word	L10058
>b005	00					.byte	0
>b006	05					.byte	5
>b007	d2 bc be e9 bf				.byte	$d2,$bc,$be,$e9,$bf
>b00c	0a					.byte	10
>b00d	4d					.byte	'M'
>b00e	ad aa					.word	L10059
>b010	00					.byte	0
>b011	04					.byte	4
>b012	d2 bc be bf				.byte	$d2,$bc,$be,$bf
>b016	09					.byte	9
>b017	4d					.byte	'M'
>b018	b7 aa					.word	L10060
>b01a	00					.byte	0
>b01b	03					.byte	3
>b01c	d2 ba f7				.byte	$d2,$ba,$f7
>b01f	09					.byte	9
>b020	4d					.byte	'M'
>b021	c0 aa					.word	L10061
>b023	00					.byte	0
>b024	03					.byte	3
>b025	d2 ba f3				.byte	$d2,$ba,$f3
>b028	0c					.byte	12
>b029	4d					.byte	'M'
>b02a	c3 aa					.word	L10062
>b02c	00					.byte	0
>b02d	06					.byte	6
>b02e	d2 ba ec db d9 dd			.byte	$d2,$ba,$ec,$db,$d9,$dd
>b034	09					.byte	9
>b035	4d					.byte	'M'
>b036	ce aa					.word	L10063
>b038	00					.byte	0
>b039	03					.byte	3
>b03a	d2 ba ec				.byte	$d2,$ba,$ec
>b03d	0c					.byte	12
>b03e	4d					.byte	'M'
>b03f	d9 aa					.word	L10064
>b041	00					.byte	0
>b042	06					.byte	6
>b043	d2 ba e9 db d9 dd			.byte	$d2,$ba,$e9,$db,$d9,$dd
>b049	09					.byte	9
>b04a	4d					.byte	'M'
>b04b	e4 aa					.word	L10065
>b04d	00					.byte	0
>b04e	03					.byte	3
>b04f	d2 ba e9				.byte	$d2,$ba,$e9
>b052	09					.byte	9
>b053	4d					.byte	'M'
>b054	ed aa					.word	L10066
>b056	00					.byte	0
>b057	03					.byte	3
>b058	d2 ba e3				.byte	$d2,$ba,$e3
>b05b	09					.byte	9
>b05c	4d					.byte	'M'
>b05d	f1 aa					.word	L10067
>b05f	00					.byte	0
>b060	03					.byte	3
>b061	d2 ba e2				.byte	$d2,$ba,$e2
>b064	0c					.byte	12
>b065	4d					.byte	'M'
>b066	f4 aa					.word	L10068
>b068	00					.byte	0
>b069	06					.byte	6
>b06a	52 2e 53 57 41 d0			.byte	$52,$2e,$53,$57,$41,$d0
>b070	0b					.byte	11
>b071	4d					.byte	'M'
>b072	f8 aa					.word	L10069
>b074	00					.byte	0
>b075	05					.byte	5
>b076	52 2e 46 4f d2				.byte	$52,$2e,$46,$4f,$d2
>b07b	09					.byte	9
>b07c	4d					.byte	'M'
>b07d	fb aa					.word	L10070
>b07f	00					.byte	0
>b080	03					.byte	3
>b081	d2 ad f7				.byte	$d2,$ad,$f7
>b084	09					.byte	9
>b085	4d					.byte	'M'
>b086	05 ab					.word	L10071
>b088	00					.byte	0
>b089	03					.byte	3
>b08a	d2 ad f3				.byte	$d2,$ad,$f3
>b08d	0c					.byte	12
>b08e	4d					.byte	'M'
>b08f	0c ab					.word	L10072
>b091	00					.byte	0
>b092	06					.byte	6
>b093	d2 ad ec db d9 dd			.byte	$d2,$ad,$ec,$db,$d9,$dd
>b099	09					.byte	9
>b09a	4d					.byte	'M'
>b09b	18 ab					.word	L10073
>b09d	00					.byte	0
>b09e	03					.byte	3
>b09f	d2 ad ec				.byte	$d2,$ad,$ec
>b0a2	0c					.byte	12
>b0a3	4d					.byte	'M'
>b0a4	24 ab					.word	L10074
>b0a6	00					.byte	0
>b0a7	06					.byte	6
>b0a8	d2 ad e9 db d9 dd			.byte	$d2,$ad,$e9,$db,$d9,$dd
>b0ae	09					.byte	9
>b0af	4d					.byte	'M'
>b0b0	30 ab					.word	L10075
>b0b2	00					.byte	0
>b0b3	03					.byte	3
>b0b4	d2 ad e9				.byte	$d2,$ad,$e9
>b0b7	09					.byte	9
>b0b8	4d					.byte	'M'
>b0b9	3a ab					.word	L10076
>b0bb	00					.byte	0
>b0bc	03					.byte	3
>b0bd	d2 ad e3				.byte	$d2,$ad,$e3
>b0c0	09					.byte	9
>b0c1	4d					.byte	'M'
>b0c2	42 ab					.word	L10077
>b0c4	00					.byte	0
>b0c5	03					.byte	3
>b0c6	d2 ad e2				.byte	$d2,$ad,$e2
>b0c9	09					.byte	9
>b0ca	4d					.byte	'M'
>b0cb	49 ab					.word	L10078
>b0cd	00					.byte	0
>b0ce	03					.byte	3
>b0cf	d2 ad bf				.byte	$d2,$ad,$bf
>b0d2	0a					.byte	10
>b0d3	4d					.byte	'M'
>b0d4	4f ab					.word	L10079
>b0d6	00					.byte	0
>b0d7	04					.byte	4
>b0d8	d2 ad be d3				.byte	$d2,$ad,$be,$d3
>b0dc	09					.byte	9
>b0dd	4d					.byte	'M'
>b0de	52 ab					.word	L10080
>b0e0	00					.byte	0
>b0e1	03					.byte	3
>b0e2	d2 ab f7				.byte	$d2,$ab,$f7
>b0e5	09					.byte	9
>b0e6	4d					.byte	'M'
>b0e7	5c ab					.word	L10081
>b0e9	00					.byte	0
>b0ea	03					.byte	3
>b0eb	d2 ab f3				.byte	$d2,$ab,$f3
>b0ee	0c					.byte	12
>b0ef	4d					.byte	'M'
>b0f0	63 ab					.word	L10082
>b0f2	00					.byte	0
>b0f3	06					.byte	6
>b0f4	d2 ab ec db d9 dd			.byte	$d2,$ab,$ec,$db,$d9,$dd
>b0fa	09					.byte	9
>b0fb	4d					.byte	'M'
>b0fc	6f ab					.word	L10083
>b0fe	00					.byte	0
>b0ff	03					.byte	3
>b100	d2 ab ec				.byte	$d2,$ab,$ec
>b103	0c					.byte	12
>b104	4d					.byte	'M'
>b105	7b ab					.word	L10084
>b107	00					.byte	0
>b108	06					.byte	6
>b109	d2 ab e9 db d9 dd			.byte	$d2,$ab,$e9,$db,$d9,$dd
>b10f	09					.byte	9
>b110	4d					.byte	'M'
>b111	87 ab					.word	L10085
>b113	00					.byte	0
>b114	03					.byte	3
>b115	d2 ab e9				.byte	$d2,$ab,$e9
>b118	09					.byte	9
>b119	4d					.byte	'M'
>b11a	91 ab					.word	L10086
>b11c	00					.byte	0
>b11d	03					.byte	3
>b11e	d2 ab e3				.byte	$d2,$ab,$e3
>b121	09					.byte	9
>b122	4d					.byte	'M'
>b123	99 ab					.word	L10087
>b125	00					.byte	0
>b126	03					.byte	3
>b127	d2 ab e2				.byte	$d2,$ab,$e2
>b12a	09					.byte	9
>b12b	4d					.byte	'M'
>b12c	a0 ab					.word	L10088
>b12e	00					.byte	0
>b12f	03					.byte	3
>b130	d2 ab bf				.byte	$d2,$ab,$bf
>b133	09					.byte	9
>b134	4d					.byte	'M'
>b135	a6 ab					.word	L10089
>b137	00					.byte	0
>b138	03					.byte	3
>b139	d2 aa f7				.byte	$d2,$aa,$f7
>b13c	09					.byte	9
>b13d	4d					.byte	'M'
>b13e	af ab					.word	L10090
>b140	00					.byte	0
>b141	03					.byte	3
>b142	d2 aa f3				.byte	$d2,$aa,$f3
>b145	0c					.byte	12
>b146	4d					.byte	'M'
>b147	b2 ab					.word	L10091
>b149	00					.byte	0
>b14a	06					.byte	6
>b14b	d2 aa ec db d9 dd			.byte	$d2,$aa,$ec,$db,$d9,$dd
>b151	09					.byte	9
>b152	4d					.byte	'M'
>b153	bd ab					.word	L10092
>b155	00					.byte	0
>b156	03					.byte	3
>b157	d2 aa ec				.byte	$d2,$aa,$ec
>b15a	0c					.byte	12
>b15b	4d					.byte	'M'
>b15c	c8 ab					.word	L10093
>b15e	00					.byte	0
>b15f	06					.byte	6
>b160	d2 aa e9 db d9 dd			.byte	$d2,$aa,$e9,$db,$d9,$dd
>b166	09					.byte	9
>b167	4d					.byte	'M'
>b168	d3 ab					.word	L10094
>b16a	00					.byte	0
>b16b	03					.byte	3
>b16c	d2 aa e9				.byte	$d2,$aa,$e9
>b16f	09					.byte	9
>b170	4d					.byte	'M'
>b171	dc ab					.word	L10095
>b173	00					.byte	0
>b174	03					.byte	3
>b175	d2 aa e3				.byte	$d2,$aa,$e3
>b178	09					.byte	9
>b179	4d					.byte	'M'
>b17a	e0 ab					.word	L10096
>b17c	00					.byte	0
>b17d	03					.byte	3
>b17e	d2 aa e2				.byte	$d2,$aa,$e2
>b181	09					.byte	9
>b182	4d					.byte	'M'
>b183	e3 ab					.word	L10097
>b185	00					.byte	0
>b186	03					.byte	3
>b187	d2 a6 f7				.byte	$d2,$a6,$f7
>b18a	09					.byte	9
>b18b	4d					.byte	'M'
>b18c	ec ab					.word	L10098
>b18e	00					.byte	0
>b18f	03					.byte	3
>b190	d2 a6 f3				.byte	$d2,$a6,$f3
>b193	0c					.byte	12
>b194	4d					.byte	'M'
>b195	f1 ab					.word	L10099
>b197	00					.byte	0
>b198	06					.byte	6
>b199	d2 a6 ec db d9 dd			.byte	$d2,$a6,$ec,$db,$d9,$dd
>b19f	09					.byte	9
>b1a0	4d					.byte	'M'
>b1a1	fc ab					.word	L10100
>b1a3	00					.byte	0
>b1a4	03					.byte	3
>b1a5	d2 a6 ec				.byte	$d2,$a6,$ec
>b1a8	0c					.byte	12
>b1a9	4d					.byte	'M'
>b1aa	07 ac					.word	L10101
>b1ac	00					.byte	0
>b1ad	06					.byte	6
>b1ae	d2 a6 e9 db d9 dd			.byte	$d2,$a6,$e9,$db,$d9,$dd
>b1b4	09					.byte	9
>b1b5	4d					.byte	'M'
>b1b6	12 ac					.word	L10102
>b1b8	00					.byte	0
>b1b9	03					.byte	3
>b1ba	d2 a6 e9				.byte	$d2,$a6,$e9
>b1bd	09					.byte	9
>b1be	4d					.byte	'M'
>b1bf	1b ac					.word	L10103
>b1c1	00					.byte	0
>b1c2	03					.byte	3
>b1c3	d2 a6 e3				.byte	$d2,$a6,$e3
>b1c6	09					.byte	9
>b1c7	4d					.byte	'M'
>b1c8	21 ac					.word	L10104
>b1ca	00					.byte	0
>b1cb	03					.byte	3
>b1cc	d2 a6 e2				.byte	$d2,$a6,$e2
>b1cf	0a					.byte	10
>b1d0	4d					.byte	'M'
>b1d1	26 ac					.word	L10105
>b1d3	00					.byte	0
>b1d4	04					.byte	4
>b1d5	50 52 4f c3				.byte	$50,$52,$4f,$c3
>b1d9	0a					.byte	10
>b1da	4d					.byte	'M'
>b1db	29 ac					.word	L10106
>b1dd	00					.byte	0
>b1de	04					.byte	4
>b1df	4e 45 58 d4				.byte	$4e,$45,$58,$d4
>b1e3	08					.byte	8
>b1e4	4d					.byte	'M'
>b1e5	2c ac					.word	L10107
>b1e7	00					.byte	0
>b1e8	02					.byte	2
>b1e9	49 c6					.byte	$49,$c6
>b1eb	0d					.byte	13
>b1ec	4d					.byte	'M'
>b1ed	2f ac					.word	L10108
>b1ef	00					.byte	0
>b1f0	07					.byte	7
>b1f1	45 4e 44 50 52 4f c3			.byte	$45,$4e,$44,$50,$52,$4f,$c3
>b1f8	0b					.byte	11
>b1f9	4d					.byte	'M'
>b1fa	32 ac					.word	L10109
>b1fc	00					.byte	0
>b1fd	05					.byte	5
>b1fe	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
>b203	0a					.byte	10
>b204	4d					.byte	'M'
>b205	35 ac					.word	L10110
>b207	00					.byte	0
>b208	04					.byte	4
>b209	45 4c 53 c5				.byte	$45,$4c,$53,$c5
>b20d	09					.byte	9
>b20e	4d					.byte	'M'
>b20f	38 ac					.word	L10111
>b211	00					.byte	0
>b212	03					.byte	3
>b213	43 d3 bf				.byte	$43,$d3,$bf
>b216	09					.byte	9
>b217	4d					.byte	'M'
>b218	3c ac					.word	L10112
>b21a	00					.byte	0
>b21b	03					.byte	3
>b21c	43 c3 bf				.byte	$43,$c3,$bf
>b21f	0a					.byte	10
>b220	4d					.byte	'M'
>b221	40 ac					.word	L10113
>b223	00					.byte	0
>b224	04					.byte	4
>b225	42 59 54 c5				.byte	$42,$59,$54,$c5
>b229	0b					.byte	11
>b22a	4d					.byte	'M'
>b22b	43 ac					.word	L10114
>b22d	00					.byte	0
>b22e	05					.byte	5
>b22f	42 52 45 41 cb				.byte	$42,$52,$45,$41,$cb
>b234	0b					.byte	11
>b235	4d					.byte	'M'
>b236	45 ac					.word	L10115
>b238	00					.byte	0
>b239	05					.byte	5
>b23a	c1 be bd f3 bf				.byte	$c1,$be,$bd,$f3,$bf
>b23f	0b					.byte	11
>b240	4d					.byte	'M'
>b241	4b ac					.word	L10116
>b243	00					.byte	0
>b244	05					.byte	5
>b245	c1 be bd e3 bf				.byte	$c1,$be,$bd,$e3,$bf
>b24a	0b					.byte	11
>b24b	4d					.byte	'M'
>b24c	52 ac					.word	L10117
>b24e	00					.byte	0
>b24f	05					.byte	5
>b250	c1 be bd e2 bf				.byte	$c1,$be,$bd,$e2,$bf
>b255	0a					.byte	10
>b256	4d					.byte	'M'
>b257	58 ac					.word	L10118
>b259	00					.byte	0
>b25a	04					.byte	4
>b25b	c1 bd f3 bf				.byte	$c1,$bd,$f3,$bf
>b25f	09					.byte	9
>b260	4d					.byte	'M'
>b261	5e ac					.word	L10119
>b263	00					.byte	0
>b264	03					.byte	3
>b265	c1 bd f3				.byte	$c1,$bd,$f3
>b268	0c					.byte	12
>b269	4d					.byte	'M'
>b26a	61 ac					.word	L10120
>b26c	00					.byte	0
>b26d	06					.byte	6
>b26e	c1 bd ec db d9 dd			.byte	$c1,$bd,$ec,$db,$d9,$dd
>b274	0c					.byte	12
>b275	4d					.byte	'M'
>b276	64 ac					.word	L10121
>b278	00					.byte	0
>b279	06					.byte	6
>b27a	c1 bd e9 db d9 dd			.byte	$c1,$bd,$e9,$db,$d9,$dd
>b280	0a					.byte	10
>b281	4d					.byte	'M'
>b282	67 ac					.word	L10122
>b284	00					.byte	0
>b285	04					.byte	4
>b286	c1 bd e3 bf				.byte	$c1,$bd,$e3,$bf
>b28a	09					.byte	9
>b28b	4d					.byte	'M'
>b28c	6e ac					.word	L10123
>b28e	00					.byte	0
>b28f	03					.byte	3
>b290	c1 bd e3				.byte	$c1,$bd,$e3
>b293	0a					.byte	10
>b294	4d					.byte	'M'
>b295	72 ac					.word	L10124
>b297	00					.byte	0
>b298	04					.byte	4
>b299	c1 bd e2 bf				.byte	$c1,$bd,$e2,$bf
>b29d	09					.byte	9
>b29e	4d					.byte	'M'
>b29f	78 ac					.word	L10125
>b2a1	00					.byte	0
>b2a2	03					.byte	3
>b2a3	c1 bd e2				.byte	$c1,$bd,$e2
>b2a6	09					.byte	9
>b2a7	4d					.byte	'M'
>b2a8	7b ac					.word	L10126
>b2aa	00					.byte	0
>b2ab	03					.byte	3
>b2ac	c1 bd d9				.byte	$c1,$bd,$d9
>b2af	09					.byte	9
>b2b0	4d					.byte	'M'
>b2b1	7d ac					.word	L10127
>b2b3	00					.byte	0
>b2b4	03					.byte	3
>b2b5	c1 bd d2				.byte	$c1,$bd,$d2
>b2b8	09					.byte	9
>b2b9	4d					.byte	'M'
>b2ba	7e ac					.word	L10128
>b2bc	00					.byte	0
>b2bd	03					.byte	3
>b2be	c1 bd bf				.byte	$c1,$bd,$bf
>b2c1	0a					.byte	10
>b2c2	4d					.byte	'M'
>b2c3	84 ac					.word	L10129
>b2c5	00					.byte	0
>b2c6	04					.byte	4
>b2c7	c1 bc f3 bf				.byte	$c1,$bc,$f3,$bf
>b2cb	0a					.byte	10
>b2cc	4d					.byte	'M'
>b2cd	8a ac					.word	L10130
>b2cf	00					.byte	0
>b2d0	04					.byte	4
>b2d1	c1 bc e3 bf				.byte	$c1,$bc,$e3,$bf
>b2d5	0a					.byte	10
>b2d6	4d					.byte	'M'
>b2d7	91 ac					.word	L10131
>b2d9	00					.byte	0
>b2da	04					.byte	4
>b2db	c1 bc e2 bf				.byte	$c1,$bc,$e2,$bf
>b2df	0b					.byte	11
>b2e0	4d					.byte	'M'
>b2e1	97 ac					.word	L10132
>b2e3	00					.byte	0
>b2e4	05					.byte	5
>b2e5	c1 bc be f3 bf				.byte	$c1,$bc,$be,$f3,$bf
>b2ea	0b					.byte	11
>b2eb	4d					.byte	'M'
>b2ec	9d ac					.word	L10133
>b2ee	00					.byte	0
>b2ef	05					.byte	5
>b2f0	c1 bc be e3 bf				.byte	$c1,$bc,$be,$e3,$bf
>b2f5	0b					.byte	11
>b2f6	4d					.byte	'M'
>b2f7	a4 ac					.word	L10134
>b2f9	00					.byte	0
>b2fa	05					.byte	5
>b2fb	c1 bc be e2 bf				.byte	$c1,$bc,$be,$e2,$bf
>b300	0a					.byte	10
>b301	4d					.byte	'M'
>b302	aa ac					.word	L10135
>b304	00					.byte	0
>b305	04					.byte	4
>b306	c1 bc be bf				.byte	$c1,$bc,$be,$bf
>b30a	09					.byte	9
>b30b	4d					.byte	'M'
>b30c	b0 ac					.word	L10136
>b30e	00					.byte	0
>b30f	03					.byte	3
>b310	c1 ba f3				.byte	$c1,$ba,$f3
>b313	0c					.byte	12
>b314	4d					.byte	'M'
>b315	b3 ac					.word	L10137
>b317	00					.byte	0
>b318	06					.byte	6
>b319	c1 ba ec db d9 dd			.byte	$c1,$ba,$ec,$db,$d9,$dd
>b31f	0c					.byte	12
>b320	4d					.byte	'M'
>b321	b6 ac					.word	L10138
>b323	00					.byte	0
>b324	06					.byte	6
>b325	c1 ba e9 db d9 dd			.byte	$c1,$ba,$e9,$db,$d9,$dd
>b32b	09					.byte	9
>b32c	4d					.byte	'M'
>b32d	b9 ac					.word	L10139
>b32f	00					.byte	0
>b330	03					.byte	3
>b331	c1 ba e3				.byte	$c1,$ba,$e3
>b334	09					.byte	9
>b335	4d					.byte	'M'
>b336	bd ac					.word	L10140
>b338	00					.byte	0
>b339	03					.byte	3
>b33a	c1 ba e2				.byte	$c1,$ba,$e2
>b33d	0b					.byte	11
>b33e	4d					.byte	'M'
>b33f	c0 ac					.word	L10141
>b341	00					.byte	0
>b342	05					.byte	5
>b343	41 2e 46 4f d2				.byte	$41,$2e,$46,$4f,$d2
>b348	09					.byte	9
>b349	4d					.byte	'M'
>b34a	c3 ac					.word	L10142
>b34c	00					.byte	0
>b34d	03					.byte	3
>b34e	c1 ad f3				.byte	$c1,$ad,$f3
>b351	0c					.byte	12
>b352	4d					.byte	'M'
>b353	c7 ac					.word	L10143
>b355	00					.byte	0
>b356	06					.byte	6
>b357	c1 ad ec db d9 dd			.byte	$c1,$ad,$ec,$db,$d9,$dd
>b35d	0c					.byte	12
>b35e	4d					.byte	'M'
>b35f	cb ac					.word	L10144
>b361	00					.byte	0
>b362	06					.byte	6
>b363	c1 ad e9 db d9 dd			.byte	$c1,$ad,$e9,$db,$d9,$dd
>b369	09					.byte	9
>b36a	4d					.byte	'M'
>b36b	cf ac					.word	L10145
>b36d	00					.byte	0
>b36e	03					.byte	3
>b36f	c1 ad e3				.byte	$c1,$ad,$e3
>b372	09					.byte	9
>b373	4d					.byte	'M'
>b374	d4 ac					.word	L10146
>b376	00					.byte	0
>b377	03					.byte	3
>b378	c1 ad e2				.byte	$c1,$ad,$e2
>b37b	09					.byte	9
>b37c	4d					.byte	'M'
>b37d	d8 ac					.word	L10147
>b37f	00					.byte	0
>b380	03					.byte	3
>b381	c1 ad bf				.byte	$c1,$ad,$bf
>b384	0a					.byte	10
>b385	4d					.byte	'M'
>b386	de ac					.word	L10148
>b388	00					.byte	0
>b389	04					.byte	4
>b38a	c1 ad be d3				.byte	$c1,$ad,$be,$d3
>b38e	09					.byte	9
>b38f	4d					.byte	'M'
>b390	e0 ac					.word	L10149
>b392	00					.byte	0
>b393	03					.byte	3
>b394	c1 ab f3				.byte	$c1,$ab,$f3
>b397	0c					.byte	12
>b398	4d					.byte	'M'
>b399	e4 ac					.word	L10150
>b39b	00					.byte	0
>b39c	06					.byte	6
>b39d	c1 ab ec db d9 dd			.byte	$c1,$ab,$ec,$db,$d9,$dd
>b3a3	0c					.byte	12
>b3a4	4d					.byte	'M'
>b3a5	e8 ac					.word	L10151
>b3a7	00					.byte	0
>b3a8	06					.byte	6
>b3a9	c1 ab e9 db d9 dd			.byte	$c1,$ab,$e9,$db,$d9,$dd
>b3af	09					.byte	9
>b3b0	4d					.byte	'M'
>b3b1	ec ac					.word	L10152
>b3b3	00					.byte	0
>b3b4	03					.byte	3
>b3b5	c1 ab e3				.byte	$c1,$ab,$e3
>b3b8	09					.byte	9
>b3b9	4d					.byte	'M'
>b3ba	f1 ac					.word	L10153
>b3bc	00					.byte	0
>b3bd	03					.byte	3
>b3be	c1 ab e2				.byte	$c1,$ab,$e2
>b3c1	09					.byte	9
>b3c2	4d					.byte	'M'
>b3c3	f5 ac					.word	L10154
>b3c5	00					.byte	0
>b3c6	03					.byte	3
>b3c7	c1 ab bf				.byte	$c1,$ab,$bf
>b3ca	09					.byte	9
>b3cb	4d					.byte	'M'
>b3cc	fb ac					.word	L10155
>b3ce	00					.byte	0
>b3cf	03					.byte	3
>b3d0	c1 aa f3				.byte	$c1,$aa,$f3
>b3d3	0c					.byte	12
>b3d4	4d					.byte	'M'
>b3d5	fe ac					.word	L10156
>b3d7	00					.byte	0
>b3d8	06					.byte	6
>b3d9	c1 aa ec db d9 dd			.byte	$c1,$aa,$ec,$db,$d9,$dd
>b3df	0c					.byte	12
>b3e0	4d					.byte	'M'
>b3e1	01 ad					.word	L10157
>b3e3	00					.byte	0
>b3e4	06					.byte	6
>b3e5	c1 aa e9 db d9 dd			.byte	$c1,$aa,$e9,$db,$d9,$dd
>b3eb	09					.byte	9
>b3ec	4d					.byte	'M'
>b3ed	04 ad					.word	L10158
>b3ef	00					.byte	0
>b3f0	03					.byte	3
>b3f1	c1 aa e3				.byte	$c1,$aa,$e3
>b3f4	09					.byte	9
>b3f5	4d					.byte	'M'
>b3f6	08 ad					.word	L10159
>b3f8	00					.byte	0
>b3f9	03					.byte	3
>b3fa	c1 aa e2				.byte	$c1,$aa,$e2
>b3fd	09					.byte	9
>b3fe	4d					.byte	'M'
>b3ff	0b ad					.word	L10160
>b401	00					.byte	0
>b402	03					.byte	3
>b403	c1 a6 f3				.byte	$c1,$a6,$f3
>b406	0c					.byte	12
>b407	4d					.byte	'M'
>b408	0e ad					.word	L10161
>b40a	00					.byte	0
>b40b	06					.byte	6
>b40c	c1 a6 ec db d9 dd			.byte	$c1,$a6,$ec,$db,$d9,$dd
>b412	0c					.byte	12
>b413	4d					.byte	'M'
>b414	11 ad					.word	L10162
>b416	00					.byte	0
>b417	06					.byte	6
>b418	c1 a6 e9 db d9 dd			.byte	$c1,$a6,$e9,$db,$d9,$dd
>b41e	09					.byte	9
>b41f	4d					.byte	'M'
>b420	14 ad					.word	L10163
>b422	00					.byte	0
>b423	03					.byte	3
>b424	c1 a6 e3				.byte	$c1,$a6,$e3
>b427	09					.byte	9
>b428	4d					.byte	'M'
>b429	18 ad					.word	L10164
>b42b	00					.byte	0
>b42c	03					.byte	3
>b42d	c1 a6 e2				.byte	$c1,$a6,$e2
>b430	09					.byte	9
>b431	4d					.byte	'M'
>b432	1b ad					.word	L10165
>b434	00					.byte	0
>b435	03					.byte	3
>b436	be be f3				.byte	$be,$be,$f3
>b439	09					.byte	9
>b43a	4d					.byte	'M'
>b43b	1e ad					.word	L10166
>b43d	00					.byte	0
>b43e	03					.byte	3
>b43f	be be ec				.byte	$be,$be,$ec
>b442	09					.byte	9
>b443	4d					.byte	'M'
>b444	25 ad					.word	L10167
>b446	00					.byte	0
>b447	03					.byte	3
>b448	be be e9				.byte	$be,$be,$e9
>b44b	09					.byte	9
>b44c	4d					.byte	'M'
>b44d	2a ad					.word	L10168
>b44f	00					.byte	0
>b450	03					.byte	3
>b451	be be e3				.byte	$be,$be,$e3
>b454	09					.byte	9
>b455	4d					.byte	'M'
>b456	2e ad					.word	L10169
>b458	00					.byte	0
>b459	03					.byte	3
>b45a	be be d2				.byte	$be,$be,$d2
>b45d	09					.byte	9
>b45e	4d					.byte	'M'
>b45f	35 ad					.word	L10170
>b461	00					.byte	0
>b462	03					.byte	3
>b463	be be c1				.byte	$be,$be,$c1
>b466	09					.byte	9
>b467	4d					.byte	'M'
>b468	37 ad					.word	L10171
>b46a	00					.byte	0
>b46b	03					.byte	3
>b46c	bc bc f3				.byte	$bc,$bc,$f3
>b46f	09					.byte	9
>b470	4d					.byte	'M'
>b471	3a ad					.word	L10172
>b473	00					.byte	0
>b474	03					.byte	3
>b475	bc bc ec				.byte	$bc,$bc,$ec
>b478	09					.byte	9
>b479	4d					.byte	'M'
>b47a	41 ad					.word	L10173
>b47c	00					.byte	0
>b47d	03					.byte	3
>b47e	bc bc e9				.byte	$bc,$bc,$e9
>b481	09					.byte	9
>b482	4d					.byte	'M'
>b483	46 ad					.word	L10174
>b485	00					.byte	0
>b486	03					.byte	3
>b487	bc bc e3				.byte	$bc,$bc,$e3
>b48a	09					.byte	9
>b48b	4d					.byte	'M'
>b48c	4a ad					.word	L10175
>b48e	00					.byte	0
>b48f	03					.byte	3
>b490	bc bc d2				.byte	$bc,$bc,$d2
>b493	09					.byte	9
>b494	4d					.byte	'M'
>b495	51 ad					.word	L10176
>b497	00					.byte	0
>b498	03					.byte	3
>b499	bc bc c1				.byte	$bc,$bc,$c1
>b49c	08					.byte	8
>b49d	4d					.byte	'M'
>b49e	53 ad					.word	L10177
>b4a0	00					.byte	0
>b4a1	02					.byte	2
>b4a2	ad d2					.byte	$ad,$d2
>b4a4	08					.byte	8
>b4a5	4d					.byte	'M'
>b4a6	60 ad					.word	L10178
>b4a8	00					.byte	0
>b4a9	02					.byte	2
>b4aa	ad c1					.byte	$ad,$c1
>b4ac	09					.byte	9
>b4ad	4d					.byte	'M'
>b4ae	64 ad					.word	L10179
>b4b0	00					.byte	0
>b4b1	03					.byte	3
>b4b2	ad ad f3				.byte	$ad,$ad,$f3
>b4b5	09					.byte	9
>b4b6	4d					.byte	'M'
>b4b7	67 ad					.word	L10180
>b4b9	00					.byte	0
>b4ba	03					.byte	3
>b4bb	ad ad ec				.byte	$ad,$ad,$ec
>b4be	09					.byte	9
>b4bf	4d					.byte	'M'
>b4c0	75 ad					.word	L10181
>b4c2	00					.byte	0
>b4c3	03					.byte	3
>b4c4	ad ad e9				.byte	$ad,$ad,$e9
>b4c7	09					.byte	9
>b4c8	4d					.byte	'M'
>b4c9	80 ad					.word	L10182
>b4cb	00					.byte	0
>b4cc	03					.byte	3
>b4cd	ad ad e3				.byte	$ad,$ad,$e3
>b4d0	09					.byte	9
>b4d1	4d					.byte	'M'
>b4d2	84 ad					.word	L10183
>b4d4	00					.byte	0
>b4d5	03					.byte	3
>b4d6	ad ad d9				.byte	$ad,$ad,$d9
>b4d9	09					.byte	9
>b4da	4d					.byte	'M'
>b4db	86 ad					.word	L10184
>b4dd	00					.byte	0
>b4de	03					.byte	3
>b4df	ad ad d2				.byte	$ad,$ad,$d2
>b4e2	09					.byte	9
>b4e3	4d					.byte	'M'
>b4e4	8d ad					.word	L10185
>b4e6	00					.byte	0
>b4e7	03					.byte	3
>b4e8	ad ad c1				.byte	$ad,$ad,$c1
>b4eb	09					.byte	9
>b4ec	4d					.byte	'M'
>b4ed	8f ad					.word	L10186
>b4ef	00					.byte	0
>b4f0	03					.byte	3
>b4f1	ab ab f3				.byte	$ab,$ab,$f3
>b4f4	09					.byte	9
>b4f5	4d					.byte	'M'
>b4f6	92 ad					.word	L10187
>b4f8	00					.byte	0
>b4f9	03					.byte	3
>b4fa	ab ab ec				.byte	$ab,$ab,$ec
>b4fd	09					.byte	9
>b4fe	4d					.byte	'M'
>b4ff	9b ad					.word	L10188
>b501	00					.byte	0
>b502	03					.byte	3
>b503	ab ab e9				.byte	$ab,$ab,$e9
>b506	09					.byte	9
>b507	4d					.byte	'M'
>b508	a2 ad					.word	L10189
>b50a	00					.byte	0
>b50b	03					.byte	3
>b50c	ab ab e3				.byte	$ab,$ab,$e3
>b50f	09					.byte	9
>b510	4d					.byte	'M'
>b511	a6 ad					.word	L10190
>b513	00					.byte	0
>b514	03					.byte	3
>b515	ab ab d9				.byte	$ab,$ab,$d9
>b518	09					.byte	9
>b519	4d					.byte	'M'
>b51a	a8 ad					.word	L10191
>b51c	00					.byte	0
>b51d	03					.byte	3
>b51e	ab ab d2				.byte	$ab,$ab,$d2
>b521	09					.byte	9
>b522	4d					.byte	'M'
>b523	ad ad					.word	L10192
>b525	00					.byte	0
>b526	03					.byte	3
>b527	ab ab c1				.byte	$ab,$ab,$c1
>b52a	00					.byte	$00

;******  Return to file: main.asm

.b52b					EndCode:

;******  End of listing
