
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -Wall -q -c -o lean.prg -L lean.lst main.asm
; Mon Oct 28 15:02:55 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$0801					ProgramStart = $0801 						; where source code starts.
=$b800					UserDictionary = $B800 						; user dictionary
=$bc00					CodeMemory = $BC00 							; where object code goes.
=$063f					AssemblerStack = $063F 						; compiler stack space.
=$0700					VariableMemory = $0700
=64					LINEBUFFSIZE = 64
=128					VALBUFFSIZE = 128
=$0640					lineBuffer = $0640	 						; current line, match encoded.
=$0680					valueBuffer = $0680 						; buffer for associated values.
>0000					scanPtr:	.word ?							; BASIC scan position.
>0002					aStackPtr:	.word ? 						; compiler stack.
>0004					dictPtr:	.word ? 						; dictionary pointer
>0006					genPtr:		.word ? 						; code generation pointer
>0008					varPtr: 	.word ?							; next free variable pointer.
>000a					zTemp0:		.word ? 						; temps.
>000c					zTemp1:		.word ?
>000e					zTemp2:		.word ?
>0010					zTemp3:		.word ?
>0012					lastCreate:	.word ? 						; last created dictionary word
>0014					codePtr:	.word ? 						; code pointer
>0016					codeBank:	.byte ?							; code bank
>0017					originalSP:			.byte ? 				; 6502 stack on entry.
>0018					lastDefine:			.word ? 				; last defined word.
>001a					lineNumber:			.word ? 				; current line number
>001c					identStart:			.byte ? 				; start offset of current identifier
>001d					dirLowByte:			.byte ?					; values returned from search
>001e					dirHighByte:		.byte ?
>001f					dirBank:			.byte ?
>0020					dirLength:			.byte ?
>0021					valueBufferPos:		.byte ? 				; position in value buffer.
>0022					genPos: 			.byte ? 				; position in line buffer, generation.
>0023					generateVar:		.word ? 				; variables used in set value
>0025					elementData:		.fill 3 				; data from matched constant/identifier
>0028					codeBackup:			.fill 3 				; backup code pointer.
>002b					varSize:			.byte ? 				; size of current variable.
=$8f					REM_TOKEN = $8F 							; C64 REM Token
="*"					SCM_TOP = '*'								; top of stack marker.
="P"					SCM_PROC = 'P'								; procedure marker
="R"					SCM_REPEAT = 'R'							; repeat marker
="F"					SCM_FOR = 'F' 								; for marker
="I"					SCM_IF = 'I'								; if/else/endif marker.
=$60					CPU_RETURN = $60 							; RTS opcode.
=$48					CPU_PHA = $48 								; PHA
=$68					CPU_PLA = $68 								; PLA
=$3a					CPU_DECA = $3A 								; DEC A
=$d0					CPU_BNE = $D0								; BNE
=$80					CPU_BRA = $80								; BRA
=$20					CPU_JSR = $20 								; JSR

;******  Return to file: main.asm


;******  Processing file: generated/cgconst.inc

=$53					CGEN_C_ISZERO = $53
=$63					CGEN_C_LOW = $63
=$73					CGEN_C_HIGH = $73
=$83					CGEN_C_LOWPLUS1 = $83
=$93					CGEN_C_SETDATA = $93
=$a3					CGEN_C_EXEC = $a3

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.a000	ba		tsx				tsx 									; save SP
.a001	86 17		stx $17				stx 	originalSP
.a003	20 b9 aa	jsr $aab9			jsr 	LoadBasicCode
.a006	20 e9 a7	jsr $a7e9			jsr 	StackReset 						; reset convert stack.
.a009	20 28 a6	jsr $a628			jsr 	VariableReset 					; reset variable memory.
.a00c	20 71 a3	jsr $a371			jsr 	DictionaryReset 				; reset user dictionary
.a00f	20 e5 a3	jsr $a3e5			jsr 	CodeReset 						; reset code output.
.a012	20 3d a0	jsr $a03d			jsr 	ScannerReset 					; reset scanner
.a015					AsmLoop:
.a015	20 40 a0	jsr $a040			jsr 	ScannerFind 					; next thing in code
.a018	90 08		bcc $a022			bcc 	AsmEnd 							; nothing more
.a01a	20 82 a0	jsr $a082			jsr 	ProcessLineToBuffer 			; convert it.
.a01d	20 aa a1	jsr $a1aa			jsr 	GeneratorSearch 				; check it for generators
.a020	80 f3		bra $a015			bra 	AsmLoop 						; and keep going.
.a022					AsmEnd:
.a022	a9 2a		lda #$2a			lda 	#SCM_TOP 						; check structures are done
.a024	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a027	20 2e a0	jsr $a02e			jsr 	CallCodeMemory
.a02a					ReturnCaller:
.a02a	a6 17		ldx $17				ldx		originalSP 						; restore XP and exit.
.a02c	9a		txs				txs
.a02d	60		rts				rts
.a02e					CallCodeMemory:
.a02e	a5 18		lda $18				lda 	lastDefine
.a030	05 19		ora $19				ora 	lastDefine+1
.a032	f0 08		beq $a03c			beq 	_NoExecute
.a034	a5 14		lda $14				lda 	codePtr							; pass in byte after code.
.a036	a6 15		ldx $15				ldx 	codePtr+1
>a038	ff						.byte 	$FF
.a039	6c 18 00	jmp ($0018)			jmp 	(lastDefine)					; call last definition.
.a03c					_NoExecute:
.a03c	60		rts				rts

;******  Processing file: lean/scanner.asm

.a03d					ScannerReset:
.a03d	64 01		stz $01				stz 	scanPtr+1 					; zero MSB means the start
.a03f	60		rts				rts
.a040					ScannerFind:
.a040	48		pha				pha 								; save registers
.a041	da		phx				phx
.a042	5a		phy				phy
.a043	a5 01		lda $01				lda 	scanPtr+1 					; reset the scanner pointer ?
.a045	d0 0a		bne $a051			bne 	_SFScanForward 				; no, scan forward from current.
.a047	a9 01		lda #$01			lda 	#(ProgramStart) & $FF
.a049	85 00		sta $00				sta 	scanPtr
.a04b	a9 08		lda #$08			lda 	#(ProgramStart) >> 8
.a04d	85 01		sta $01				sta 	scanPtr+1
.a04f	80 12		bra $a063			bra 	_SFCheck 					; check if this one is a REM.
.a051					_SFScanForward:
.a051	a0 01		ldy #$01			ldy 	#1 							; check if the offset is zero
.a053	b2 00		lda ($00)			lda 	(scanPtr)
.a055	11 00		ora ($00),y			ora 	(scanPtr),y
.a057	18		clc				clc 								; if so exit with CC.
.a058	f0 24		beq $a07e			beq 	_SFExit
.a05a	b2 00		lda ($00)			lda 	(scanPtr) 					; forward to next.
.a05c	aa		tax				tax
.a05d	b1 00		lda ($00),y			lda 	(scanPtr),y
.a05f	86 00		stx $00				stx 	scanPtr
.a061	85 01		sta $01				sta 	scanPtr+1
.a063					_SFCheck:
.a063	a0 02		ldy #$02			ldy 	#2 								; copy line number.
.a065	b1 00		lda ($00),y			lda 	(scanPtr),y
.a067	85 1a		sta $1a				sta 	lineNumber
.a069	c8		iny				iny
.a06a	b1 00		lda ($00),y			lda 	(scanPtr),y
.a06c	85 1b		sta $1b				sta 	lineNumber+1
.a06e	c8		iny				iny
.a06f	b1 00		lda ($00),y			lda 	(scanPtr),y 				; is it a "REM." line ?
.a071	c9 8f		cmp #$8f			cmp 	#REM_TOKEN
.a073	d0 dc		bne $a051			bne 	_SFScanForward
.a075	c8		iny				iny
.a076	b1 00		lda ($00),y			lda 	(scanPtr),y 				; is it followed by a '.'
.a078	c8		iny				iny
.a079	c9 2e		cmp #$2e			cmp 	#"."
.a07b	d0 d4		bne $a051			bne 	_SFScanForward
.a07d	38		sec				sec 								; found something, exit with CS.
.a07e					_SFExit:
.a07e	7a		ply				ply 								; load registers and exit.
.a07f	fa		plx				plx
.a080	68		pla				pla
.a081	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: lean/process.asm

.a082					ProcessLineToBuffer:
.a082	a0 06		ldy #$06			ldy 	#6 							; position in line
.a084	a2 00		ldx #$00			ldx 	#0 							; position in buffer
.a086	64 21		stz $21				stz 	valueBufferPos 				; reset value buffer pos
.a088	a9 ff		lda #$ff			lda 	#$FF
.a08a	8d 80 06	sta $0680			sta 	valueBuffer 				; erase value buffer (end marker $FF)
.a08d					_PLTConvert:
.a08d	b1 00		lda ($00),y			lda 	(scanPtr),y 				; next character
.a08f	f0 64		beq $a0f5			beq 	_PLTExit
.a091	c8		iny				iny
.a092	c9 20		cmp #$20			cmp 	#' ' 						; skip over spaces.
.a094	f0 f7		beq $a08d			beq 	_PLTConvert
.a096	20 4b a1	jsr $a14b			jsr 	PLTCheckCharacter 			; identifier character.
.a099	b0 08		bcs $a0a3			bcs 	_PLTIsIdentifier 			; it's an identifier.
.a09b	09 80		ora #$80			ora 	#$80 						; set bit 7
.a09d	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write out
.a0a0	e8		inx				inx
.a0a1	80 ea		bra $a08d			bra 	_PLTConvert
.a0a3					_PLTIsIdentifier:
.a0a3	86 1c		stx $1c				stx 	identStart 					; save as start of identifier.
.a0a5					_PLTGetIdentifier:
.a0a5	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out.
.a0a8	e8		inx				inx
.a0a9	b1 00		lda ($00),y			lda 	(scanPtr),y	 				; get next character
.a0ab	c8		iny				iny
.a0ac	20 4b a1	jsr $a14b			jsr 	PLTCheckCharacter 			; still identifier
.a0af	b0 f4		bcs $a0a5			bcs 	_PLTGetIdentifier
.a0b1	88		dey				dey 								; undo last bump.
.a0b2					_PLTGotIdentifier:
.a0b2	bd 3f 06	lda $063f,x			lda 	lineBuffer-1,x 				; set bit 7 of last
.a0b5	09 80		ora #$80			ora 	#$80
.a0b7	9d 3f 06	sta $063f,x			sta 	lineBuffer-1,x
.a0ba	5a		phy				phy
.a0bb	da		phx				phx
.a0bc	20 3f a1	jsr $a13f			jsr 	PLTGetAddress 				; XY <= address of identifier.
.a0bf	20 80 a3	jsr $a380			jsr 	DictionarySearch 			; is it in the dictionaries ?
.a0c2	90 0c		bcc $a0d0			bcc 	_PLTTryConstant
.a0c4	c9 50		cmp #$50			cmp 	#"P" 						; procedure, short or var ?
.a0c6	f0 35		beq $a0fd			beq 	_PLTFoundIdentifier
.a0c8	c9 53		cmp #$53			cmp 	#"S"
.a0ca	f0 31		beq $a0fd			beq 	_PLTFoundIdentifier
.a0cc	c9 49		cmp #$49			cmp 	#"I"
.a0ce	f0 2d		beq $a0fd			beq 	_PLTFoundIdentifier
.a0d0					_PLTTryConstant:
.a0d0	20 3f a1	jsr $a13f			jsr 	PLTGetAddress 				; try as a constant
.a0d3	20 59 a7	jsr $a759			jsr 	StringToInt
.a0d6	b0 04		bcs $a0dc			bcs 	_PLTAttachIdentifier
.a0d8	fa		plx				plx 								; leave as it is - unknown identifier
.a0d9	7a		ply				ply
.a0da	80 b1		bra $a08d			bra 	_PLTConvert
.a0dc					_PLTAttachIdentifier:
.a0dc	a9 00		lda #$00			lda 	#0
.a0de	20 6f a1	jsr $a16f			jsr 	ProcessRecordData 			; record associated data
.a0e1	a9 62		lda #$62			lda 	#"b"
.a0e3	c0 00		cpy #$00			cpy 	#0
.a0e5	f0 02		beq $a0e9			beq 	_PLTRecord
.a0e7	a9 77		lda #$77			lda 	#"w"
.a0e9					_PLTRecord:
.a0e9	fa		plx				plx 								; restore XY position
.a0ea	7a		ply				ply
.a0eb	a6 1c		ldx $1c				ldx 	identStart 					; overwrite the position with ident start
.a0ed	09 80		ora #$80			ora 	#$80 						; bit 7, it's an element in its own right
.a0ef	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out
.a0f2	e8		inx				inx 								; bump the position
.a0f3	80 98		bra $a08d			bra		_PLTConvert 				; do the next one.
.a0f5					_PLTExit:
.a0f5	9e 40 06	stz $0640,x			stz 	lineBuffer,x 				; make it ASCIIZ
.a0f8	e0 40		cpx #$40			cpx		#LINEBUFFSIZE 				; line too long.
.a0fa	b0 31		bcs $a12d			bcs 	_PLTBuffer
.a0fc	60		rts				rts
.a0fd					_PLTFoundIdentifier:
.a0fd	48		pha				pha 								; save type.
.a0fe	a6 1d		ldx $1d				ldx 	dirLowByte 					; get the dictionary AXY values
.a100	a4 1e		ldy $1e				ldy 	dirHighByte
.a102	a5 1f		lda $1f				lda 	dirBank
.a104	20 6f a1	jsr $a16f			jsr 	ProcessRecordData 			; attached to identstart
.a107	68		pla				pla 								; get type back, which is I or S or P
.a108	09 20		ora #$20			ora 	#$20 						; make it lower case.
.a10a	c9 70		cmp #$70			cmp 	#"p"						; P goes untrammelled
.a10c	f0 db		beq $a0e9			beq 	_PLTRecord
.a10e	c0 00		cpy #$00			cpy 	#0 							; if Y = 0, e.g. zero page, use that.
.a110	f0 d7		beq $a0e9			beq 	_PLTRecord
.a112	49 05		eor #$05			eor 	#"i"^"l" 					; convert it to L
.a114	c9 6c		cmp #$6c			cmp 	#"l"
.a116	f0 d1		beq $a0e9			beq 	_PLTRecord
.a118	a9 63		lda #$63			lda 	#"c" 						; otherwise C
.a11a	80 cd		bra $a0e9			bra 	_PLTRecord
.a11c					_PLTError:
.a11c	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a11f	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX ?",$00
>a127	54 41 58 20 3f 00
.a12d					_PLTBuffer:
.a12d	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a130	4c 45 41 4e 3a 4c 49 4e				.text 	"LEAN:","LINE SIZE",$00
>a138	45 20 53 49 5a 45 00
.a13f					PLTGetAddress:
.a13f	18		clc				clc
.a140	a5 1c		lda $1c				lda 	identStart
.a142	69 40		adc #$40			adc 	#lineBuffer & $FF
.a144	aa		tax				tax
.a145	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a147	90 01		bcc $a14a			bcc 	_PLGANoCarry
.a149	c8		iny				iny
.a14a					_PLGANoCarry:
.a14a	60		rts				rts
.a14b					PLTCheckCharacter:
.a14b	c9 25		cmp #$25			cmp 	#'%'
.a14d	f0 1c		beq $a16b			beq 	_PLCCYes
.a14f	c9 5f		cmp #$5f			cmp 	#'_'
.a151	f0 18		beq $a16b			beq 	_PLCCYes
.a153	c9 24		cmp #$24			cmp 	#'$'
.a155	f0 14		beq $a16b			beq 	_PLCCYes
.a157	c9 2e		cmp #$2e			cmp 	#'.'
.a159	f0 10		beq $a16b			beq 	_PLCCYes
.a15b	c9 30		cmp #$30			cmp 	#'0'
.a15d	90 0e		bcc $a16d			bcc 	_PLCCNo
.a15f	c9 3a		cmp #$3a			cmp 	#'9'+1
.a161	90 08		bcc $a16b			bcc 	_PLCCYes
.a163	c9 41		cmp #$41			cmp 	#'A'
.a165	90 06		bcc $a16d			bcc 	_PLCCNo
.a167	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a169	b0 02		bcs $a16d			bcs 	_PLCCNo
.a16b					_PLCCYes:
.a16b	38		sec				sec
.a16c	60		rts				rts
.a16d					_PLCCNo:
.a16d	18		clc				clc
.a16e	60		rts				rts
.a16f					ProcessRecordData:
.a16f	48		pha				pha
.a170	da		phx				phx
.a171	5a		phy				phy
.a172	da		phx				phx
.a173	a6 21		ldx $21				ldx 	valueBufferPos 				; get current position
.a175	9d 83 06	sta $0683,x			sta 	valueBuffer+3,x 			; copy data to it
.a178	98		tya				tya
.a179	9d 82 06	sta $0682,x			sta 	valueBuffer+2,x
.a17c	68		pla				pla
.a17d	9d 81 06	sta $0681,x			sta 	valueBuffer+1,x
.a180	a5 1c		lda $1c				lda 	identStart
.a182	9d 80 06	sta $0680,x			sta 	valueBuffer+0,x
.a185	e8		inx				inx 								; next position
.a186	e8		inx				inx
.a187	e8		inx				inx
.a188	e8		inx				inx
.a189	86 21		stx $21				stx 	valueBufferPos 				; save
.a18b	a9 ff		lda #$ff			lda 	#$FF 						; write end marker.
.a18d	9d 80 06	sta $0680,x			sta 	valueBuffer,x
.a190	e0 80		cpx #$80			cpx 	#VALBUFFSIZE
.a192	b0 04		bcs $a198			bcs 	_PRDError
.a194	7a		ply				ply
.a195	fa		plx				plx
.a196	68		pla				pla
.a197	60		rts				rts
.a198					_PRDError:
.a198	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a19b	4c 45 41 4e 3a 43 4f 4d				.text 	"LEAN:","COMPLEX ?",$00
>a1a3	50 4c 45 58 20 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/generate.asm

.a1aa					GeneratorSearch:
.a1aa	64 22		stz $22				stz 	genPos 						; reset the generator pointer
.a1ac					_GSNextItem:
.a1ac	a6 22		ldx $22				ldx 	genPos
.a1ae	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a1b1	f0 05		beq $a1b8			beq 	_GSExit
.a1b3	20 b9 a1	jsr $a1b9			jsr 	GenerateOne
.a1b6	80 f4		bra $a1ac			bra 	_GSNextItem
.a1b8					_GSExit:
.a1b8	60		rts				rts
.a1b9					GenerateOne:
.a1b9	a5 22		lda $22				lda 	genPos 						; point XY to the next thing
.a1bb	18		clc				clc 								; the actual address in the line buffer.
.a1bc	69 40		adc #$40			adc 	#lineBuffer & $FF
.a1be	aa		tax				tax
.a1bf	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a1c1	90 01		bcc $a1c4			bcc 	_GSNoCarry
.a1c3	c8		iny				iny
.a1c4					_GSNoCarry:
.a1c4	20 7d a3	jsr $a37d			jsr 	DictionarySearchSystemOnly 	; dictionary search
.a1c7	b0 10		bcs $a1d9			bcs 	_GSFound
.a1c9					_GSError:
.a1c9	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a1cc	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX?",$00
>a1d4	54 41 58 3f 00
.a1d9					_GSFound:
.a1d9	c9 4d		cmp #$4d			cmp 	#"M"						; check it's a match.
.a1db	d0 ec		bne $a1c9			bne 	_GSError
.a1dd	a4 20		ldy $20				ldy 	dirLength 					; advance to next
.a1df	a6 22		ldx $22				ldx 	genPos 						; checking for a-z.
.a1e1					_GSCheckData:
.a1e1	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a1e4	29 7f		and #$7f			and 	#$7F
.a1e6	c9 61		cmp #$61			cmp 	#'a'
.a1e8	90 08		bcc $a1f2			bcc 	_GSNotLC
.a1ea	c9 7b		cmp #$7b			cmp 	#'z'+1
.a1ec	b0 04		bcs $a1f2			bcs 	_GSNotLC
.a1ee	8a		txa				txa
.a1ef	20 75 a2	jsr $a275			jsr 	GenCopyData
.a1f2					_GSNotLC:
.a1f2	e8		inx				inx
.a1f3	88		dey				dey
.a1f4	d0 eb		bne $a1e1			bne 	_GSCheckData
.a1f6	86 22		stx $22				stx 	genPos
.a1f8	a5 1d		lda $1d				lda 	dirLowByte					; copy address to genPtr
.a1fa	85 06		sta $06				sta 	genPtr
.a1fc	a5 1e		lda $1e				lda 	dirHighByte
.a1fe	85 07		sta $07				sta 	genPtr+1
.a200	b2 06		lda ($06)			lda 	(genPtr)					; count in A
.a202	f0 25		beq $a229			beq 	_GSNext 					; nothing !
.a204	aa		tax				tax 								; X is count
.a205	a0 01		ldy #$01			ldy 	#1
.a207					_GSGenerate:
.a207	b1 06		lda ($06),y			lda 	(genPtr),y 					; execute something
.a209	c9 a3		cmp #$a3			cmp 	#CGEN_C_EXEC
.a20b	f0 1d		beq $a22a			beq 	_GSExecute
.a20d	c9 93		cmp #$93			cmp 	#CGEN_C_SETDATA 			; set data ?
.a20f	d0 0e		bne $a21f			bne 	_GSCopy
.a211	c8		iny				iny									; copy next two bytes out.
.a212	b1 06		lda ($06),y			lda 	(genPtr),y
.a214	85 23		sta $23				sta 	generateVar
.a216	c8		iny				iny
.a217	b1 06		lda ($06),y			lda 	(genPtr),y
.a219	85 24		sta $24				sta 	generateVar+1
.a21b	ca		dex				dex
.a21c	ca		dex				dex
.a21d	80 06		bra $a225			bra 	_GSContinue
.a21f					_GSCopy:
.a21f	20 46 a2	jsr $a246			jsr 	GenConvertByte 				; replace bytes
.a222	20 0f a4	jsr $a40f			jsr 	CodeWriteByte				; write out.
.a225					_GSContinue:
.a225	c8		iny				iny
.a226	ca		dex				dex
.a227	d0 de		bne $a207			bne 	_GSGenerate
.a229					_GSNext:
.a229	60		rts				rts
.a22a					_GSExecute:
.a22a	c8		iny				iny 								; grab one.
.a22b	ca		dex				dex
.a22c	da		phx				phx 								; save XY
.a22d	5a		phy				phy
.a22e	b1 06		lda ($06),y			lda 	(genPtr),y 					; read the execution ID
.a230	0a		asl a				asl 	a 							; index into table.
.a231	aa		tax				tax
.a232	bd 14 a9	lda $a914,x			lda 	ExecutableVectorTable,x 	; read jump vector
.a235	85 0a		sta $0a				sta 	zTemp0
.a237	bd 15 a9	lda $a915,x			lda 	ExecutableVectorTable+1,x
.a23a	85 0b		sta $0b				sta 	zTemp0+1
.a23c	20 43 a2	jsr $a243			jsr 	_GSCallzTemp0 				; call routine
.a23f	7a		ply				ply 								; restore XY
.a240	fa		plx				plx
.a241	80 e2		bra $a225			bra 	_GSContinue
.a243					_GSCallzTemp0:
.a243	6c 0a 00	jmp ($000a)			jmp 	(zTemp0)
.a246					GenConvertByte:
.a246	c9 63		cmp #$63			cmp 	#CGEN_C_LOW
.a248	f0 09		beq $a253			beq 	_GCBLowByte
.a24a	c9 83		cmp #$83			cmp 	#CGEN_C_LOWPLUS1
.a24c	f0 08		beq $a256			beq 	_GCBLowBytePlus1
.a24e	c9 73		cmp #$73			cmp 	#CGEN_C_HIGH
.a250	f0 0a		beq $a25c			beq 	_GCBHighByte
.a252	60		rts				rts
.a253					_GCBLowByte:
.a253	a5 25		lda $25				lda 	elementData
.a255	60		rts				rts
.a256					_GCBLowBytePlus1:
.a256	a5 25		lda $25				lda 	elementData
.a258	1a		inc a				inc 	a
.a259	f0 04		beq $a25f			beq 	_GCBSystem
.a25b	60		rts				rts
.a25c					_GCBHighByte:
.a25c	a5 26		lda $26				lda 	elementData+1
.a25e	60		rts				rts
.a25f					_GCBSystem:
.a25f	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a262	4c 45 41 4e 3a 57 4f 52				.text 	"LEAN:","WORD OFF PAGE",$00
>a26a	44 20 4f 46 46 20 50 41 47 45 00
.a275					GenCopyData:
.a275	48		pha				pha
.a276	da		phx				phx
.a277	5a		phy				phy
.a278	85 0a		sta $0a				sta 	zTemp0
.a27a	a2 fc		ldx #$fc			ldx 	#256-4
.a27c					_GCDLoop:
.a27c	e8		inx				inx 								; next slot
.a27d	e8		inx				inx
.a27e	e8		inx				inx
.a27f	e8		inx				inx
.a280	bd 80 06	lda $0680,x			lda 	valueBuffer,x 				; next in value buffer
.a283	c9 ff		cmp #$ff			cmp 	#$FF
.a285	f0 16		beq $a29d			beq 	_GCDError 					; system ?
.a287	c5 0a		cmp $0a				cmp 	zTemp0 						; match.
.a289	d0 f1		bne $a27c			bne 	_GCDLoop
.a28b	a0 00		ldy #$00			ldy 	#0 							; copy assoc data back
.a28d					_GCDCopy:
.a28d	bd 81 06	lda $0681,x			lda 	valueBuffer+1,x
.a290	99 25 00	sta $0025,y			sta 	elementData,y
.a293	e8		inx				inx
.a294	c8		iny				iny
.a295	c0 03		cpy #$03			cpy 	#3
.a297	d0 f4		bne $a28d			bne 	_GCDCopy
.a299	7a		ply				ply
.a29a	fa		plx				plx
.a29b	68		pla				pla
.a29c	60		rts				rts
.a29d					_GCDError:
.a29d	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a2a0	4c 45 41 4e 3a 53 59 53				.text 	"LEAN:","SYS0?",$00
>a2a8	30 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/extract.asm

.a2ab					EGetUnknownIdentifier:
.a2ab	a6 22		ldx $22				ldx 	genPos 						; get next character
.a2ad	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a2b0	29 7f		and #$7f			and 	#$7F
.a2b2	20 4b a1	jsr $a14b			jsr 	PLTCheckCharacter 			; is it an identifier ?
.a2b5	90 15		bcc $a2cc			bcc 	_EUIError 					; no
.a2b7	da		phx				phx 								; save start position on stack.
.a2b8					_EGetFindEnd:
.a2b8	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a2bb	e8		inx				inx
.a2bc	0a		asl a				asl 	a
.a2bd	90 f9		bcc $a2b8			bcc 	_EGetFindEnd
.a2bf	86 22		stx $22				stx 	genPos 						; points to the next thing.
.a2c1	68		pla				pla 								; offset
.a2c2	a0 06		ldy #$06			ldy 	#lineBuffer >> 8 			; make address in YX
.a2c4	18		clc				clc
.a2c5	69 40		adc #$40			adc 	#lineBuffer & $FF
.a2c7	aa		tax				tax
.a2c8	90 01		bcc $a2cb			bcc 	_EGetNoCarry
.a2ca	c8		iny				iny
.a2cb					_EGetNoCarry:
.a2cb	60		rts				rts
.a2cc					_EUIError:
.a2cc	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a2cf	4c 45 41 4e 3a 49 44 45				.text 	"LEAN:","IDENTIFIER ?",$00
>a2d7	4e 54 49 46 49 45 52 20 3f 00
.a2e1					EGetSyntaxCheck:
.a2e1	48		pha				pha
.a2e2	da		phx				phx
.a2e3	a6 22		ldx $22				ldx 	genPos 						; position of next
.a2e5	5d 40 06	eor $0640,x			eor 	lineBuffer,x 				; bits 0-6 will be zero if match
.a2e8	29 7f		and #$7f			and 	#$7F
.a2ea	d0 05		bne $a2f1			bne 	_EGSFail 					; different
.a2ec	e6 22		inc $22				inc 	genPos 						; skip it and exit
.a2ee	fa		plx				plx
.a2ef	68		pla				pla
.a2f0	60		rts				rts
.a2f1					_EGSFail:
.a2f1	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a2f4	4c 45 41 4e 3a 4d 49 53				.text 	"LEAN:","MISSING ?",$00
>a2fc	53 49 4e 47 20 3f 00
.a303					EGLookNext:
.a303	da		phx				phx
.a304	a6 22		ldx $22				ldx 	genPos 						; position of next
.a306	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a309	fa		plx				plx
.a30a	60		rts				rts
.a30b					EGSkipNext:
.a30b	e6 22		inc $22				inc 	genPos
.a30d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/create.asm

.a30e					DictionaryCreate:
.a30e	86 0a		stx $0a				stx 	zTemp0 						; save identifier position
.a310	84 0b		sty $0b				sty 	zTemp0+1
.a312	a0 01		ldy #$01			ldy 	#1 							; write the type byte out.
.a314	91 04		sta ($04),y			sta 	(dictPtr),y
.a316	a0 00		ldy #$00			ldy 	#0 							; work out length.
.a318					_DCGetLength:
.a318	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a31a	c8		iny				iny
.a31b	0a		asl a				asl 	a
.a31c	90 fa		bcc $a318			bcc 	_DCGetLength
.a31e	5a		phy				phy 								; save Y on stack.
.a31f	98		tya				tya 								; save length +6 as offset
.a320	18		clc				clc
.a321	69 06		adc #$06			adc 	#6
.a323	92 04		sta ($04)			sta 	(dictPtr)
.a325	a0 02		ldy #$02			ldy 	#2 							; fill 2 to 4 with $FF
.a327	a9 ff		lda #$ff	_DCFill:lda 	#$FF
.a329	91 04		sta ($04),y			sta 	(dictPtr),y
.a32b	c8		iny				iny
.a32c	c0 05		cpy #$05			cpy 	#5
.a32e	d0 f7		bne $a327			bne 	_DCFill
.a330	68		pla				pla 								; get length, store in X
.a331	aa		tax				tax
.a332	91 04		sta ($04),y			sta 	(dictPtr),y 				; write length out.
.a334	a0 00		ldy #$00			ldy 	#0
.a336					_DCCopy:
.a336	b1 0a		lda ($0a),y			lda 	(zTemp0),y 					; next identifier character
.a338	c8		iny				iny 								; save +1 on stack
.a339	5a		phy				phy
.a33a	c8		iny				iny 								; advance by 6 total
.a33b	c8		iny				iny
.a33c	c8		iny				iny
.a33d	c8		iny				iny
.a33e	c8		iny				iny
.a33f	91 04		sta ($04),y			sta 	(dictPtr),y 				; write out
.a341	7a		ply				ply 								; restore +1
.a342	ca		dex				dex
.a343	d0 f1		bne $a336			bne 	_DCCopy 					; do that the required# times.
.a345	a5 04		lda $04				lda 	dictPtr 					; copy last created
.a347	85 12		sta $12				sta 	lastCreate
.a349	a5 05		lda $05				lda 	dictPtr+1
.a34b	85 13		sta $13				sta 	lastCreate+1
.a34d	18		clc				clc 								; advance dictionary pointer
.a34e	b2 04		lda ($04)			lda 	(dictPtr)
.a350	65 04		adc $04				adc 	dictPtr
.a352	85 04		sta $04				sta 	dictPtr
.a354	90 02		bcc $a358			bcc 	_DCNoCarry
.a356	e6 05		inc $05				inc 	dictPtr+1
.a358					_DCNoCarry:
.a358	a9 00		lda #$00			lda 	#$00 						; write end of dictionary marker
.a35a	92 04		sta ($04)			sta 	(dictPtr)
.a35c	60		rts				rts
.a35d					DictionarySet:
.a35d	48		pha				pha
.a35e	da		phx				phx
.a35f	5a		phy				phy
.a360	5a		phy				phy 								; copy data out to
.a361	a0 04		ldy #$04			ldy 	#4 							; offset 2,3,4 => A X Y
.a363	91 12		sta ($12),y			sta 	(lastCreate),y
.a365	88		dey				dey
.a366	68		pla				pla
.a367	91 12		sta ($12),y			sta 	(lastCreate),y
.a369	88		dey				dey
.a36a	8a		txa				txa
.a36b	91 12		sta ($12),y			sta 	(lastCreate),y
.a36d	7a		ply				ply
.a36e	fa		plx				plx
.a36f	68		pla				pla
.a370	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/search.asm

.a371					DictionaryReset:
.a371	a9 00		lda #$00			lda 	#(UserDictionary) & $FF
.a373	85 04		sta $04				sta 	dictPtr
.a375	a9 b8		lda #$b8			lda 	#(UserDictionary) >> 8
.a377	85 05		sta $05				sta 	dictPtr+1
.a379	9c 00 b8	stz $b800			stz 	UserDictionary
.a37c	60		rts				rts
.a37d					DictionarySearchSystemOnly:
.a37d	38		sec				sec
.a37e	80 01		bra $a381			bra 	DictionarySearchContinue
.a380					DictionarySearch:
.a380	18		clc				clc
.a381					DictionarySearchContinue:
.a381	da		phx				phx
.a382	5a		phy				phy
.a383	08		php				php 								; CS if user only
.a384	8a		txa				txa 								; subtract 6 so can use offset Y
.a385	38		sec				sec
.a386	e9 06		sbc #$06			sbc 	#6
.a388	85 0a		sta $0a				sta 	zTemp0
.a38a	98		tya				tya
.a38b	e9 00		sbc #$00			sbc 	#0
.a38d	85 0b		sta $0b				sta 	zTemp0+1 					; in zTemp0
.a38f	28		plp				plp
.a390	b0 09		bcs $a39b			bcs 	_DSCOnly
.a392	a2 00		ldx #$00			ldx 	#UserDictionary & $FF
.a394	a0 b8		ldy #$b8			ldy 	#UserDictionary >> 8
.a396	20 a5 a3	jsr $a3a5			jsr 	DSSearch
.a399	b0 07		bcs $a3a2			bcs 	_DSCExit
.a39b					_DSCOnly:
.a39b	a2 2e		ldx #$2e			ldx 	#SystemDictionary & $FF
.a39d	a0 a9		ldy #$a9			ldy 	#SystemDictionary >> 8
.a39f	20 a5 a3	jsr $a3a5			jsr 	DSSearch
.a3a2					_DSCExit:
.a3a2	7a		ply				ply 								; restore YX
.a3a3	fa		plx				plx
.a3a4	60		rts				rts
.a3a5					DSSearch:
.a3a5	86 0c		stx $0c				stx 	zTemp1 						; save dictionary in zTemp1
.a3a7	84 0d		sty $0d				sty 	zTemp1+1
.a3a9					_DSLoop:
.a3a9	b2 0c		lda ($0c)			lda 	(zTemp1) 					; offset 0 ?
.a3ab	f0 36		beq $a3e3			beq 	_DSExit
.a3ad	a0 05		ldy #$05			ldy 	#5 							; get length in X
.a3af	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3b1	aa		tax				tax
.a3b2					_DSCompare:
.a3b2	c8		iny				iny 								; match next ?
.a3b3	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3b5	d1 0a		cmp ($0a),y			cmp 	(zTemp0),y
.a3b7	d0 1d		bne $a3d6			bne 	_DSNext
.a3b9	ca		dex				dex 								; done all
.a3ba	d0 f6		bne $a3b2			bne 	_DSCompare
.a3bc	a0 05		ldy #$05			ldy 	#5 							; copy bank/address
.a3be	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3c0	85 20		sta $20				sta 	dirLength
.a3c2	88		dey				dey
.a3c3	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3c5	85 1f		sta $1f				sta 	dirBank
.a3c7	88		dey				dey
.a3c8	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3ca	85 1e		sta $1e				sta 	dirHighByte
.a3cc	88		dey				dey
.a3cd	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3cf	85 1d		sta $1d				sta 	dirLowByte
.a3d1	88		dey				dey
.a3d2	b1 0c		lda ($0c),y			lda 	(zTemp1),y 					; return type
.a3d4	38		sec				sec
.a3d5	60		rts				rts
.a3d6					_DSNext:
.a3d6	18		clc				clc 								; advance to next.
.a3d7	b2 0c		lda ($0c)			lda 	(zTemp1)
.a3d9	65 0c		adc $0c				adc 	zTemp1
.a3db	85 0c		sta $0c				sta 	zTemp1
.a3dd	90 ca		bcc $a3a9			bcc 	_DSLoop
.a3df	e6 0d		inc $0d				inc 	zTemp1+1
.a3e1	80 c6		bra $a3a9			bra 	_DSLoop
.a3e3					_DSExit:
.a3e3	18		clc				clc
.a3e4	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/code.asm

.a3e5					CodeReset:
.a3e5	a2 00		ldx #$00			ldx 	#CodeMemory & 255
.a3e7	a0 bc		ldy #$bc			ldy 	#CodeMemory >> 8
.a3e9	a9 00		lda #$00			lda 	#0
.a3eb	80 00		bra $a3ed			bra 	CodeSetPointer
.a3ed					CodeSetPointer:
.a3ed	48		pha				pha 								; copy old to backup
.a3ee	a5 14		lda $14				lda 	codePtr
.a3f0	85 28		sta $28				sta 	codeBackup
.a3f2	a5 15		lda $15				lda 	codePtr+1
.a3f4	85 29		sta $29				sta 	codeBackup+1
.a3f6	a5 16		lda $16				lda 	codeBank
.a3f8	85 2a		sta $2a				sta 	codeBackup+2
.a3fa	68		pla				pla
.a3fb	85 16		sta $16				sta 	codeBank 					; update
.a3fd	86 14		stx $14				stx 	codePtr
.a3ff	84 15		sty $15				sty 	codePtr+1
.a401	60		rts				rts
.a402					CodeRestorePointer:
.a402	a5 28		lda $28				lda 	codeBackup
.a404	85 14		sta $14				sta 	codePtr
.a406	a5 29		lda $29				lda 	codeBackup+1
.a408	85 15		sta $15				sta 	codePtr+1
.a40a	a5 2a		lda $2a				lda 	codeBackup+2
.a40c	85 16		sta $16				sta 	codeBank
.a40e	60		rts				rts
.a40f					CodeWriteByte:
.a40f	92 14		sta ($14)			sta 	(codePtr)
.a411	e6 14		inc $14				inc 	codePtr
.a413	d0 02		bne $a417			bne 	_CWBNoCarry
.a415	e6 15		inc $15				inc 	codePtr+1
.a417					_CWBNoCarry:
.a417	60		rts				rts
.a418					CodeWriteBranch:
.a418	18		clc				clc 								; borrow 1 as branch is from one on
.a419	8a		txa				txa
.a41a	e5 14		sbc $14				sbc 	codePtr
.a41c	20 0f a4	jsr $a40f			jsr 	CodeWriteByte 				; compile anyway.
.a41f	aa		tax				tax 								; actual result in X.
.a420	98		tya				tya
.a421	e5 15		sbc $15				sbc 	codePtr+1
.a423	f0 14		beq $a439			beq 	_CWBCheckPositive 			; 00xx
.a425	c9 ff		cmp #$ff			cmp 	#$FF
.a427	f0 14		beq $a43d			beq 	_CWBCheckNegative 			; FFxx
.a429					_CWBError:
.a429	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a42c	4c 45 41 4e 3a 42 52 41				.text 	"LEAN:","BRANCH?",$00
>a434	4e 43 48 3f 00
.a439					_CWBCheckPositive:
.a439	8a		txa				txa
.a43a	30 ed		bmi $a429			bmi 	_CWBError
.a43c	60		rts				rts
.a43d					_CWBCheckNegative:
.a43d	8a		txa				txa
.a43e	10 e9		bpl $a429			bpl 	_CWBError
.a440	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/error.asm

.a441					SyntaxError:
.a441	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a444	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX",$00
>a44c	54 41 58 00
.a450					ErrorHandler:
.a450	fa		plx				plx 								; pull address off.
.a451	7a		ply				ply
.a452	e8		inx				inx 								; point to message
.a453	d0 01		bne $a456			bne 	_EHNoCarry
.a455	c8		iny				iny
.a456					_EHNoCarry:
.a456	20 9c a4	jsr $a49c			jsr 	PrintStringXY 				; print string at XY
.a459	a2 7c		ldx #$7c			ldx 	#_EHMessage & $FF 			; print " AT "
.a45b	a0 a4		ldy #$a4			ldy 	#_EHMessage >> 8
.a45d	20 9c a4	jsr $a49c			jsr 	PrintStringXY
.a460	a6 1a		ldx $1a				ldx 	lineNumber 					; convert line number
.a462	a4 1b		ldy $1b				ldy 	lineNumber+1
.a464	20 0e a7	jsr $a70e			jsr 	IntToString
.a467	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a469	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a46b	20 9c a4	jsr $a49c			jsr 	PrintStringXY
.a46e	64 18		stz $18				stz 	lastDefine 					; disable running by zeroing last defined
.a470	64 19		stz $19				stz 	lastDefine+1
.a472	a2 81		ldx #$81			ldx 	#_EHMessage2 & $FF 			; print " AT "
.a474	a0 a4		ldy #$a4			ldy 	#_EHMessage2 >> 8
.a476	20 9c a4	jsr $a49c			jsr 	PrintStringXY
.a479	4c 2a a0	jmp $a02a			jmp 	ReturnCaller 				; exit the compiler.
.a47c					_EHMessage:
>a47c	20 41 54 20 00					.text	" AT ",0
.a481					_EHMessage2:
>a481	0d 20 20 20 20 4c 45 41				.text 	13,"    LEAN V0.1 (27-OCT-19)",0
>a489	4e 20 56 30 2e 31 20 28 32 37 2d 4f 43 54 2d 31
>a499	39 29 00
.a49c					PrintStringXY:
.a49c	86 0a		stx $0a				stx 	zTemp0
.a49e	84 0b		sty $0b				sty 	zTemp0+1
.a4a0	a0 00		ldy #$00			ldy 	#0
.a4a2	b1 0a		lda ($0a),y	_PSLoop:lda 	(zTemp0),y
.a4a4	f0 06		beq $a4ac			beq 	_PSExit
.a4a6	20 ad a4	jsr $a4ad			jsr 	PrintCharacter
.a4a9	c8		iny				iny
.a4aa	80 f6		bra $a4a2			bra 	_PSLoop
.a4ac	60		rts		_PSExit:rts
.a4ad					PrintCharacter:
.a4ad	48		pha				pha
.a4ae	da		phx				phx
.a4af	5a		phy				phy
.a4b0	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a4b3	7a		ply				ply
.a4b4	fa		plx				plx
.a4b5	68		pla				pla
.a4b6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/procedure.asm

.a4b7					Action_Procedure_Def:
.a4b7	20 ab a2	jsr $a2ab			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a4ba	a9 50		lda #$50			lda 	#"P"
.a4bc	20 0e a3	jsr $a30e			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a4bf	a5 16		lda $16				lda 	codeBank 					; and assign it the current PC value.
.a4c1	a6 14		ldx $14				ldx 	codePtr
.a4c3	a4 15		ldy $15				ldy 	codePtr+1
.a4c5	86 18		stx $18				stx 	lastDefine 					; update last defined
.a4c7	84 19		sty $19				sty 	lastDefine+1
.a4c9	20 5d a3	jsr $a35d			jsr 	DictionarySet 				; set the dictionary values.
.a4cc	a9 28		lda #$28			lda 	#"("
.a4ce	20 e1 a2	jsr $a2e1			jsr 	EGetSyntaxCheck
.a4d1	a9 29		lda #$29			lda 	#")"
.a4d3	20 e1 a2	jsr $a2e1			jsr 	EGetSyntaxCheck
.a4d6	a9 50		lda #$50			lda 	#SCM_PROC 					; put a procedure marker on the stack.
.a4d8	20 06 a8	jsr $a806			jsr 	StackPush
.a4db	60		rts				rts
.a4dc					_APError:
.a4dc	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a4df	4c 45 41 4e 3a 50 52 4f				.text 	"LEAN:","PROCDEF",$00
>a4e7	43 44 45 46 00
.a4ec					Action_EndProc:
.a4ec	a9 50		lda #$50			lda 	#SCM_PROC 					; check corresponding PROC
.a4ee	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a4f1	a9 60		lda #$60			lda 	#CPU_RETURN					; write out RTS
.a4f3	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a4f6	a9 01		lda #$01			lda 	#1 							; remove from stack.
.a4f8	20 4f a8	jsr $a84f			jsr 	StackPopStack
.a4fb	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/call.asm

.a4fc					Action_Call:
.a4fc	a5 22		lda $22				lda 	genPos 						; get position
.a4fe	3a		dec a				dec 	a 							; point to the <proc>
.a4ff	48		pha				pha 								; save it
.a500	a9 28		lda #$28			lda 	#'('						; check (
.a502	20 e1 a2	jsr $a2e1			jsr 	EGetSyntaxCheck
.a505	20 03 a3	jsr $a303			jsr 	EGLookNext 					; ) next ?
.a508	c9 a9		cmp #$a9			cmp 	#')'+$80
.a50a	f0 1a		beq $a526			beq 	_ACNoParameters
.a50c	a9 52		lda #$52			lda 	#"R" 	 					; do R=<something>
.a50e	20 3f a5	jsr $a53f			jsr 	ACDoParameter 				; do the parameter.
.a511	20 0b a3	jsr $a30b			jsr 	EGSkipNext 					; skip the parameter
.a514	20 03 a3	jsr $a303			jsr 	EGLookNext 					; what follows
.a517	c9 ac		cmp #$ac			cmp 	#","+$80 					; if not comma
.a519	d0 0b		bne $a526			bne 	_ACNoParameters 			; should be end of parameters
.a51b	20 0b a3	jsr $a30b			jsr 	EGSkipNext 					; skip ,
.a51e	a9 59		lda #$59			lda 	#"Y"						; do Y=<something>
.a520	20 3f a5	jsr $a53f			jsr 	ACDoParameter 				; do the parameter.
.a523	20 0b a3	jsr $a30b			jsr 	EGSkipNext 					; skip parameter.
.a526					_ACNoParameters:
.a526	a9 29		lda #$29			lda 	#')' 						; check closing bracket.
.a528	20 e1 a2	jsr $a2e1			jsr 	EGetSyntaxCheck
.a52b	68		pla				pla 								; restore procedure posiion.
.a52c	20 75 a2	jsr $a275			jsr 	GenCopyData					; get the data
.a52f	a9 20		lda #$20			lda 	#CPU_JSR					; output a call to it.
.a531	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a534	a5 25		lda $25				lda 	elementData
.a536	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a539	a5 26		lda $26				lda 	elementData+1
.a53b	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a53e	60		rts				rts
.a53f					ACDoParameter:
.a53f	a6 22		ldx $22				ldx 	genPos 						; save position
.a541	da		phx				phx
.a542	48		pha				pha 								; save the target register
.a543	bd 40 06	lda $0640,x			lda 	lineBuffer,x 				; what is there ?
.a546	c9 e1		cmp #$e1			cmp 	#"a"+$80 					; check a-z
.a548	90 1a		bcc $a564			bcc 	_ADPError
.a54a	c9 fb		cmp #$fb			cmp 	#"z"+$81
.a54c	b0 16		bcs $a564			bcs 	_ADPError
.a54e	ca		dex				dex 								; write = before it
.a54f	a9 bd		lda #$bd			lda 	#"="+$80
.a551	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a554	ca		dex				dex
.a555	68		pla				pla 								; write Y/R before that
.a556	09 80		ora #$80			ora 	#$80
.a558	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a55b	86 22		stx $22				stx 	genPos 						; make genPos point to that.
.a55d	20 b9 a1	jsr $a1b9			jsr 	GenerateOne 				; generate that.
.a560	68		pla				pla 								; restore position
.a561	85 22		sta $22				sta 	genPos
.a563	60		rts				rts
.a564					_ADPError:
.a564	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a567	4c 45 41 4e 3a 50 41 52				.text 	"LEAN:","PARAMETER?",$00
>a56f	41 4d 45 54 45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/if.asm

.a577					Action_If:
.a577	a5 23		lda $23				lda 	generateVar 				; branch to use.
.a579	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a57b	20 0f a4	jsr $a40f			jsr 	CodeWriteByte 				; output it
.a57e	20 f6 a7	jsr $a7f6			jsr 	StackPushPC 				; push branch position on stack
.a581	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a583	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a586	a9 49		lda #$49			lda 	#SCM_IF 					; put if marker on the stack.
.a588	20 06 a8	jsr $a806			jsr 	StackPush
.a58b	60		rts				rts
.a58c					Action_Else:
.a58c	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a58e	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a591	a9 80		lda #$80			lda 	#CPU_BRA 					; compile branch
.a593	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a596	a5 14		lda $14				lda 	codePtr 					; push current position on the stack
.a598	48		pha				pha
.a599	a5 15		lda $15				lda 	codePtr+1
.a59b	48		pha				pha
.a59c	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a59e	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a5a1	20 bc a5	jsr $a5bc			jsr 	BackPatchIf 				; do the backpatch.
.a5a4	68		pla				pla 								; overwrite backpatch address
.a5a5	a0 01		ldy #$01			ldy 	#1 							; with stacked position.
.a5a7	91 02		sta ($02),y			sta 	(aStackPtr),y
.a5a9	68		pla				pla
.a5aa	c8		iny				iny
.a5ab	91 02		sta ($02),y			sta 	(aStackPtr),y
.a5ad	60		rts				rts
.a5ae					Action_Endif:
.a5ae	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a5b0	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a5b3	20 bc a5	jsr $a5bc			jsr 	BackPatchIf 				; do the backpatch.
.a5b6	a9 04		lda #$04			lda 	#3+1 						; throw the stack.
.a5b8	20 4f a8	jsr $a84f			jsr 	StackPopStack
.a5bb	60		rts				rts
.a5bc					BackPatchIf:
.a5bc	a5 14		lda $14					lda 	codePtr 					; save code pointer
.a5be	48		pha				pha
.a5bf	a5 15		lda $15				lda 	codePtr+1
.a5c1	48		pha				pha
.a5c2	a0 03		ldy #$03			ldy 	#3 							; AYX = address.
.a5c4	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5c6	48		pha				pha
.a5c7	88		dey				dey
.a5c8	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5ca	aa		tax				tax
.a5cb	88		dey				dey
.a5cc	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5ce	a8		tay				tay
.a5cf	68		pla				pla
.a5d0	20 ed a3	jsr $a3ed			jsr 	CodeSetPointer 				; set write position to that
.a5d3	7a		ply				ply 								; target address in YX
.a5d4	fa		plx				plx
.a5d5	20 18 a4	jsr $a418			jsr 	CodeWriteBranch 			; write the actual branch there
.a5d8	20 02 a4	jsr $a402			jsr 	CodeRestorePointer 			; undo the set pointer.
.a5db	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/repeat.asm

.a5dc					Action_Repeat:
.a5dc	20 f6 a7	jsr $a7f6			jsr 	StackPushPC 					; push loop position on stack
.a5df	a9 52		lda #$52			lda 	#SCM_REPEAT 					; put a repeat marker on the stack.
.a5e1	20 06 a8	jsr $a806			jsr 	StackPush
.a5e4	60		rts				rts
.a5e5					Action_Until:
.a5e5	a9 52		lda #$52			lda 	#SCM_REPEAT 				; check corresponding repeat
.a5e7	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a5ea	a5 23		lda $23				lda 	generateVar 				; branch to use.
.a5ec	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a5ee	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a5f0	20 3a a8	jsr $a83a			jsr 	StackCompileBranch 			; compile a branch.
.a5f3	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a5f5	20 4f a8	jsr $a84f			jsr 	StackPopStack
.a5f8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/for.asm

.a5f9					Action_AFor:
.a5f9	20 f6 a7	jsr $a7f6			jsr 	StackPushPC 					; push loop position on stack
.a5fc	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a5fe	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a601	a9 3a		lda #$3a			lda 	#CPU_DECA 						; counts backwards from n-1 to 0.
.a603	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a606	a9 46		lda #$46			lda 	#SCM_FOR 						; put a for marker on the stack.
.a608	20 06 a8	jsr $a806			jsr 	StackPush
.a60b	60		rts				rts
.a60c					Action_Next:
.a60c	a9 46		lda #$46			lda 	#SCM_FOR 					; check corresponding for
.a60e	20 22 a8	jsr $a822			jsr 	StackCheckStructureMarker
.a611	a9 68		lda #$68			lda 	#CPU_PLA 					; pop index off stack and decrement
.a613	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a616	a9 3a		lda #$3a			lda 	#CPU_DECA
.a618	20 0f a4	jsr $a40f			jsr 	CodeWriteByte
.a61b	a9 d0		lda #$d0			lda 	#CPU_BNE 					; branch back if #0
.a61d	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a61f	20 3a a8	jsr $a83a			jsr 	StackCompileBranch 			; compile a branch.
.a622	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a624	20 4f a8	jsr $a84f			jsr 	StackPopStack
.a627	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/variables.asm

.a628					VariableReset:
.a628	a9 00		lda #$00			lda 	#(VariableMemory) & $FF
.a62a	85 08		sta $08				sta 	varPtr
.a62c	a9 07		lda #$07			lda 	#(VariableMemory) >> 8
.a62e	85 09		sta $09				sta 	varPtr+1
.a630	60		rts				rts
.a631					Action_ByteVar:
.a631	a9 01		lda #$01			lda 	#1
.a633	80 02		bra $a637			bra 	VariableDeclare
.a635					Action_WordVar:
.a635	a9 02		lda #$02			lda 	#2
.a637					VariableDeclare:
.a637	85 2b		sta $2b				sta 	varSize 					; save variable size.
.a639					_VDLoop:
.a639	a9 53		lda #$53			lda 	#"S"						; get I or S
.a63b	a6 2b		ldx $2b				ldx 	varSize
.a63d	ca		dex				dex
.a63e	f0 02		beq $a642			beq 	_VDNotWord
.a640	a9 49		lda #$49			lda 	#"I"
.a642					_VDNotWord:
.a642	48		pha				pha
.a643	20 ab a2	jsr $a2ab			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a646	68		pla				pla
.a647	20 0e a3	jsr $a30e			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a64a	20 03 a3	jsr $a303			jsr 	EGLookNext 					; what's next ?
.a64d	c9 c0		cmp #$c0			cmp 	#'@'|$80 					; if not @, use default
.a64f	d0 21		bne $a672			bne 	_VDDefault
.a651	20 0b a3	jsr $a30b			jsr 	EGSkipNext 					; skip @
.a654	20 03 a3	jsr $a303			jsr 	EGLookNext 					; get next
.a657	c9 e2		cmp #$e2			cmp 	#'b'|$80 					; must be b/w constant
.a659	f0 04		beq $a65f			beq 	_VDLegit
.a65b	c9 f7		cmp #$f7			cmp 	#'w'|$80
.a65d	d0 34		bne $a693			bne 	_VDError
.a65f					_VDLegit:
.a65f	a5 22		lda $22				lda 	genPos 						; position
.a661	20 75 a2	jsr $a275			jsr 	GenCopyData					; access data
.a664	a9 00		lda #$00			lda 	#0 		 					; set the address
.a666	a6 25		ldx $25				ldx 	elementData
.a668	a4 26		ldy $26				ldy 	elementData+1
.a66a	20 5d a3	jsr $a35d			jsr 	DictionarySet
.a66d	20 0b a3	jsr $a30b			jsr 	EGSkipNext 					; consume the constant
.a670	80 14		bra $a686			bra 	_VDTryNext
.a672					_VDDefault:
.a672	a6 08		ldx $08				ldx 	varPtr 						; place at default position
.a674	a4 09		ldy $09				ldy 	varPtr+1
.a676	a9 00		lda #$00			lda 	#0
.a678	20 5d a3	jsr $a35d			jsr 	DictionarySet
.a67b	a5 2b		lda $2b				lda 	varSize 					; get count of bytes back
.a67d	18		clc				clc
.a67e	65 08		adc $08				adc 	varPtr
.a680	85 08		sta $08				sta 	varPtr
.a682	90 02		bcc $a686			bcc 	_VDNoCarry
.a684	e6 09		inc $09				inc 	varPtr+1
.a686					_VDNoCarry:
.a686					_VDTryNext:
.a686	20 03 a3	jsr $a303			jsr 	EGLookNext 					; what's next ?
.a689	c9 ac		cmp #$ac			cmp 	#","|$80 					; is it a comma
.a68b	d0 05		bne $a692			bne 	_VDExit 					; no, exit.
.a68d	20 0b a3	jsr $a30b			jsr 	EGSkipNext
.a690	80 a7		bra $a639			bra 	_VDLoop
.a692					_VDExit:
.a692	60		rts				rts
.a693					_VDError:
.a693	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a696	4c 45 41 4e 3a 41 44 44				.text 	"LEAN:","ADDRESS?",$00
>a69e	52 45 53 53 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/crunch.asm

.a6a4					Action_DictionaryCrunch:
.a6a4	a9 00		lda #$00			lda 	#(UserDictionary) & $FF
.a6a6	85 0a		sta $0a				sta 	zTemp0
.a6a8	a9 b8		lda #$b8			lda 	#(UserDictionary) >> 8
.a6aa	85 0b		sta $0b				sta 	zTemp0+1
.a6ac					_ADCLoop:
.a6ac	b2 0a		lda ($0a)			lda 	(zTemp0) 					; reached end of dictionary
.a6ae	f0 5d		beq $a70d			beq 	_ADCExit
.a6b0	a0 05		ldy #$05			ldy 	#5 							; length into X.
.a6b2	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a6b4	aa		tax				tax
.a6b5					_ADCCheck:
.a6b5	c8		iny				iny 								; get next.
.a6b6	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a6b8	29 7f		and #$7f			and 	#$7F 						; is it a '.' ?
.a6ba	c9 2e		cmp #$2e			cmp 	#'.'
.a6bc	f0 42		beq $a700			beq 	_ADCNext 					; if so, it's a global, skip to next.
.a6be	ca		dex				dex
.a6bf	d0 f4		bne $a6b5			bne 	_ADCCheck 					; checked the whole identifier.
.a6c1	a5 0a		lda $0a				lda 	zTemp0 						; work out copy from, into zTemp1
.a6c3	48		pha				pha
.a6c4	18		clc				clc
.a6c5	72 0a		adc ($0a)			adc 	(zTemp0)
.a6c7	85 0c		sta $0c				sta 	zTemp1
.a6c9	a5 0b		lda $0b				lda 	zTemp0+1
.a6cb	48		pha				pha
.a6cc	69 00		adc #$00			adc 	#0
.a6ce	85 0d		sta $0d				sta 	zTemp1+1
.a6d0					_ADCopyOverwrite:
.a6d0	b2 0c		lda ($0c)			lda 	(zTemp1) 					; byte copy
.a6d2	92 0a		sta ($0a)			sta 	(zTemp0)
.a6d4	e6 0a		inc $0a				inc 	zTemp0
.a6d6	d0 02		bne $a6da			bne 	_NoCarry
.a6d8	e6 0b		inc $0b				inc 	zTemp0+1
.a6da					_NoCarry:
.a6da	e6 0c		inc $0c				inc 	zTemp1
.a6dc	d0 02		bne $a6e0			bne 	_NoCarry
.a6de	e6 0d		inc $0d				inc 	zTemp1+1
.a6e0					_NoCarry:
.a6e0	a5 0c		lda $0c				lda 	zTemp1 						; until the upper address = dictionary top
.a6e2	c5 04		cmp $04				cmp 	dictPtr
.a6e4	d0 ea		bne $a6d0			bne 	_ADCopyOverwrite
.a6e6	a5 0d		lda $0d				lda 	zTemp1+1
.a6e8	c5 05		cmp $05				cmp 	dictPtr+1
.a6ea	d0 e4		bne $a6d0			bne 	_ADCopyOverwrite
.a6ec	a5 0a		lda $0a				lda 	zTemp0 						; copy from position is new top.
.a6ee	85 04		sta $04				sta 	dictPtr
.a6f0	a5 0b		lda $0b				lda 	zTemp0+1
.a6f2	85 05		sta $05				sta 	dictPtr+1
.a6f4	a9 00		lda #$00			lda 	#0							; mark end as not copied in loop
.a6f6	92 04		sta ($04)			sta 	(dictPtr)
.a6f8	68		pla				pla 								; restore original position.
.a6f9	85 0b		sta $0b				sta 	zTemp0+1
.a6fb	68		pla				pla
.a6fc	85 0a		sta $0a				sta 	zTemp0
.a6fe	80 ac		bra $a6ac			bra 	_ADCLoop 					; and continue from same position.
.a700					_ADCNext:
.a700	18		clc				clc 								; advance to next.
.a701	a5 0a		lda $0a				lda 	zTemp0
.a703	72 0a		adc ($0a)			adc 	(zTemp0)
.a705	85 0a		sta $0a				sta 	zTemp0
.a707	90 a3		bcc $a6ac			bcc 	_ADCLoop
.a709	e6 0b		inc $0b				inc 	zTemp0+1
.a70b	80 9f		bra $a6ac			bra 	_ADCLoop
.a70d					_ADCExit:
.a70d	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/tostring.asm

.a70e					IntToString:
.a70e	86 0a		stx $0a				stx 	zTemp0 						; count is in zTemp0
.a710	84 0b		sty $0b				sty 	zTemp0+1
.a712	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a714	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a716					_ITSLoop:
.a716	64 0c		stz $0c				stz 	zTemp1 						; this is the count of subtracts.
.a718					_ITSSubtractLoop:
.a718	38		sec				sec
.a719	a5 0a		lda $0a				lda 	zTemp0 						; try to calculate
.a71b	fd 51 a7	sbc $a751,x			sbc 	_ITSWords,x
.a71e	48		pha				pha
.a71f	a5 0b		lda $0b				lda 	zTemp0+1
.a721	fd 52 a7	sbc $a752,x			sbc 	_ITSWords+1,x
.a724	90 09		bcc $a72f			bcc 	_ITSEndSub 					; can't subtract any more.
.a726	85 0b		sta $0b				sta 	zTemp0+1 					; update zTemp
.a728	68		pla				pla
.a729	85 0a		sta $0a				sta 	zTemp0
.a72b	e6 0c		inc $0c				inc 	zTemp1 						; bump subtract count.
.a72d	80 e9		bra $a718			bra 	_ITSSubtractLoop
.a72f					_ITSEndSub:
.a72f	68		pla				pla 								; throw away the interim result
.a730	a5 0c		lda $0c				lda 	zTemp1 						; if the subtract count is non zero
.a732	d0 04		bne $a738			bne 	_ITSWriteOut 				; always write it out
.a734	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a736	f0 06		beq $a73e			beq 	_ITSNext 					; suppressing leading zeros.
.a738					_ITSWriteOut:
.a738	09 30		ora #$30			ora 	#48 						; output digit.
.a73a	99 40 06	sta $0640,y			sta 	lineBuffer,y
.a73d	c8		iny				iny
.a73e					_ITSNext:
.a73e	e8		inx				inx
.a73f	e8		inx				inx
.a740	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a742	d0 d2		bne $a716			bne 	_ITSLoop 					; do the new digits
.a744	a5 0a		lda $0a				lda 	zTemp0 						; output the last digit
.a746	09 30		ora #$30			ora 	#48
.a748	99 40 06	sta $0640,y			sta 	lineBuffer,y 				; make it ASCIIZ.
.a74b	a9 00		lda #$00			lda 	#0
.a74d	99 41 06	sta $0641,y			sta 	lineBuffer+1,y
.a750	60		rts				rts
.a751					_ITSWords:
>a751	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a759					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: utility/tointeger.asm

.a759					StringToInt:
.a759	86 10		stx $10				stx 	zTemp3 						; save string
.a75b	84 11		sty $11				sty 	zTemp3+1
.a75d	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a75f	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a761	b2 10		lda ($10)			lda 	(zTemp3) 					; first character
.a763	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a765	f0 1b		beq $a782			beq 	_STIConvert 				; convert from character 1, base 16.
.a767	88		dey				dey 								; from character 0
.a768	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a76a	c9 2d		cmp #$2d			cmp 	#"-"						; first char is unary minus ?
.a76c	d0 14		bne $a782			bne 	_STIConvert 				; no, convert as +ve decimal
.a76e	c8		iny				iny 								; skip the minus
.a76f	20 82 a7	jsr $a782			jsr 	_STIConvert 				; convert the unsigned part.
.a772	90 0d		bcc $a781			bcc 	_STIExit 					; failed
.a774	8a		txa				txa 								; 1's complement YX
.a775	49 ff		eor #$ff			eor 	#$FF
.a777	aa		tax				tax
.a778	98		tya				tya
.a779	49 ff		eor #$ff			eor 	#$FF
.a77b	a8		tay				tay
.a77c	e8		inx				inx 								; +1 to make it negative
.a77d	38		sec				sec
.a77e	d0 01		bne $a781			bne 	_STIExit
.a780	c8		iny				iny
.a781					_STIExit:
.a781	60		rts				rts
.a782					_STIConvert:
.a782	86 0c		stx $0c				stx 	zTemp1 						; save base in zTemp1
.a784	b1 10		lda ($10),y			lda 	(zTemp3),y 					; get first character
.a786	f0 5f		beq $a7e7			beq 	_STIFail 					; if zero, then it has failed anyway.
.a788	64 0a		stz $0a				stz 	zTemp0 						; clear the result.
.a78a	64 0b		stz $0b				stz 	zTemp0+1
.a78c					_STILoop:
.a78c	a5 0a		lda $0a				lda 	zTemp0 						; copy current to zTemp2
.a78e	85 0e		sta $0e				sta 	zTemp2
.a790	a5 0b		lda $0b				lda 	zTemp0+1
.a792	85 0f		sta $0f				sta 	zTemp2+1
.a794	64 0a		stz $0a				stz 	zTemp0 						; clear result
.a796	64 0b		stz $0b				stz 	zTemp0+1
.a798	a6 0c		ldx $0c				ldx 	zTemp1 						; X contains the base.
.a79a					_STIMultiply:
.a79a	8a		txa				txa 								; shift Y right into carry.
.a79b	4a		lsr a				lsr 	a
.a79c	aa		tax				tax
.a79d	90 0d		bcc $a7ac			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a79f	18		clc				clc
.a7a0	a5 0e		lda $0e				lda 	zTemp2 						; add zTemp2 into zTemp0
.a7a2	65 0a		adc $0a				adc 	zTemp0
.a7a4	85 0a		sta $0a				sta 	zTemp0
.a7a6	a5 0f		lda $0f				lda 	zTemp2+1
.a7a8	65 0b		adc $0b				adc 	zTemp0+1
.a7aa	85 0b		sta $0b				sta 	zTemp0+1
.a7ac					_STINoAdd:
.a7ac	06 0e		asl $0e				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a7ae	26 0f		rol $0f				rol 	zTemp2+1
.a7b0	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a7b2	d0 e6		bne $a79a			bne 	_STIMultiply
.a7b4	b1 10		lda ($10),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a7b6	29 7f		and #$7f			and 	#$7F 						; remove End of Token bit if set
.a7b8	c9 30		cmp #$30			cmp 	#"0"
.a7ba	90 2b		bcc $a7e7			bcc 	_STIFail
.a7bc	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7be	90 0b		bcc $a7cb			bcc 	_STIOkay
.a7c0	c9 41		cmp #$41			cmp 	#"A"
.a7c2	90 23		bcc $a7e7			bcc 	_STIFail
.a7c4	c9 47		cmp #$47			cmp 	#"F"+1
.a7c6	b0 1f		bcs $a7e7			bcs 	_STIFail
.a7c8	38		sec				sec 								; hex adjust
.a7c9	e9 07		sbc #$07			sbc 	#7
.a7cb					_STIOkay:
.a7cb	38		sec				sec
.a7cc	e9 30		sbc #$30			sbc 	#48
.a7ce	c5 0c		cmp $0c				cmp 	zTemp1  					; if >= base then fail.
.a7d0	b0 15		bcs $a7e7			bcs 	_STIFail
.a7d2	d8		cld				cld
.a7d3	65 0a		adc $0a				adc 	zTemp0 						; add into the current value
.a7d5	85 0a		sta $0a				sta 	zTemp0
.a7d7	90 02		bcc $a7db			bcc 	_STINoCarry
.a7d9	e6 0b		inc $0b				inc 	zTemp0+1
.a7db					_STINoCarry:
.a7db	b1 10		lda ($10),y			lda 	(zTemp3),y					; get character just done.
.a7dd	c8		iny				iny 								; point to next
.a7de	0a		asl a				asl 	a 							; shift bit 7 into carry
.a7df	90 ab		bcc $a78c			bcc 	_STILoop 					; not reached the end.
.a7e1	a6 0a		ldx $0a				ldx 	zTemp0 						; return result
.a7e3	a4 0b		ldy $0b				ldy 	zTemp0+1
.a7e5	38		sec				sec
.a7e6	60		rts				rts
.a7e7					_STIFail:
.a7e7	18		clc				clc
.a7e8	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/astack.asm

.a7e9					StackReset:
.a7e9	a9 3f		lda #$3f			lda 	#(assemblerStack) & $FF
.a7eb	85 02		sta $02				sta 	aStackPtr
.a7ed	a9 06		lda #$06			lda 	#(assemblerStack) >> 8
.a7ef	85 03		sta $03				sta 	aStackPtr+1
.a7f1	a9 2a		lda #$2a			lda 	#SCM_TOP
.a7f3	92 02		sta ($02)			sta 	(aStackPtr)
.a7f5	60		rts				rts
.a7f6					StackPushPC:
.a7f6	a5 16		lda $16				lda 	codeBank
.a7f8	20 06 a8	jsr $a806			jsr 	StackPush
.a7fb	a5 14		lda $14				lda 	codePtr
.a7fd	20 06 a8	jsr $a806			jsr 	StackPush
.a800	a5 15		lda $15				lda 	codePtr+1
.a802	20 06 a8	jsr $a806			jsr 	StackPush
.a805	60		rts				rts
.a806					StackPush:
.a806	c6 02		dec $02				dec 	aStackPtr 					; decrement TOS pointer.
.a808	f0 03		beq $a80d			beq 	_SPStack
.a80a	92 02		sta ($02)			sta 	(aStackPtr)					; write to new TOS
.a80c	60		rts				rts
.a80d					_SPStack:
.a80d	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a810	4c 45 41 4e 3a 52 45 54				.text 	"LEAN:","RETURN STACK",$00
>a818	55 52 4e 20 53 54 41 43 4b 00
.a822					StackCheckStructureMarker:
.a822	d2 02		cmp ($02)			cmp 	(aStackPtr)					; check if tos matches
.a824	d0 01		bne $a827			bne 	_SCSError
.a826	60		rts				rts
.a827					_SCSError:
.a827	20 50 a4	jsr $a450			jsr 	ErrorHandler
>a82a	4c 45 41 4e 3a 53 54 52				.text 	"LEAN:","STRUCTURES",$00
>a832	55 43 54 55 52 45 53 00
.a83a					StackCompileBranch:
.a83a	48		pha				pha
.a83b	da		phx				phx
.a83c	5a		phy				phy
.a83d	20 0f a4	jsr $a40f			jsr 	CodeWriteByte 				; write the opcode.
.a840	c8		iny				iny
.a841	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a843	aa		tax				tax
.a844	88		dey				dey
.a845	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a847	a8		tay				tay
.a848	20 18 a4	jsr $a418			jsr 	CodeWriteBranch 			; write a branch there.
.a84b	7a		ply				ply
.a84c	fa		plx				plx
.a84d	68		pla				pla
.a84e	60		rts				rts
.a84f					StackPopStack:
.a84f	18		clc				clc 								; return stack all in same page
.a850	65 02		adc $02				adc 	aStackPtr 					; so we don't carry out.
.a852	85 02		sta $02				sta 	aStackPtr
.a854	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/system.inc

.a855					L10000:
>a855	02					.byte L10000_END-L10000-1
.a856	85 63		sta $63			sta $63
.a858					L10000_END:
.a858					L10001:
>a858	02					.byte L10001_END-L10001-1
.a859	85 63		sta $63			sta $63
.a85b					L10001_END:
.a85b					L10002:
>a85b	02					.byte L10002_END-L10002-1
>a85c	a3 00					.byte $a3,$00
.a85e					L10002_END:
.a85e					L10003:
>a85e	06					.byte L10003_END-L10003-1
.a85f	8d 63 73	sta $7363		sta $7363
.a862	8e 83 73	stx $7383		stx $7383
.a865					L10003_END:
.a865					L10004:
>a865	04					.byte L10004_END-L10004-1
.a866	85 63		sta $63			sta $63
.a868	86 83		stx $83			stx $83
.a86a					L10004_END:
.a86a					L10005:
>a86a	03					.byte L10005_END-L10005-1
.a86b	8d 63 73	sta $7363		sta $7363
.a86e					L10005_END:
.a86e					L10006:
>a86e	03					.byte L10006_END-L10006-1
.a86f	8d 63 73	sta $7363		sta $7363
.a872					L10006_END:
.a872					L10007:
>a872	02					.byte L10007_END-L10007-1
.a873	a4 63		ldy $63			ldy  $63
.a875					L10007_END:
.a875					L10008:
>a875	03					.byte L10008_END-L10008-1
.a876	ac 63 73	ldy $7363		ldy  $7363
.a879					L10008_END:
.a879					L10009:
>a879	02					.byte L10009_END-L10009-1
.a87a	a0 63		ldy #$63		ldy  #$63
.a87c					L10009_END:
.a87c					L10010:
>a87c	02					.byte L10010_END-L10010-1
>a87d	a3 01					.byte $a3,$01
.a87f					L10010_END:
.a87f					L10011:
>a87f	02					.byte L10011_END-L10011-1
>a880	a3 02					.byte $a3,$02
.a882					L10011_END:
.a882					L10012:
>a882	02					.byte L10012_END-L10012-1
>a883	a3 03					.byte $a3,$03
.a885					L10012_END:
.a885					L10013:
>a885	02					.byte L10013_END-L10013-1
>a886	a3 04					.byte $a3,$04
.a888					L10013_END:
.a888					L10014:
>a888	04					.byte L10014_END-L10014-1
.a889	a9 63		lda #$63		lda  #$63
.a88b	a2 73		ldx #$73		ldx  #$73
.a88d					L10014_END:
.a88d					L10015:
>a88d	04					.byte L10015_END-L10015-1
.a88e	a5 63		lda $63			lda  $63
.a890	a2 00		ldx #$00		ldx  #0
.a892					L10015_END:
.a892					L10016:
>a892	06					.byte L10016_END-L10016-1
.a893	ad 63 73	lda $7363		lda  $7363
.a896	ae 83 73	ldx $7383		ldx  $7383
.a899					L10016_END:
.a899					L10017:
>a899	04					.byte L10017_END-L10017-1
.a89a	a5 63		lda $63			lda  $63
.a89c	a6 83		ldx $83			ldx  $83
.a89e					L10017_END:
.a89e					L10018:
>a89e	05					.byte L10018_END-L10018-1
.a89f	ad 63 73	lda $7363		lda  $7363
.a8a2	a2 00		ldx #$00		ldx  #0
.a8a4					L10018_END:
.a8a4					L10019:
>a8a4	04					.byte L10019_END-L10019-1
.a8a5	a9 63		lda #$63		lda  #$63
.a8a7	a2 73		ldx #$73		ldx  #$73
.a8a9					L10019_END:
.a8a9					L10020:
>a8a9	09					.byte L10020_END-L10020-1
.a8aa	18		clc			clc
.a8ab	69 63		adc #$63		adc #$63
.a8ad	48		pha			pha
.a8ae	8a		txa			txa
.a8af	69 73		adc #$73		adc #$73
.a8b1	aa		tax			tax
.a8b2	68		pla			pla
.a8b3					L10020_END:
.a8b3					L10021:
>a8b3	06					.byte L10021_END-L10021-1
.a8b4	18		clc			clc
.a8b5	65 63		adc $63			adc $63
.a8b7	90 01		bcc $a8ba		bcc *+3
.a8b9	e8		inx			inx
.a8ba					L10021_END:
.a8ba					L10022:
>a8ba	0b					.byte L10022_END-L10022-1
.a8bb	18		clc			clc
.a8bc	6d 63 73	adc $7363		adc $7363
.a8bf	48		pha			pha
.a8c0	8a		txa			txa
.a8c1	6d 83 73	adc $7383		adc $7383
.a8c4	aa		tax			tax
.a8c5	68		pla			pla
.a8c6					L10022_END:
.a8c6					L10023:
>a8c6	09					.byte L10023_END-L10023-1
.a8c7	18		clc			clc
.a8c8	65 63		adc $63			adc $63
.a8ca	48		pha			pha
.a8cb	8a		txa			txa
.a8cc	65 83		adc $83			adc $83
.a8ce	aa		tax			tax
.a8cf	68		pla			pla
.a8d0					L10023_END:
.a8d0					L10024:
>a8d0	07					.byte L10024_END-L10024-1
.a8d1	18		clc			clc
.a8d2	6d 63 73	adc $7363		adc $7363
.a8d5	90 01		bcc $a8d8		bcc *+3
.a8d7	e8		inx			inx
.a8d8					L10024_END:
.a8d8					L10025:
>a8d8	06					.byte L10025_END-L10025-1
.a8d9	18		clc			clc
.a8da	69 63		adc #$63		adc #$63
.a8dc	90 01		bcc $a8df		bcc *+3
.a8de	e8		inx			inx
.a8df					L10025_END:
.a8df					L10026:
>a8df	05					.byte L10026_END-L10026-1
.a8e0	e0 00		cpx #$00		cpx #0
>a8e2	93					.byte $93
.a8e3	10 fe		bpl $a8e3		bpl *
.a8e5					L10026_END:
.a8e5					L10027:
>a8e5	02					.byte L10027_END-L10027-1
>a8e6	a3 05					.byte $a3,$05
.a8e8					L10027_END:
.a8e8					L10028:
>a8e8	02					.byte L10028_END-L10028-1
>a8e9	a3 06					.byte $a3,$06
.a8eb					L10028_END:
.a8eb					L10029:
>a8eb	02					.byte L10029_END-L10029-1
>a8ec	a3 07					.byte $a3,$07
.a8ee					L10029_END:
.a8ee					L10030:
>a8ee	02					.byte L10030_END-L10030-1
>a8ef	a3 08					.byte $a3,$08
.a8f1					L10030_END:
.a8f1					L10031:
>a8f1	02					.byte L10031_END-L10031-1
>a8f2	a3 09					.byte $a3,$09
.a8f4					L10031_END:
.a8f4					L10032:
>a8f4	02					.byte L10032_END-L10032-1
>a8f5	a3 0a					.byte $a3,$0a
.a8f7					L10032_END:
.a8f7					L10033:
>a8f7	02					.byte L10033_END-L10033-1
>a8f8	a3 0b					.byte $a3,$0b
.a8fa					L10033_END:
.a8fa					L10034:
>a8fa	02					.byte L10034_END-L10034-1
.a8fb	a5 63		lda $63			lda  $63
.a8fd					L10034_END:
.a8fd					L10035:
>a8fd	03					.byte L10035_END-L10035-1
.a8fe	ad 63 73	lda $7363		lda  $7363
.a901					L10035_END:
.a901					L10036:
>a901	02					.byte L10036_END-L10036-1
.a902	a9 63		lda #$63		lda  #$63
.a904					L10036_END:
.a904					L10037:
>a904	02					.byte L10037_END-L10037-1
>a905	a3 0c					.byte $a3,$0c
.a907					L10037_END:
.a907					L10038:
>a907	03					.byte L10038_END-L10038-1
.a908	18		clc			clc
.a909	65 63		adc $63			adc $63
.a90b					L10038_END:
.a90b					L10039:
>a90b	04					.byte L10039_END-L10039-1
.a90c	18		clc			clc
.a90d	6d 63 73	adc $7363		adc $7363
.a910					L10039_END:
.a910					L10040:
>a910	03					.byte L10040_END-L10040-1
.a911	18		clc			clc
.a912	69 63		adc #$63		adc# $63
.a914					L10040_END:
.a914					ExecutableVectorTable:
>a914	fc a4					.word Action_call                      ; 0
>a916	35 a6					.word Action_wordvar                   ; 1
>a918	e5 a5					.word Action_until                     ; 2
>a91a	dc a5					.word Action_repeat                    ; 3
>a91c	a4 a6					.word Action_dictionarycrunch          ; 4
>a91e	b7 a4					.word Action_procedure_def             ; 5
>a920	0c a6					.word Action_next                      ; 6
>a922	77 a5					.word Action_if                        ; 7
>a924	ec a4					.word Action_endproc                   ; 8
>a926	ae a5					.word Action_endif                     ; 9
>a928	8c a5					.word Action_else                      ; 10
>a92a	31 a6					.word Action_bytevar                   ; 11
>a92c	f9 a5					.word Action_afor                      ; 12
.a92e					SystemDictionary:
>a92e	09					.byte	9
>a92f	4d					.byte	'M'
>a930	55 a8					.word	L10000
>a932	00					.byte	0
>a933	03					.byte	3
>a934	f3 bd d2				.byte	$f3,$bd,$d2
>a937	09					.byte	9
>a938	4d					.byte	'M'
>a939	58 a8					.word	L10001
>a93b	00					.byte	0
>a93c	03					.byte	3
>a93d	f3 bd c1				.byte	$f3,$bd,$c1
>a940	07					.byte	7
>a941	4d					.byte	'M'
>a942	5b a8					.word	L10002
>a944	00					.byte	0
>a945	01					.byte	1
>a946	f0					.byte	$f0
>a947	09					.byte	9
>a948	4d					.byte	'M'
>a949	5e a8					.word	L10003
>a94b	00					.byte	0
>a94c	03					.byte	3
>a94d	ec bd d2				.byte	$ec,$bd,$d2
>a950	09					.byte	9
>a951	4d					.byte	'M'
>a952	65 a8					.word	L10004
>a954	00					.byte	0
>a955	03					.byte	3
>a956	e9 bd d2				.byte	$e9,$bd,$d2
>a959	09					.byte	9
>a95a	4d					.byte	'M'
>a95b	6a a8					.word	L10005
>a95d	00					.byte	0
>a95e	03					.byte	3
>a95f	e3 bd d2				.byte	$e3,$bd,$d2
>a962	09					.byte	9
>a963	4d					.byte	'M'
>a964	6e a8					.word	L10006
>a966	00					.byte	0
>a967	03					.byte	3
>a968	e3 bd c1				.byte	$e3,$bd,$c1
>a96b	09					.byte	9
>a96c	4d					.byte	'M'
>a96d	72 a8					.word	L10007
>a96f	00					.byte	0
>a970	03					.byte	3
>a971	d9 bd f3				.byte	$d9,$bd,$f3
>a974	09					.byte	9
>a975	4d					.byte	'M'
>a976	75 a8					.word	L10008
>a978	00					.byte	0
>a979	03					.byte	3
>a97a	d9 bd e3				.byte	$d9,$bd,$e3
>a97d	09					.byte	9
>a97e	4d					.byte	'M'
>a97f	79 a8					.word	L10009
>a981	00					.byte	0
>a982	03					.byte	3
>a983	d9 bd e2				.byte	$d9,$bd,$e2
>a986	0a					.byte	10
>a987	4d					.byte	'M'
>a988	7c a8					.word	L10010
>a98a	00					.byte	0
>a98b	04					.byte	4
>a98c	57 4f 52 c4				.byte	$57,$4f,$52,$c4
>a990	0b					.byte	11
>a991	4d					.byte	'M'
>a992	7f a8					.word	L10011
>a994	00					.byte	0
>a995	05					.byte	5
>a996	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
>a99b	0c					.byte	12
>a99c	4d					.byte	'M'
>a99d	82 a8					.word	L10012
>a99f	00					.byte	0
>a9a0	06					.byte	6
>a9a1	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
>a9a7	13					.byte	19
>a9a8	4d					.byte	'M'
>a9a9	85 a8					.word	L10013
>a9ab	00					.byte	0
>a9ac	0d					.byte	13
>a9ad	52 45 4d 4f 56 45 2e 4c			.byte	$52,$45,$4d,$4f,$56,$45,$2e,$4c,$4f,$43,$41,$4c,$d3
>a9b5	4f 43 41 4c d3
>a9ba	09					.byte	9
>a9bb	4d					.byte	'M'
>a9bc	88 a8					.word	L10014
>a9be	00					.byte	0
>a9bf	03					.byte	3
>a9c0	d2 bd f7				.byte	$d2,$bd,$f7
>a9c3	09					.byte	9
>a9c4	4d					.byte	'M'
>a9c5	8d a8					.word	L10015
>a9c7	00					.byte	0
>a9c8	03					.byte	3
>a9c9	d2 bd f3				.byte	$d2,$bd,$f3
>a9cc	09					.byte	9
>a9cd	4d					.byte	'M'
>a9ce	92 a8					.word	L10016
>a9d0	00					.byte	0
>a9d1	03					.byte	3
>a9d2	d2 bd ec				.byte	$d2,$bd,$ec
>a9d5	09					.byte	9
>a9d6	4d					.byte	'M'
>a9d7	99 a8					.word	L10017
>a9d9	00					.byte	0
>a9da	03					.byte	3
>a9db	d2 bd e9				.byte	$d2,$bd,$e9
>a9de	09					.byte	9
>a9df	4d					.byte	'M'
>a9e0	9e a8					.word	L10018
>a9e2	00					.byte	0
>a9e3	03					.byte	3
>a9e4	d2 bd e3				.byte	$d2,$bd,$e3
>a9e7	09					.byte	9
>a9e8	4d					.byte	'M'
>a9e9	a4 a8					.word	L10019
>a9eb	00					.byte	0
>a9ec	03					.byte	3
>a9ed	d2 bd e2				.byte	$d2,$bd,$e2
>a9f0	09					.byte	9
>a9f1	4d					.byte	'M'
>a9f2	a9 a8					.word	L10020
>a9f4	00					.byte	0
>a9f5	03					.byte	3
>a9f6	d2 ab f7				.byte	$d2,$ab,$f7
>a9f9	09					.byte	9
>a9fa	4d					.byte	'M'
>a9fb	b3 a8					.word	L10021
>a9fd	00					.byte	0
>a9fe	03					.byte	3
>a9ff	d2 ab f3				.byte	$d2,$ab,$f3
>aa02	09					.byte	9
>aa03	4d					.byte	'M'
>aa04	ba a8					.word	L10022
>aa06	00					.byte	0
>aa07	03					.byte	3
>aa08	d2 ab ec				.byte	$d2,$ab,$ec
>aa0b	09					.byte	9
>aa0c	4d					.byte	'M'
>aa0d	c6 a8					.word	L10023
>aa0f	00					.byte	0
>aa10	03					.byte	3
>aa11	d2 ab e9				.byte	$d2,$ab,$e9
>aa14	09					.byte	9
>aa15	4d					.byte	'M'
>aa16	d0 a8					.word	L10024
>aa18	00					.byte	0
>aa19	03					.byte	3
>aa1a	d2 ab e3				.byte	$d2,$ab,$e3
>aa1d	09					.byte	9
>aa1e	4d					.byte	'M'
>aa1f	d8 a8					.word	L10025
>aa21	00					.byte	0
>aa22	03					.byte	3
>aa23	d2 ab e2				.byte	$d2,$ab,$e2
>aa26	09					.byte	9
>aa27	4d					.byte	'M'
>aa28	df a8					.word	L10026
>aa2a	00					.byte	0
>aa2b	03					.byte	3
>aa2c	d2 ab bf				.byte	$d2,$ab,$bf
>aa2f	0a					.byte	10
>aa30	4d					.byte	'M'
>aa31	e5 a8					.word	L10027
>aa33	00					.byte	0
>aa34	04					.byte	4
>aa35	50 52 4f c3				.byte	$50,$52,$4f,$c3
>aa39	0a					.byte	10
>aa3a	4d					.byte	'M'
>aa3b	e8 a8					.word	L10028
>aa3d	00					.byte	0
>aa3e	04					.byte	4
>aa3f	4e 45 58 d4				.byte	$4e,$45,$58,$d4
>aa43	08					.byte	8
>aa44	4d					.byte	'M'
>aa45	eb a8					.word	L10029
>aa47	00					.byte	0
>aa48	02					.byte	2
>aa49	49 c6					.byte	$49,$c6
>aa4b	0d					.byte	13
>aa4c	4d					.byte	'M'
>aa4d	ee a8					.word	L10030
>aa4f	00					.byte	0
>aa50	07					.byte	7
>aa51	45 4e 44 50 52 4f c3			.byte	$45,$4e,$44,$50,$52,$4f,$c3
>aa58	0b					.byte	11
>aa59	4d					.byte	'M'
>aa5a	f1 a8					.word	L10031
>aa5c	00					.byte	0
>aa5d	05					.byte	5
>aa5e	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
>aa63	0a					.byte	10
>aa64	4d					.byte	'M'
>aa65	f4 a8					.word	L10032
>aa67	00					.byte	0
>aa68	04					.byte	4
>aa69	45 4c 53 c5				.byte	$45,$4c,$53,$c5
>aa6d	0a					.byte	10
>aa6e	4d					.byte	'M'
>aa6f	f7 a8					.word	L10033
>aa71	00					.byte	0
>aa72	04					.byte	4
>aa73	42 59 54 c5				.byte	$42,$59,$54,$c5
>aa77	09					.byte	9
>aa78	4d					.byte	'M'
>aa79	fa a8					.word	L10034
>aa7b	00					.byte	0
>aa7c	03					.byte	3
>aa7d	c1 bd f3				.byte	$c1,$bd,$f3
>aa80	09					.byte	9
>aa81	4d					.byte	'M'
>aa82	fd a8					.word	L10035
>aa84	00					.byte	0
>aa85	03					.byte	3
>aa86	c1 bd e3				.byte	$c1,$bd,$e3
>aa89	09					.byte	9
>aa8a	4d					.byte	'M'
>aa8b	01 a9					.word	L10036
>aa8d	00					.byte	0
>aa8e	03					.byte	3
>aa8f	c1 bd e2				.byte	$c1,$bd,$e2
>aa92	0b					.byte	11
>aa93	4d					.byte	'M'
>aa94	04 a9					.word	L10037
>aa96	00					.byte	0
>aa97	05					.byte	5
>aa98	41 2e 46 4f d2				.byte	$41,$2e,$46,$4f,$d2
>aa9d	09					.byte	9
>aa9e	4d					.byte	'M'
>aa9f	07 a9					.word	L10038
>aaa1	00					.byte	0
>aaa2	03					.byte	3
>aaa3	c1 ab f3				.byte	$c1,$ab,$f3
>aaa6	09					.byte	9
>aaa7	4d					.byte	'M'
>aaa8	0b a9					.word	L10039
>aaaa	00					.byte	0
>aaab	03					.byte	3
>aaac	c1 ab e3				.byte	$c1,$ab,$e3
>aaaf	09					.byte	9
>aab0	4d					.byte	'M'
>aab1	10 a9					.word	L10040
>aab3	00					.byte	0
>aab4	03					.byte	3
>aab5	c1 ab e2				.byte	$c1,$ab,$e2
>aab8	00					.byte	$00

;******  Return to file: main.asm


;******  Processing file: utility/loadcode.asm

.aab9					LoadBasicCode:
.aab9	a9 e8		lda #$e8			lda 	#(LBCTest) & $FF
.aabb	85 0a		sta $0a				sta 	zTemp0
.aabd	a9 aa		lda #$aa			lda 	#(LBCTest) >> 8
.aabf	85 0b		sta $0b				sta 	zTemp0+1
.aac1	a9 01		lda #$01			lda 	#($801) & $FF
.aac3	85 0c		sta $0c				sta 	zTemp1
.aac5	a9 08		lda #$08			lda 	#($801) >> 8
.aac7	85 0d		sta $0d				sta 	zTemp1+1
.aac9					_LBCCopy:
.aac9	a0 02		ldy #$02			ldy 	#2							; skip over the loading address
.aacb	b1 0a		lda ($0a),y			lda 	(zTemp0),y 					; skips first two bytes :)
.aacd	92 0c		sta ($0c)			sta 	(zTemp1)
.aacf	e6 0a		inc $0a				inc 	zTemp0
.aad1	d0 02		bne $aad5			bne 	_NoCarry
.aad3	e6 0b		inc $0b				inc 	zTemp0+1
.aad5					_NoCarry:
.aad5	e6 0c		inc $0c				inc 	zTemp1
.aad7	d0 02		bne $aadb			bne 	_NoCarry
.aad9	e6 0d		inc $0d				inc 	zTemp1+1
.aadb					_NoCarry:
.aadb	a5 0a		lda $0a				lda 	zTemp0
.aadd	c9 ad		cmp #$ad			cmp 	#LBCTestEnd & $FF
.aadf	d0 e8		bne $aac9			bne 	_LBCCopy
.aae1	a5 0b		lda $0b				lda 	zTemp0+1
.aae3	c9 ab		cmp #$ab			cmp 	#LBCTestEnd >> 8
.aae5	d0 e2		bne $aac9			bne 	_LBCCopy
.aae7	60		rts				rts
.aae8					LBCTest:
>aae8	01 08 0c 08 e8 03 99 c7				.binary 	"../generated/test.prg"
>aaf0	28 31 34 29 00 17 08 f2 03 9e 34 30 39 36 30 00
>ab00	2c 08 fc 03 8f 2e 20 57 4f 52 44 20 42 44 40 24
>ab10	37 46 32 33 00 41 08 06 04 8f 2e 20 42 59 54 45
>ab20	20 42 42 40 24 37 46 30 39 00 59 08 10 04 8f 2e
>ab30	20 50 52 4f 43 20 44 4f 2e 53 55 4d 4d 41 54 28
>ab40	29 00 6c 08 1a 04 8f 2e 20 41 20 3d 20 30 20 52
>ab50	20 3d 20 30 00 7a 08 24 04 8f 2e 20 59 20 3d 20
>ab60	34 32 00 89 08 2e 04 8f 2e 20 45 4e 44 50 52 4f
>ab70	43 00 9c 08 38 04 8f 2e 20 50 52 4f 43 20 4d 41
>ab80	49 4e 28 29 00 b3 08 42 04 8f 2e 20 44 4f 2e 53
>ab90	55 4d 4d 41 54 28 31 2c 42 42 29 00 c2 08 4c 04
>aba0	8f 2e 20 45 4e 44 50 52 4f 43 00 00 00
.abad					LBCTestEnd:

;******  Return to file: main.asm

.abad					EndCode:

;******  End of listing
