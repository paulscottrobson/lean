
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -Wall -q -c -o lean.prg -L lean.lst main.asm
; Mon Oct 28 16:17:58 2019

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: main.asm


;******  Processing file: data.asm

=$0801					ProgramStart = $0801 						; where source code starts.
=$b800					UserDictionary = $B800 						; user dictionary
=$bc00					CodeMemory = $BC00 							; where object code goes.
=$063f					AssemblerStack = $063F 						; compiler stack space.
=$0700					VariableMemory = $0700
=64					LINEBUFFSIZE = 64
=128					VALBUFFSIZE = 128
=$0640					lineBuffer = $0640	 						; current line, match encoded.
=$0680					valueBuffer = $0680 						; buffer for associated values.
>0000					scanPtr:	.word ?							; BASIC scan position.
>0002					aStackPtr:	.word ? 						; compiler stack.
>0004					dictPtr:	.word ? 						; dictionary pointer
>0006					genPtr:		.word ? 						; code generation pointer
>0008					varPtr: 	.word ?							; next free variable pointer.
>000a					zTemp0:		.word ? 						; temps.
>000c					zTemp1:		.word ?
>000e					zTemp2:		.word ?
>0010					zTemp3:		.word ?
>0012					lastCreate:	.word ? 						; last created dictionary word
>0014					codePtr:	.word ? 						; code pointer
>0016					codeBank:	.byte ?							; code bank
>0017					originalSP:			.byte ? 				; 6502 stack on entry.
>0018					lastDefine:			.word ? 				; last defined word.
>001a					lineNumber:			.word ? 				; current line number
>001c					identStart:			.byte ? 				; start offset of current identifier
>001d					dirLowByte:			.byte ?					; values returned from search
>001e					dirHighByte:		.byte ?
>001f					dirBank:			.byte ?
>0020					dirLength:			.byte ?
>0021					valueBufferPos:		.byte ? 				; position in value buffer.
>0022					genPos: 			.byte ? 				; position in line buffer, generation.
>0023					generateVar:		.word ? 				; variables used in set value
>0025					elementData:		.fill 3 				; data from matched constant/identifier
>0028					codeBackup:			.fill 3 				; backup code pointer.
>002b					varSize:			.byte ? 				; size of current variable.
=$8f					REM_TOKEN = $8F 							; C64 REM Token
="*"					SCM_TOP = '*'								; top of stack marker.
="P"					SCM_PROC = 'P'								; procedure marker
="R"					SCM_REPEAT = 'R'							; repeat marker
="F"					SCM_FOR = 'F' 								; for marker
="I"					SCM_IF = 'I'								; if/else/endif marker.
=$60					CPU_RETURN = $60 							; RTS opcode.
=$48					CPU_PHA = $48 								; PHA
=$68					CPU_PLA = $68 								; PLA
=$3a					CPU_DECA = $3A 								; DEC A
=$d0					CPU_BNE = $D0								; BNE
=$80					CPU_BRA = $80								; BRA
=$20					CPU_JSR = $20 								; JSR

;******  Return to file: main.asm


;******  Processing file: generated/cgconst.inc

=$53					CGEN_C_ISZERO = $53
=$63					CGEN_C_LOW = $63
=$73					CGEN_C_HIGH = $73
=$83					CGEN_C_LOWPLUS1 = $83
=$93					CGEN_C_SETDATA = $93
=$a3					CGEN_C_EXEC = $a3

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.a000	ba		tsx				tsx 									; save SP
.a001	86 17		stx $17				stx 	originalSP
.a003	20 df aa	jsr $aadf			jsr 	LoadBasicCode
.a006	20 0d a8	jsr $a80d			jsr 	StackReset 						; reset convert stack.
.a009	20 4c a6	jsr $a64c			jsr 	VariableReset 					; reset variable memory.
.a00c	20 95 a3	jsr $a395			jsr 	DictionaryReset 				; reset user dictionary
.a00f	20 09 a4	jsr $a409			jsr 	CodeReset 						; reset code output.
.a012	20 3d a0	jsr $a03d			jsr 	ScannerReset 					; reset scanner
.a015					AsmLoop:
.a015	20 40 a0	jsr $a040			jsr 	ScannerFind 					; next thing in code
.a018	90 08		bcc $a022			bcc 	AsmEnd 							; nothing more
.a01a	20 82 a0	jsr $a082			jsr 	ProcessLineToBuffer 			; convert it.
.a01d	20 ce a1	jsr $a1ce			jsr 	GeneratorSearch 				; check it for generators
.a020	80 f3		bra $a015			bra 	AsmLoop 						; and keep going.
.a022					AsmEnd:
.a022	a9 2a		lda #$2a			lda 	#SCM_TOP 						; check structures are done
.a024	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a027	20 2e a0	jsr $a02e			jsr 	CallCodeMemory
.a02a					ReturnCaller:
.a02a	a6 17		ldx $17				ldx		originalSP 						; restore XP and exit.
.a02c	9a		txs				txs
.a02d	60		rts				rts
.a02e					CallCodeMemory:
.a02e	a5 18		lda $18				lda 	lastDefine
.a030	05 19		ora $19				ora 	lastDefine+1
.a032	f0 08		beq $a03c			beq 	_NoExecute
.a034	a5 14		lda $14				lda 	codePtr							; pass in byte after code.
.a036	a6 15		ldx $15				ldx 	codePtr+1
>a038	ff						.byte 	$FF
.a039	6c 18 00	jmp ($0018)			jmp 	(lastDefine)					; call last definition.
.a03c					_NoExecute:
.a03c	60		rts				rts

;******  Processing file: lean/scanner.asm

.a03d					ScannerReset:
.a03d	64 01		stz $01				stz 	scanPtr+1 					; zero MSB means the start
.a03f	60		rts				rts
.a040					ScannerFind:
.a040	48		pha				pha 								; save registers
.a041	da		phx				phx
.a042	5a		phy				phy
.a043	a5 01		lda $01				lda 	scanPtr+1 					; reset the scanner pointer ?
.a045	d0 0a		bne $a051			bne 	_SFScanForward 				; no, scan forward from current.
.a047	a9 01		lda #$01			lda 	#(ProgramStart) & $FF
.a049	85 00		sta $00				sta 	scanPtr
.a04b	a9 08		lda #$08			lda 	#(ProgramStart) >> 8
.a04d	85 01		sta $01				sta 	scanPtr+1
.a04f	80 12		bra $a063			bra 	_SFCheck 					; check if this one is a REM.
.a051					_SFScanForward:
.a051	a0 01		ldy #$01			ldy 	#1 							; check if the offset is zero
.a053	b2 00		lda ($00)			lda 	(scanPtr)
.a055	11 00		ora ($00),y			ora 	(scanPtr),y
.a057	18		clc				clc 								; if so exit with CC.
.a058	f0 24		beq $a07e			beq 	_SFExit
.a05a	b2 00		lda ($00)			lda 	(scanPtr) 					; forward to next.
.a05c	aa		tax				tax
.a05d	b1 00		lda ($00),y			lda 	(scanPtr),y
.a05f	86 00		stx $00				stx 	scanPtr
.a061	85 01		sta $01				sta 	scanPtr+1
.a063					_SFCheck:
.a063	a0 02		ldy #$02			ldy 	#2 								; copy line number.
.a065	b1 00		lda ($00),y			lda 	(scanPtr),y
.a067	85 1a		sta $1a				sta 	lineNumber
.a069	c8		iny				iny
.a06a	b1 00		lda ($00),y			lda 	(scanPtr),y
.a06c	85 1b		sta $1b				sta 	lineNumber+1
.a06e	c8		iny				iny
.a06f	b1 00		lda ($00),y			lda 	(scanPtr),y 				; is it a "REM." line ?
.a071	c9 8f		cmp #$8f			cmp 	#REM_TOKEN
.a073	d0 dc		bne $a051			bne 	_SFScanForward
.a075	c8		iny				iny
.a076	b1 00		lda ($00),y			lda 	(scanPtr),y 				; is it followed by a '.'
.a078	c8		iny				iny
.a079	c9 2e		cmp #$2e			cmp 	#"."
.a07b	d0 d4		bne $a051			bne 	_SFScanForward
.a07d	38		sec				sec 								; found something, exit with CS.
.a07e					_SFExit:
.a07e	7a		ply				ply 								; load registers and exit.
.a07f	fa		plx				plx
.a080	68		pla				pla
.a081	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: lean/process.asm

.a082					ProcessLineToBuffer:
.a082	a0 06		ldy #$06			ldy 	#6 							; position in line
.a084	a2 00		ldx #$00			ldx 	#0 							; position in buffer
.a086	64 21		stz $21				stz 	valueBufferPos 				; reset value buffer pos
.a088	a9 ff		lda #$ff			lda 	#$FF
.a08a	8d 80 06	sta $0680			sta 	valueBuffer 				; erase value buffer (end marker $FF)
.a08d					_PLTConvert:
.a08d	b1 00		lda ($00),y			lda 	(scanPtr),y 				; next character
.a08f	f0 7a		beq $a10b			beq 	_PLTExit
.a091	c8		iny				iny
.a092	c9 20		cmp #$20			cmp 	#' ' 						; skip over spaces.
.a094	f0 f7		beq $a08d			beq 	_PLTConvert
.a096	20 6f a1	jsr $a16f			jsr 	PLTCheckCharacter 			; identifier character.
.a099	b0 08		bcs $a0a3			bcs 	_PLTIsIdentifier 			; it's an identifier.
.a09b	09 80		ora #$80			ora 	#$80 						; set bit 7
.a09d	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write out
.a0a0	e8		inx				inx
.a0a1	80 ea		bra $a08d			bra 	_PLTConvert
.a0a3					_PLTIsIdentifier:
.a0a3	86 1c		stx $1c				stx 	identStart 					; save as start of identifier.
.a0a5					_PLTGetIdentifier:
.a0a5	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out.
.a0a8	e8		inx				inx
.a0a9	b1 00		lda ($00),y			lda 	(scanPtr),y	 				; get next character
.a0ab	c8		iny				iny
.a0ac	20 6f a1	jsr $a16f			jsr 	PLTCheckCharacter 			; still identifier
.a0af	b0 f4		bcs $a0a5			bcs 	_PLTGetIdentifier
.a0b1	88		dey				dey 								; undo last bump.
.a0b2					_PLTGotIdentifier:
.a0b2	bd 3f 06	lda $063f,x			lda 	lineBuffer-1,x 				; set bit 7 of last
.a0b5	09 80		ora #$80			ora 	#$80
.a0b7	9d 3f 06	sta $063f,x			sta 	lineBuffer-1,x
.a0ba	5a		phy				phy
.a0bb	da		phx				phx
.a0bc	20 63 a1	jsr $a163			jsr 	PLTGetAddress 				; XY <= address of identifier.
.a0bf	20 a4 a3	jsr $a3a4			jsr 	DictionarySearch 			; is it in the dictionaries ?
.a0c2	90 0c		bcc $a0d0			bcc 	_PLTTryConstant
.a0c4	c9 50		cmp #$50			cmp 	#"P" 						; procedure, short or var ?
.a0c6	f0 4b		beq $a113			beq 	_PLTFoundIdentifier
.a0c8	c9 53		cmp #$53			cmp 	#"S"
.a0ca	f0 47		beq $a113			beq 	_PLTFoundIdentifier
.a0cc	c9 49		cmp #$49			cmp 	#"I"
.a0ce	f0 43		beq $a113			beq 	_PLTFoundIdentifier
.a0d0					_PLTTryConstant:
.a0d0	20 63 a1	jsr $a163			jsr 	PLTGetAddress 				; try as a constant
.a0d3	20 7d a7	jsr $a77d			jsr 	StringToInt
.a0d6	b0 04		bcs $a0dc			bcs 	_PLTAttachIdentifier
.a0d8	fa		plx				plx 								; leave as it is - unknown identifier
.a0d9	7a		ply				ply
.a0da	80 b1		bra $a08d			bra 	_PLTConvert
.a0dc					_PLTAttachIdentifier:
.a0dc	86 0a		stx $0a				stx 	zTemp0 						; save XY
.a0de	84 0b		sty $0b				sty 	zTemp0+1
.a0e0	fa		plx				plx 								; restore current position
.a0e1	7a		ply				ply
.a0e2	b1 00		lda ($00),y			lda 	(scanPtr),y 				; next character
.a0e4	c9 2d		cmp #$2d			cmp 	#"-"
.a0e6	d0 04		bne $a0ec			bne 	_PLTNotMinus
.a0e8	20 55 a1	jsr $a155			jsr 	_PLTNegateZTemp0 			; negate zTemp0
.a0eb	c8		iny				iny 								; skip it if '-'
.a0ec					_PLTNotMinus:
.a0ec	5a		phy				phy 								; save current positions
.a0ed	da		phx				phx
.a0ee	a6 0a		ldx $0a				ldx 	zTemp0 						; restore XY number
.a0f0	a4 0b		ldy $0b				ldy 	zTemp0+1
.a0f2	a9 00		lda #$00			lda 	#0
.a0f4	20 93 a1	jsr $a193			jsr 	ProcessRecordData 			; record associated data
.a0f7	a9 62		lda #$62			lda 	#"b"
.a0f9	c0 00		cpy #$00			cpy 	#0
.a0fb	f0 02		beq $a0ff			beq 	_PLTRecord
.a0fd	a9 77		lda #$77			lda 	#"w"
.a0ff					_PLTRecord:
.a0ff	fa		plx				plx 								; restore XY position
.a100	7a		ply				ply
.a101	a6 1c		ldx $1c				ldx 	identStart 					; overwrite the position with ident start
.a103	09 80		ora #$80			ora 	#$80 						; bit 7, it's an element in its own right
.a105	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out
.a108	e8		inx				inx 								; bump the position
.a109	80 82		bra $a08d			bra		_PLTConvert 				; do the next one.
.a10b					_PLTExit:
.a10b	9e 40 06	stz $0640,x			stz 	lineBuffer,x 				; make it ASCIIZ
.a10e	e0 40		cpx #$40			cpx		#LINEBUFFSIZE 				; line too long.
.a110	b0 31		bcs $a143			bcs 	_PLTBuffer
.a112	60		rts				rts
.a113					_PLTFoundIdentifier:
.a113	48		pha				pha 								; save type.
.a114	a6 1d		ldx $1d				ldx 	dirLowByte 					; get the dictionary AXY values
.a116	a4 1e		ldy $1e				ldy 	dirHighByte
.a118	a5 1f		lda $1f				lda 	dirBank
.a11a	20 93 a1	jsr $a193			jsr 	ProcessRecordData 			; attached to identstart
.a11d	68		pla				pla 								; get type back, which is I or S or P
.a11e	09 20		ora #$20			ora 	#$20 						; make it lower case.
.a120	c9 70		cmp #$70			cmp 	#"p"						; P goes untrammelled
.a122	f0 db		beq $a0ff			beq 	_PLTRecord
.a124	c0 00		cpy #$00			cpy 	#0 							; if Y = 0, e.g. zero page, use that.
.a126	f0 d7		beq $a0ff			beq 	_PLTRecord
.a128	49 05		eor #$05			eor 	#"i"^"l" 					; convert it to L
.a12a	c9 6c		cmp #$6c			cmp 	#"l"
.a12c	f0 d1		beq $a0ff			beq 	_PLTRecord
.a12e	a9 63		lda #$63			lda 	#"c" 						; otherwise C
.a130	80 cd		bra $a0ff			bra 	_PLTRecord
.a132					_PLTError:
.a132	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a135	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX ?",$00
>a13d	54 41 58 20 3f 00
.a143					_PLTBuffer:
.a143	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a146	4c 45 41 4e 3a 4c 49 4e				.text 	"LEAN:","LINE SIZE",$00
>a14e	45 20 53 49 5a 45 00
.a155					_PLTNegateZTemp0:
.a155	38		sec				sec 								; negate zTemp0
.a156	a9 00		lda #$00			lda 	#0
.a158	e5 0a		sbc $0a				sbc 	zTemp0
.a15a	85 0a		sta $0a				sta 	zTemp0
.a15c	a9 00		lda #$00			lda 	#0
.a15e	e5 0b		sbc $0b				sbc 	zTemp0+1
.a160	85 0b		sta $0b				sta 	zTemp0+1
.a162	60		rts				rts
.a163					PLTGetAddress:
.a163	18		clc				clc
.a164	a5 1c		lda $1c				lda 	identStart
.a166	69 40		adc #$40			adc 	#lineBuffer & $FF
.a168	aa		tax				tax
.a169	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a16b	90 01		bcc $a16e			bcc 	_PLGANoCarry
.a16d	c8		iny				iny
.a16e					_PLGANoCarry:
.a16e	60		rts				rts
.a16f					PLTCheckCharacter:
.a16f	c9 25		cmp #$25			cmp 	#'%'
.a171	f0 1c		beq $a18f			beq 	_PLCCYes
.a173	c9 5f		cmp #$5f			cmp 	#'_'
.a175	f0 18		beq $a18f			beq 	_PLCCYes
.a177	c9 24		cmp #$24			cmp 	#'$'
.a179	f0 14		beq $a18f			beq 	_PLCCYes
.a17b	c9 2e		cmp #$2e			cmp 	#'.'
.a17d	f0 10		beq $a18f			beq 	_PLCCYes
.a17f	c9 30		cmp #$30			cmp 	#'0'
.a181	90 0e		bcc $a191			bcc 	_PLCCNo
.a183	c9 3a		cmp #$3a			cmp 	#'9'+1
.a185	90 08		bcc $a18f			bcc 	_PLCCYes
.a187	c9 41		cmp #$41			cmp 	#'A'
.a189	90 06		bcc $a191			bcc 	_PLCCNo
.a18b	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a18d	b0 02		bcs $a191			bcs 	_PLCCNo
.a18f					_PLCCYes:
.a18f	38		sec				sec
.a190	60		rts				rts
.a191					_PLCCNo:
.a191	18		clc				clc
.a192	60		rts				rts
.a193					ProcessRecordData:
.a193	48		pha				pha
.a194	da		phx				phx
.a195	5a		phy				phy
.a196	da		phx				phx
.a197	a6 21		ldx $21				ldx 	valueBufferPos 				; get current position
.a199	9d 83 06	sta $0683,x			sta 	valueBuffer+3,x 			; copy data to it
.a19c	98		tya				tya
.a19d	9d 82 06	sta $0682,x			sta 	valueBuffer+2,x
.a1a0	68		pla				pla
.a1a1	9d 81 06	sta $0681,x			sta 	valueBuffer+1,x
.a1a4	a5 1c		lda $1c				lda 	identStart
.a1a6	9d 80 06	sta $0680,x			sta 	valueBuffer+0,x
.a1a9	e8		inx				inx 								; next position
.a1aa	e8		inx				inx
.a1ab	e8		inx				inx
.a1ac	e8		inx				inx
.a1ad	86 21		stx $21				stx 	valueBufferPos 				; save
.a1af	a9 ff		lda #$ff			lda 	#$FF 						; write end marker.
.a1b1	9d 80 06	sta $0680,x			sta 	valueBuffer,x
.a1b4	e0 80		cpx #$80			cpx 	#VALBUFFSIZE
.a1b6	b0 04		bcs $a1bc			bcs 	_PRDError
.a1b8	7a		ply				ply
.a1b9	fa		plx				plx
.a1ba	68		pla				pla
.a1bb	60		rts				rts
.a1bc					_PRDError:
.a1bc	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a1bf	4c 45 41 4e 3a 43 4f 4d				.text 	"LEAN:","COMPLEX ?",$00
>a1c7	50 4c 45 58 20 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/generate.asm

.a1ce					GeneratorSearch:
.a1ce	64 22		stz $22				stz 	genPos 						; reset the generator pointer
.a1d0					_GSNextItem:
.a1d0	a6 22		ldx $22				ldx 	genPos
.a1d2	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a1d5	f0 05		beq $a1dc			beq 	_GSExit
.a1d7	20 dd a1	jsr $a1dd			jsr 	GenerateOne
.a1da	80 f4		bra $a1d0			bra 	_GSNextItem
.a1dc					_GSExit:
.a1dc	60		rts				rts
.a1dd					GenerateOne:
.a1dd	a5 22		lda $22				lda 	genPos 						; point XY to the next thing
.a1df	18		clc				clc 								; the actual address in the line buffer.
.a1e0	69 40		adc #$40			adc 	#lineBuffer & $FF
.a1e2	aa		tax				tax
.a1e3	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a1e5	90 01		bcc $a1e8			bcc 	_GSNoCarry
.a1e7	c8		iny				iny
.a1e8					_GSNoCarry:
.a1e8	20 a1 a3	jsr $a3a1			jsr 	DictionarySearchSystemOnly 	; dictionary search
.a1eb	b0 10		bcs $a1fd			bcs 	_GSFound
.a1ed					_GSError:
.a1ed	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a1f0	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX?",$00
>a1f8	54 41 58 3f 00
.a1fd					_GSFound:
.a1fd	c9 4d		cmp #$4d			cmp 	#"M"						; check it's a match.
.a1ff	d0 ec		bne $a1ed			bne 	_GSError
.a201	a4 20		ldy $20				ldy 	dirLength 					; advance to next
.a203	a6 22		ldx $22				ldx 	genPos 						; checking for a-z.
.a205					_GSCheckData:
.a205	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a208	29 7f		and #$7f			and 	#$7F
.a20a	c9 61		cmp #$61			cmp 	#'a'
.a20c	90 08		bcc $a216			bcc 	_GSNotLC
.a20e	c9 7b		cmp #$7b			cmp 	#'z'+1
.a210	b0 04		bcs $a216			bcs 	_GSNotLC
.a212	8a		txa				txa
.a213	20 99 a2	jsr $a299			jsr 	GenCopyData
.a216					_GSNotLC:
.a216	e8		inx				inx
.a217	88		dey				dey
.a218	d0 eb		bne $a205			bne 	_GSCheckData
.a21a	86 22		stx $22				stx 	genPos
.a21c	a5 1d		lda $1d				lda 	dirLowByte					; copy address to genPtr
.a21e	85 06		sta $06				sta 	genPtr
.a220	a5 1e		lda $1e				lda 	dirHighByte
.a222	85 07		sta $07				sta 	genPtr+1
.a224	b2 06		lda ($06)			lda 	(genPtr)					; count in A
.a226	f0 25		beq $a24d			beq 	_GSNext 					; nothing !
.a228	aa		tax				tax 								; X is count
.a229	a0 01		ldy #$01			ldy 	#1
.a22b					_GSGenerate:
.a22b	b1 06		lda ($06),y			lda 	(genPtr),y 					; execute something
.a22d	c9 a3		cmp #$a3			cmp 	#CGEN_C_EXEC
.a22f	f0 1d		beq $a24e			beq 	_GSExecute
.a231	c9 93		cmp #$93			cmp 	#CGEN_C_SETDATA 			; set data ?
.a233	d0 0e		bne $a243			bne 	_GSCopy
.a235	c8		iny				iny									; copy next two bytes out.
.a236	b1 06		lda ($06),y			lda 	(genPtr),y
.a238	85 23		sta $23				sta 	generateVar
.a23a	c8		iny				iny
.a23b	b1 06		lda ($06),y			lda 	(genPtr),y
.a23d	85 24		sta $24				sta 	generateVar+1
.a23f	ca		dex				dex
.a240	ca		dex				dex
.a241	80 06		bra $a249			bra 	_GSContinue
.a243					_GSCopy:
.a243	20 6a a2	jsr $a26a			jsr 	GenConvertByte 				; replace bytes
.a246	20 33 a4	jsr $a433			jsr 	CodeWriteByte				; write out.
.a249					_GSContinue:
.a249	c8		iny				iny
.a24a	ca		dex				dex
.a24b	d0 de		bne $a22b			bne 	_GSGenerate
.a24d					_GSNext:
.a24d	60		rts				rts
.a24e					_GSExecute:
.a24e	c8		iny				iny 								; grab one.
.a24f	ca		dex				dex
.a250	da		phx				phx 								; save XY
.a251	5a		phy				phy
.a252	b1 06		lda ($06),y			lda 	(genPtr),y 					; read the execution ID
.a254	0a		asl a				asl 	a 							; index into table.
.a255	aa		tax				tax
.a256	bd 1c a9	lda $a91c,x			lda 	ExecutableVectorTable,x 	; read jump vector
.a259	85 0a		sta $0a				sta 	zTemp0
.a25b	bd 1d a9	lda $a91d,x			lda 	ExecutableVectorTable+1,x
.a25e	85 0b		sta $0b				sta 	zTemp0+1
.a260	20 67 a2	jsr $a267			jsr 	_GSCallzTemp0 				; call routine
.a263	7a		ply				ply 								; restore XY
.a264	fa		plx				plx
.a265	80 e2		bra $a249			bra 	_GSContinue
.a267					_GSCallzTemp0:
.a267	6c 0a 00	jmp ($000a)			jmp 	(zTemp0)
.a26a					GenConvertByte:
.a26a	c9 63		cmp #$63			cmp 	#CGEN_C_LOW
.a26c	f0 09		beq $a277			beq 	_GCBLowByte
.a26e	c9 83		cmp #$83			cmp 	#CGEN_C_LOWPLUS1
.a270	f0 08		beq $a27a			beq 	_GCBLowBytePlus1
.a272	c9 73		cmp #$73			cmp 	#CGEN_C_HIGH
.a274	f0 0a		beq $a280			beq 	_GCBHighByte
.a276	60		rts				rts
.a277					_GCBLowByte:
.a277	a5 25		lda $25				lda 	elementData
.a279	60		rts				rts
.a27a					_GCBLowBytePlus1:
.a27a	a5 25		lda $25				lda 	elementData
.a27c	1a		inc a				inc 	a
.a27d	f0 04		beq $a283			beq 	_GCBSystem
.a27f	60		rts				rts
.a280					_GCBHighByte:
.a280	a5 26		lda $26				lda 	elementData+1
.a282	60		rts				rts
.a283					_GCBSystem:
.a283	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a286	4c 45 41 4e 3a 57 4f 52				.text 	"LEAN:","WORD OFF PAGE",$00
>a28e	44 20 4f 46 46 20 50 41 47 45 00
.a299					GenCopyData:
.a299	48		pha				pha
.a29a	da		phx				phx
.a29b	5a		phy				phy
.a29c	85 0a		sta $0a				sta 	zTemp0
.a29e	a2 fc		ldx #$fc			ldx 	#256-4
.a2a0					_GCDLoop:
.a2a0	e8		inx				inx 								; next slot
.a2a1	e8		inx				inx
.a2a2	e8		inx				inx
.a2a3	e8		inx				inx
.a2a4	bd 80 06	lda $0680,x			lda 	valueBuffer,x 				; next in value buffer
.a2a7	c9 ff		cmp #$ff			cmp 	#$FF
.a2a9	f0 16		beq $a2c1			beq 	_GCDError 					; system ?
.a2ab	c5 0a		cmp $0a				cmp 	zTemp0 						; match.
.a2ad	d0 f1		bne $a2a0			bne 	_GCDLoop
.a2af	a0 00		ldy #$00			ldy 	#0 							; copy assoc data back
.a2b1					_GCDCopy:
.a2b1	bd 81 06	lda $0681,x			lda 	valueBuffer+1,x
.a2b4	99 25 00	sta $0025,y			sta 	elementData,y
.a2b7	e8		inx				inx
.a2b8	c8		iny				iny
.a2b9	c0 03		cpy #$03			cpy 	#3
.a2bb	d0 f4		bne $a2b1			bne 	_GCDCopy
.a2bd	7a		ply				ply
.a2be	fa		plx				plx
.a2bf	68		pla				pla
.a2c0	60		rts				rts
.a2c1					_GCDError:
.a2c1	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a2c4	4c 45 41 4e 3a 53 59 53				.text 	"LEAN:","SYS0?",$00
>a2cc	30 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/extract.asm

.a2cf					EGetUnknownIdentifier:
.a2cf	a6 22		ldx $22				ldx 	genPos 						; get next character
.a2d1	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a2d4	29 7f		and #$7f			and 	#$7F
.a2d6	20 6f a1	jsr $a16f			jsr 	PLTCheckCharacter 			; is it an identifier ?
.a2d9	90 15		bcc $a2f0			bcc 	_EUIError 					; no
.a2db	da		phx				phx 								; save start position on stack.
.a2dc					_EGetFindEnd:
.a2dc	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a2df	e8		inx				inx
.a2e0	0a		asl a				asl 	a
.a2e1	90 f9		bcc $a2dc			bcc 	_EGetFindEnd
.a2e3	86 22		stx $22				stx 	genPos 						; points to the next thing.
.a2e5	68		pla				pla 								; offset
.a2e6	a0 06		ldy #$06			ldy 	#lineBuffer >> 8 			; make address in YX
.a2e8	18		clc				clc
.a2e9	69 40		adc #$40			adc 	#lineBuffer & $FF
.a2eb	aa		tax				tax
.a2ec	90 01		bcc $a2ef			bcc 	_EGetNoCarry
.a2ee	c8		iny				iny
.a2ef					_EGetNoCarry:
.a2ef	60		rts				rts
.a2f0					_EUIError:
.a2f0	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a2f3	4c 45 41 4e 3a 49 44 45				.text 	"LEAN:","IDENTIFIER ?",$00
>a2fb	4e 54 49 46 49 45 52 20 3f 00
.a305					EGetSyntaxCheck:
.a305	48		pha				pha
.a306	da		phx				phx
.a307	a6 22		ldx $22				ldx 	genPos 						; position of next
.a309	5d 40 06	eor $0640,x			eor 	lineBuffer,x 				; bits 0-6 will be zero if match
.a30c	29 7f		and #$7f			and 	#$7F
.a30e	d0 05		bne $a315			bne 	_EGSFail 					; different
.a310	e6 22		inc $22				inc 	genPos 						; skip it and exit
.a312	fa		plx				plx
.a313	68		pla				pla
.a314	60		rts				rts
.a315					_EGSFail:
.a315	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a318	4c 45 41 4e 3a 4d 49 53				.text 	"LEAN:","MISSING ?",$00
>a320	53 49 4e 47 20 3f 00
.a327					EGLookNext:
.a327	da		phx				phx
.a328	a6 22		ldx $22				ldx 	genPos 						; position of next
.a32a	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a32d	fa		plx				plx
.a32e	60		rts				rts
.a32f					EGSkipNext:
.a32f	e6 22		inc $22				inc 	genPos
.a331	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/create.asm

.a332					DictionaryCreate:
.a332	86 0a		stx $0a				stx 	zTemp0 						; save identifier position
.a334	84 0b		sty $0b				sty 	zTemp0+1
.a336	a0 01		ldy #$01			ldy 	#1 							; write the type byte out.
.a338	91 04		sta ($04),y			sta 	(dictPtr),y
.a33a	a0 00		ldy #$00			ldy 	#0 							; work out length.
.a33c					_DCGetLength:
.a33c	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a33e	c8		iny				iny
.a33f	0a		asl a				asl 	a
.a340	90 fa		bcc $a33c			bcc 	_DCGetLength
.a342	5a		phy				phy 								; save Y on stack.
.a343	98		tya				tya 								; save length +6 as offset
.a344	18		clc				clc
.a345	69 06		adc #$06			adc 	#6
.a347	92 04		sta ($04)			sta 	(dictPtr)
.a349	a0 02		ldy #$02			ldy 	#2 							; fill 2 to 4 with $FF
.a34b	a9 ff		lda #$ff	_DCFill:lda 	#$FF
.a34d	91 04		sta ($04),y			sta 	(dictPtr),y
.a34f	c8		iny				iny
.a350	c0 05		cpy #$05			cpy 	#5
.a352	d0 f7		bne $a34b			bne 	_DCFill
.a354	68		pla				pla 								; get length, store in X
.a355	aa		tax				tax
.a356	91 04		sta ($04),y			sta 	(dictPtr),y 				; write length out.
.a358	a0 00		ldy #$00			ldy 	#0
.a35a					_DCCopy:
.a35a	b1 0a		lda ($0a),y			lda 	(zTemp0),y 					; next identifier character
.a35c	c8		iny				iny 								; save +1 on stack
.a35d	5a		phy				phy
.a35e	c8		iny				iny 								; advance by 6 total
.a35f	c8		iny				iny
.a360	c8		iny				iny
.a361	c8		iny				iny
.a362	c8		iny				iny
.a363	91 04		sta ($04),y			sta 	(dictPtr),y 				; write out
.a365	7a		ply				ply 								; restore +1
.a366	ca		dex				dex
.a367	d0 f1		bne $a35a			bne 	_DCCopy 					; do that the required# times.
.a369	a5 04		lda $04				lda 	dictPtr 					; copy last created
.a36b	85 12		sta $12				sta 	lastCreate
.a36d	a5 05		lda $05				lda 	dictPtr+1
.a36f	85 13		sta $13				sta 	lastCreate+1
.a371	18		clc				clc 								; advance dictionary pointer
.a372	b2 04		lda ($04)			lda 	(dictPtr)
.a374	65 04		adc $04				adc 	dictPtr
.a376	85 04		sta $04				sta 	dictPtr
.a378	90 02		bcc $a37c			bcc 	_DCNoCarry
.a37a	e6 05		inc $05				inc 	dictPtr+1
.a37c					_DCNoCarry:
.a37c	a9 00		lda #$00			lda 	#$00 						; write end of dictionary marker
.a37e	92 04		sta ($04)			sta 	(dictPtr)
.a380	60		rts				rts
.a381					DictionarySet:
.a381	48		pha				pha
.a382	da		phx				phx
.a383	5a		phy				phy
.a384	5a		phy				phy 								; copy data out to
.a385	a0 04		ldy #$04			ldy 	#4 							; offset 2,3,4 => A X Y
.a387	91 12		sta ($12),y			sta 	(lastCreate),y
.a389	88		dey				dey
.a38a	68		pla				pla
.a38b	91 12		sta ($12),y			sta 	(lastCreate),y
.a38d	88		dey				dey
.a38e	8a		txa				txa
.a38f	91 12		sta ($12),y			sta 	(lastCreate),y
.a391	7a		ply				ply
.a392	fa		plx				plx
.a393	68		pla				pla
.a394	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/search.asm

.a395					DictionaryReset:
.a395	a9 00		lda #$00			lda 	#(UserDictionary) & $FF
.a397	85 04		sta $04				sta 	dictPtr
.a399	a9 b8		lda #$b8			lda 	#(UserDictionary) >> 8
.a39b	85 05		sta $05				sta 	dictPtr+1
.a39d	9c 00 b8	stz $b800			stz 	UserDictionary
.a3a0	60		rts				rts
.a3a1					DictionarySearchSystemOnly:
.a3a1	38		sec				sec
.a3a2	80 01		bra $a3a5			bra 	DictionarySearchContinue
.a3a4					DictionarySearch:
.a3a4	18		clc				clc
.a3a5					DictionarySearchContinue:
.a3a5	da		phx				phx
.a3a6	5a		phy				phy
.a3a7	08		php				php 								; CS if user only
.a3a8	8a		txa				txa 								; subtract 6 so can use offset Y
.a3a9	38		sec				sec
.a3aa	e9 06		sbc #$06			sbc 	#6
.a3ac	85 0a		sta $0a				sta 	zTemp0
.a3ae	98		tya				tya
.a3af	e9 00		sbc #$00			sbc 	#0
.a3b1	85 0b		sta $0b				sta 	zTemp0+1 					; in zTemp0
.a3b3	28		plp				plp
.a3b4	b0 09		bcs $a3bf			bcs 	_DSCOnly
.a3b6	a2 00		ldx #$00			ldx 	#UserDictionary & $FF
.a3b8	a0 b8		ldy #$b8			ldy 	#UserDictionary >> 8
.a3ba	20 c9 a3	jsr $a3c9			jsr 	DSSearch
.a3bd	b0 07		bcs $a3c6			bcs 	_DSCExit
.a3bf					_DSCOnly:
.a3bf	a2 36		ldx #$36			ldx 	#SystemDictionary & $FF
.a3c1	a0 a9		ldy #$a9			ldy 	#SystemDictionary >> 8
.a3c3	20 c9 a3	jsr $a3c9			jsr 	DSSearch
.a3c6					_DSCExit:
.a3c6	7a		ply				ply 								; restore YX
.a3c7	fa		plx				plx
.a3c8	60		rts				rts
.a3c9					DSSearch:
.a3c9	86 0c		stx $0c				stx 	zTemp1 						; save dictionary in zTemp1
.a3cb	84 0d		sty $0d				sty 	zTemp1+1
.a3cd					_DSLoop:
.a3cd	b2 0c		lda ($0c)			lda 	(zTemp1) 					; offset 0 ?
.a3cf	f0 36		beq $a407			beq 	_DSExit
.a3d1	a0 05		ldy #$05			ldy 	#5 							; get length in X
.a3d3	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3d5	aa		tax				tax
.a3d6					_DSCompare:
.a3d6	c8		iny				iny 								; match next ?
.a3d7	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3d9	d1 0a		cmp ($0a),y			cmp 	(zTemp0),y
.a3db	d0 1d		bne $a3fa			bne 	_DSNext
.a3dd	ca		dex				dex 								; done all
.a3de	d0 f6		bne $a3d6			bne 	_DSCompare
.a3e0	a0 05		ldy #$05			ldy 	#5 							; copy bank/address
.a3e2	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3e4	85 20		sta $20				sta 	dirLength
.a3e6	88		dey				dey
.a3e7	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3e9	85 1f		sta $1f				sta 	dirBank
.a3eb	88		dey				dey
.a3ec	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3ee	85 1e		sta $1e				sta 	dirHighByte
.a3f0	88		dey				dey
.a3f1	b1 0c		lda ($0c),y			lda 	(zTemp1),y
.a3f3	85 1d		sta $1d				sta 	dirLowByte
.a3f5	88		dey				dey
.a3f6	b1 0c		lda ($0c),y			lda 	(zTemp1),y 					; return type
.a3f8	38		sec				sec
.a3f9	60		rts				rts
.a3fa					_DSNext:
.a3fa	18		clc				clc 								; advance to next.
.a3fb	b2 0c		lda ($0c)			lda 	(zTemp1)
.a3fd	65 0c		adc $0c				adc 	zTemp1
.a3ff	85 0c		sta $0c				sta 	zTemp1
.a401	90 ca		bcc $a3cd			bcc 	_DSLoop
.a403	e6 0d		inc $0d				inc 	zTemp1+1
.a405	80 c6		bra $a3cd			bra 	_DSLoop
.a407					_DSExit:
.a407	18		clc				clc
.a408	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/code.asm

.a409					CodeReset:
.a409	a2 00		ldx #$00			ldx 	#CodeMemory & 255
.a40b	a0 bc		ldy #$bc			ldy 	#CodeMemory >> 8
.a40d	a9 00		lda #$00			lda 	#0
.a40f	80 00		bra $a411			bra 	CodeSetPointer
.a411					CodeSetPointer:
.a411	48		pha				pha 								; copy old to backup
.a412	a5 14		lda $14				lda 	codePtr
.a414	85 28		sta $28				sta 	codeBackup
.a416	a5 15		lda $15				lda 	codePtr+1
.a418	85 29		sta $29				sta 	codeBackup+1
.a41a	a5 16		lda $16				lda 	codeBank
.a41c	85 2a		sta $2a				sta 	codeBackup+2
.a41e	68		pla				pla
.a41f	85 16		sta $16				sta 	codeBank 					; update
.a421	86 14		stx $14				stx 	codePtr
.a423	84 15		sty $15				sty 	codePtr+1
.a425	60		rts				rts
.a426					CodeRestorePointer:
.a426	a5 28		lda $28				lda 	codeBackup
.a428	85 14		sta $14				sta 	codePtr
.a42a	a5 29		lda $29				lda 	codeBackup+1
.a42c	85 15		sta $15				sta 	codePtr+1
.a42e	a5 2a		lda $2a				lda 	codeBackup+2
.a430	85 16		sta $16				sta 	codeBank
.a432	60		rts				rts
.a433					CodeWriteByte:
.a433	92 14		sta ($14)			sta 	(codePtr)
.a435	e6 14		inc $14				inc 	codePtr
.a437	d0 02		bne $a43b			bne 	_CWBNoCarry
.a439	e6 15		inc $15				inc 	codePtr+1
.a43b					_CWBNoCarry:
.a43b	60		rts				rts
.a43c					CodeWriteBranch:
.a43c	18		clc				clc 								; borrow 1 as branch is from one on
.a43d	8a		txa				txa
.a43e	e5 14		sbc $14				sbc 	codePtr
.a440	20 33 a4	jsr $a433			jsr 	CodeWriteByte 				; compile anyway.
.a443	aa		tax				tax 								; actual result in X.
.a444	98		tya				tya
.a445	e5 15		sbc $15				sbc 	codePtr+1
.a447	f0 14		beq $a45d			beq 	_CWBCheckPositive 			; 00xx
.a449	c9 ff		cmp #$ff			cmp 	#$FF
.a44b	f0 14		beq $a461			beq 	_CWBCheckNegative 			; FFxx
.a44d					_CWBError:
.a44d	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a450	4c 45 41 4e 3a 42 52 41				.text 	"LEAN:","BRANCH?",$00
>a458	4e 43 48 3f 00
.a45d					_CWBCheckPositive:
.a45d	8a		txa				txa
.a45e	30 ed		bmi $a44d			bmi 	_CWBError
.a460	60		rts				rts
.a461					_CWBCheckNegative:
.a461	8a		txa				txa
.a462	10 e9		bpl $a44d			bpl 	_CWBError
.a464	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/error.asm

.a465					SyntaxError:
.a465	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a468	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX",$00
>a470	54 41 58 00
.a474					ErrorHandler:
.a474	fa		plx				plx 								; pull address off.
.a475	7a		ply				ply
.a476	e8		inx				inx 								; point to message
.a477	d0 01		bne $a47a			bne 	_EHNoCarry
.a479	c8		iny				iny
.a47a					_EHNoCarry:
.a47a	20 c0 a4	jsr $a4c0			jsr 	PrintStringXY 				; print string at XY
.a47d	a2 a0		ldx #$a0			ldx 	#_EHMessage & $FF 			; print " AT "
.a47f	a0 a4		ldy #$a4			ldy 	#_EHMessage >> 8
.a481	20 c0 a4	jsr $a4c0			jsr 	PrintStringXY
.a484	a6 1a		ldx $1a				ldx 	lineNumber 					; convert line number
.a486	a4 1b		ldy $1b				ldy 	lineNumber+1
.a488	20 32 a7	jsr $a732			jsr 	IntToString
.a48b	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a48d	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a48f	20 c0 a4	jsr $a4c0			jsr 	PrintStringXY
.a492	64 18		stz $18				stz 	lastDefine 					; disable running by zeroing last defined
.a494	64 19		stz $19				stz 	lastDefine+1
.a496	a2 a5		ldx #$a5			ldx 	#_EHMessage2 & $FF 			; print " AT "
.a498	a0 a4		ldy #$a4			ldy 	#_EHMessage2 >> 8
.a49a	20 c0 a4	jsr $a4c0			jsr 	PrintStringXY
.a49d	4c 2a a0	jmp $a02a			jmp 	ReturnCaller 				; exit the compiler.
.a4a0					_EHMessage:
>a4a0	20 41 54 20 00					.text	" AT ",0
.a4a5					_EHMessage2:
>a4a5	0d 20 20 20 20 4c 45 41				.text 	13,"    LEAN V0.1 (27-OCT-19)",0
>a4ad	4e 20 56 30 2e 31 20 28 32 37 2d 4f 43 54 2d 31
>a4bd	39 29 00
.a4c0					PrintStringXY:
.a4c0	86 0a		stx $0a				stx 	zTemp0
.a4c2	84 0b		sty $0b				sty 	zTemp0+1
.a4c4	a0 00		ldy #$00			ldy 	#0
.a4c6	b1 0a		lda ($0a),y	_PSLoop:lda 	(zTemp0),y
.a4c8	f0 06		beq $a4d0			beq 	_PSExit
.a4ca	20 d1 a4	jsr $a4d1			jsr 	PrintCharacter
.a4cd	c8		iny				iny
.a4ce	80 f6		bra $a4c6			bra 	_PSLoop
.a4d0	60		rts		_PSExit:rts
.a4d1					PrintCharacter:
.a4d1	48		pha				pha
.a4d2	da		phx				phx
.a4d3	5a		phy				phy
.a4d4	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a4d7	7a		ply				ply
.a4d8	fa		plx				plx
.a4d9	68		pla				pla
.a4da	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/procedure.asm

.a4db					Action_Procedure_Def:
.a4db	20 cf a2	jsr $a2cf			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a4de	a9 50		lda #$50			lda 	#"P"
.a4e0	20 32 a3	jsr $a332			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a4e3	a5 16		lda $16				lda 	codeBank 					; and assign it the current PC value.
.a4e5	a6 14		ldx $14				ldx 	codePtr
.a4e7	a4 15		ldy $15				ldy 	codePtr+1
.a4e9	86 18		stx $18				stx 	lastDefine 					; update last defined
.a4eb	84 19		sty $19				sty 	lastDefine+1
.a4ed	20 81 a3	jsr $a381			jsr 	DictionarySet 				; set the dictionary values.
.a4f0	a9 28		lda #$28			lda 	#"("
.a4f2	20 05 a3	jsr $a305			jsr 	EGetSyntaxCheck
.a4f5	a9 29		lda #$29			lda 	#")"
.a4f7	20 05 a3	jsr $a305			jsr 	EGetSyntaxCheck
.a4fa	a9 50		lda #$50			lda 	#SCM_PROC 					; put a procedure marker on the stack.
.a4fc	20 2a a8	jsr $a82a			jsr 	StackPush
.a4ff	60		rts				rts
.a500					_APError:
.a500	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a503	4c 45 41 4e 3a 50 52 4f				.text 	"LEAN:","PROCDEF",$00
>a50b	43 44 45 46 00
.a510					Action_EndProc:
.a510	a9 50		lda #$50			lda 	#SCM_PROC 					; check corresponding PROC
.a512	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a515	a9 60		lda #$60			lda 	#CPU_RETURN					; write out RTS
.a517	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a51a	a9 01		lda #$01			lda 	#1 							; remove from stack.
.a51c	20 73 a8	jsr $a873			jsr 	StackPopStack
.a51f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/call.asm

.a520					Action_Call:
.a520	a5 22		lda $22				lda 	genPos 						; get position
.a522	3a		dec a				dec 	a 							; point to the <proc>
.a523	48		pha				pha 								; save it
.a524	a9 28		lda #$28			lda 	#'('						; check (
.a526	20 05 a3	jsr $a305			jsr 	EGetSyntaxCheck
.a529	20 27 a3	jsr $a327			jsr 	EGLookNext 					; ) next ?
.a52c	c9 a9		cmp #$a9			cmp 	#')'+$80
.a52e	f0 1a		beq $a54a			beq 	_ACNoParameters
.a530	a9 52		lda #$52			lda 	#"R" 	 					; do R=<something>
.a532	20 63 a5	jsr $a563			jsr 	ACDoParameter 				; do the parameter.
.a535	20 2f a3	jsr $a32f			jsr 	EGSkipNext 					; skip the parameter
.a538	20 27 a3	jsr $a327			jsr 	EGLookNext 					; what follows
.a53b	c9 ac		cmp #$ac			cmp 	#","+$80 					; if not comma
.a53d	d0 0b		bne $a54a			bne 	_ACNoParameters 			; should be end of parameters
.a53f	20 2f a3	jsr $a32f			jsr 	EGSkipNext 					; skip ,
.a542	a9 59		lda #$59			lda 	#"Y"						; do Y=<something>
.a544	20 63 a5	jsr $a563			jsr 	ACDoParameter 				; do the parameter.
.a547	20 2f a3	jsr $a32f			jsr 	EGSkipNext 					; skip parameter.
.a54a					_ACNoParameters:
.a54a	a9 29		lda #$29			lda 	#')' 						; check closing bracket.
.a54c	20 05 a3	jsr $a305			jsr 	EGetSyntaxCheck
.a54f	68		pla				pla 								; restore procedure posiion.
.a550	20 99 a2	jsr $a299			jsr 	GenCopyData					; get the data
.a553	a9 20		lda #$20			lda 	#CPU_JSR					; output a call to it.
.a555	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a558	a5 25		lda $25				lda 	elementData
.a55a	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a55d	a5 26		lda $26				lda 	elementData+1
.a55f	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a562	60		rts				rts
.a563					ACDoParameter:
.a563	a6 22		ldx $22				ldx 	genPos 						; save position
.a565	da		phx				phx
.a566	48		pha				pha 								; save the target register
.a567	bd 40 06	lda $0640,x			lda 	lineBuffer,x 				; what is there ?
.a56a	c9 e1		cmp #$e1			cmp 	#"a"+$80 					; check a-z
.a56c	90 1a		bcc $a588			bcc 	_ADPError
.a56e	c9 fb		cmp #$fb			cmp 	#"z"+$81
.a570	b0 16		bcs $a588			bcs 	_ADPError
.a572	ca		dex				dex 								; write = before it
.a573	a9 bd		lda #$bd			lda 	#"="+$80
.a575	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a578	ca		dex				dex
.a579	68		pla				pla 								; write Y/R before that
.a57a	09 80		ora #$80			ora 	#$80
.a57c	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a57f	86 22		stx $22				stx 	genPos 						; make genPos point to that.
.a581	20 dd a1	jsr $a1dd			jsr 	GenerateOne 				; generate that.
.a584	68		pla				pla 								; restore position
.a585	85 22		sta $22				sta 	genPos
.a587	60		rts				rts
.a588					_ADPError:
.a588	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a58b	4c 45 41 4e 3a 50 41 52				.text 	"LEAN:","PARAMETER?",$00
>a593	41 4d 45 54 45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/if.asm

.a59b					Action_If:
.a59b	a5 23		lda $23				lda 	generateVar 				; branch to use.
.a59d	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a59f	20 33 a4	jsr $a433			jsr 	CodeWriteByte 				; output it
.a5a2	20 1a a8	jsr $a81a			jsr 	StackPushPC 				; push branch position on stack
.a5a5	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a5a7	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a5aa	a9 49		lda #$49			lda 	#SCM_IF 					; put if marker on the stack.
.a5ac	20 2a a8	jsr $a82a			jsr 	StackPush
.a5af	60		rts				rts
.a5b0					Action_Else:
.a5b0	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a5b2	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a5b5	a9 80		lda #$80			lda 	#CPU_BRA 					; compile branch
.a5b7	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a5ba	a5 14		lda $14				lda 	codePtr 					; push current position on the stack
.a5bc	48		pha				pha
.a5bd	a5 15		lda $15				lda 	codePtr+1
.a5bf	48		pha				pha
.a5c0	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a5c2	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a5c5	20 e0 a5	jsr $a5e0			jsr 	BackPatchIf 				; do the backpatch.
.a5c8	68		pla				pla 								; overwrite backpatch address
.a5c9	a0 01		ldy #$01			ldy 	#1 							; with stacked position.
.a5cb	91 02		sta ($02),y			sta 	(aStackPtr),y
.a5cd	68		pla				pla
.a5ce	c8		iny				iny
.a5cf	91 02		sta ($02),y			sta 	(aStackPtr),y
.a5d1	60		rts				rts
.a5d2					Action_Endif:
.a5d2	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a5d4	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a5d7	20 e0 a5	jsr $a5e0			jsr 	BackPatchIf 				; do the backpatch.
.a5da	a9 04		lda #$04			lda 	#3+1 						; throw the stack.
.a5dc	20 73 a8	jsr $a873			jsr 	StackPopStack
.a5df	60		rts				rts
.a5e0					BackPatchIf:
.a5e0	a5 14		lda $14					lda 	codePtr 					; save code pointer
.a5e2	48		pha				pha
.a5e3	a5 15		lda $15				lda 	codePtr+1
.a5e5	48		pha				pha
.a5e6	a0 03		ldy #$03			ldy 	#3 							; AYX = address.
.a5e8	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5ea	48		pha				pha
.a5eb	88		dey				dey
.a5ec	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5ee	aa		tax				tax
.a5ef	88		dey				dey
.a5f0	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a5f2	a8		tay				tay
.a5f3	68		pla				pla
.a5f4	20 11 a4	jsr $a411			jsr 	CodeSetPointer 				; set write position to that
.a5f7	7a		ply				ply 								; target address in YX
.a5f8	fa		plx				plx
.a5f9	20 3c a4	jsr $a43c			jsr 	CodeWriteBranch 			; write the actual branch there
.a5fc	20 26 a4	jsr $a426			jsr 	CodeRestorePointer 			; undo the set pointer.
.a5ff	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/repeat.asm

.a600					Action_Repeat:
.a600	20 1a a8	jsr $a81a			jsr 	StackPushPC 					; push loop position on stack
.a603	a9 52		lda #$52			lda 	#SCM_REPEAT 					; put a repeat marker on the stack.
.a605	20 2a a8	jsr $a82a			jsr 	StackPush
.a608	60		rts				rts
.a609					Action_Until:
.a609	a9 52		lda #$52			lda 	#SCM_REPEAT 				; check corresponding repeat
.a60b	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a60e	a5 23		lda $23				lda 	generateVar 				; branch to use.
.a610	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a612	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a614	20 5e a8	jsr $a85e			jsr 	StackCompileBranch 			; compile a branch.
.a617	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a619	20 73 a8	jsr $a873			jsr 	StackPopStack
.a61c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/for.asm

.a61d					Action_AFor:
.a61d	20 1a a8	jsr $a81a			jsr 	StackPushPC 					; push loop position on stack
.a620	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a622	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a625	a9 3a		lda #$3a			lda 	#CPU_DECA 						; counts backwards from n-1 to 0.
.a627	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a62a	a9 46		lda #$46			lda 	#SCM_FOR 						; put a for marker on the stack.
.a62c	20 2a a8	jsr $a82a			jsr 	StackPush
.a62f	60		rts				rts
.a630					Action_Next:
.a630	a9 46		lda #$46			lda 	#SCM_FOR 					; check corresponding for
.a632	20 46 a8	jsr $a846			jsr 	StackCheckStructureMarker
.a635	a9 68		lda #$68			lda 	#CPU_PLA 					; pop index off stack and decrement
.a637	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a63a	a9 3a		lda #$3a			lda 	#CPU_DECA
.a63c	20 33 a4	jsr $a433			jsr 	CodeWriteByte
.a63f	a9 d0		lda #$d0			lda 	#CPU_BNE 					; branch back if #0
.a641	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a643	20 5e a8	jsr $a85e			jsr 	StackCompileBranch 			; compile a branch.
.a646	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a648	20 73 a8	jsr $a873			jsr 	StackPopStack
.a64b	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/variables.asm

.a64c					VariableReset:
.a64c	a9 00		lda #$00			lda 	#(VariableMemory) & $FF
.a64e	85 08		sta $08				sta 	varPtr
.a650	a9 07		lda #$07			lda 	#(VariableMemory) >> 8
.a652	85 09		sta $09				sta 	varPtr+1
.a654	60		rts				rts
.a655					Action_ByteVar:
.a655	a9 01		lda #$01			lda 	#1
.a657	80 02		bra $a65b			bra 	VariableDeclare
.a659					Action_WordVar:
.a659	a9 02		lda #$02			lda 	#2
.a65b					VariableDeclare:
.a65b	85 2b		sta $2b				sta 	varSize 					; save variable size.
.a65d					_VDLoop:
.a65d	a9 53		lda #$53			lda 	#"S"						; get I or S
.a65f	a6 2b		ldx $2b				ldx 	varSize
.a661	ca		dex				dex
.a662	f0 02		beq $a666			beq 	_VDNotWord
.a664	a9 49		lda #$49			lda 	#"I"
.a666					_VDNotWord:
.a666	48		pha				pha
.a667	20 cf a2	jsr $a2cf			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a66a	68		pla				pla
.a66b	20 32 a3	jsr $a332			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a66e	20 27 a3	jsr $a327			jsr 	EGLookNext 					; what's next ?
.a671	c9 c0		cmp #$c0			cmp 	#'@'|$80 					; if not @, use default
.a673	d0 21		bne $a696			bne 	_VDDefault
.a675	20 2f a3	jsr $a32f			jsr 	EGSkipNext 					; skip @
.a678	20 27 a3	jsr $a327			jsr 	EGLookNext 					; get next
.a67b	c9 e2		cmp #$e2			cmp 	#'b'|$80 					; must be b/w constant
.a67d	f0 04		beq $a683			beq 	_VDLegit
.a67f	c9 f7		cmp #$f7			cmp 	#'w'|$80
.a681	d0 34		bne $a6b7			bne 	_VDError
.a683					_VDLegit:
.a683	a5 22		lda $22				lda 	genPos 						; position
.a685	20 99 a2	jsr $a299			jsr 	GenCopyData					; access data
.a688	a9 00		lda #$00			lda 	#0 		 					; set the address
.a68a	a6 25		ldx $25				ldx 	elementData
.a68c	a4 26		ldy $26				ldy 	elementData+1
.a68e	20 81 a3	jsr $a381			jsr 	DictionarySet
.a691	20 2f a3	jsr $a32f			jsr 	EGSkipNext 					; consume the constant
.a694	80 14		bra $a6aa			bra 	_VDTryNext
.a696					_VDDefault:
.a696	a6 08		ldx $08				ldx 	varPtr 						; place at default position
.a698	a4 09		ldy $09				ldy 	varPtr+1
.a69a	a9 00		lda #$00			lda 	#0
.a69c	20 81 a3	jsr $a381			jsr 	DictionarySet
.a69f	a5 2b		lda $2b				lda 	varSize 					; get count of bytes back
.a6a1	18		clc				clc
.a6a2	65 08		adc $08				adc 	varPtr
.a6a4	85 08		sta $08				sta 	varPtr
.a6a6	90 02		bcc $a6aa			bcc 	_VDNoCarry
.a6a8	e6 09		inc $09				inc 	varPtr+1
.a6aa					_VDNoCarry:
.a6aa					_VDTryNext:
.a6aa	20 27 a3	jsr $a327			jsr 	EGLookNext 					; what's next ?
.a6ad	c9 ac		cmp #$ac			cmp 	#","|$80 					; is it a comma
.a6af	d0 05		bne $a6b6			bne 	_VDExit 					; no, exit.
.a6b1	20 2f a3	jsr $a32f			jsr 	EGSkipNext
.a6b4	80 a7		bra $a65d			bra 	_VDLoop
.a6b6					_VDExit:
.a6b6	60		rts				rts
.a6b7					_VDError:
.a6b7	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a6ba	4c 45 41 4e 3a 41 44 44				.text 	"LEAN:","ADDRESS?",$00
>a6c2	52 45 53 53 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/crunch.asm

.a6c8					Action_DictionaryCrunch:
.a6c8	a9 00		lda #$00			lda 	#(UserDictionary) & $FF
.a6ca	85 0a		sta $0a				sta 	zTemp0
.a6cc	a9 b8		lda #$b8			lda 	#(UserDictionary) >> 8
.a6ce	85 0b		sta $0b				sta 	zTemp0+1
.a6d0					_ADCLoop:
.a6d0	b2 0a		lda ($0a)			lda 	(zTemp0) 					; reached end of dictionary
.a6d2	f0 5d		beq $a731			beq 	_ADCExit
.a6d4	a0 05		ldy #$05			ldy 	#5 							; length into X.
.a6d6	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a6d8	aa		tax				tax
.a6d9					_ADCCheck:
.a6d9	c8		iny				iny 								; get next.
.a6da	b1 0a		lda ($0a),y			lda 	(zTemp0),y
.a6dc	29 7f		and #$7f			and 	#$7F 						; is it a '.' ?
.a6de	c9 2e		cmp #$2e			cmp 	#'.'
.a6e0	f0 42		beq $a724			beq 	_ADCNext 					; if so, it's a global, skip to next.
.a6e2	ca		dex				dex
.a6e3	d0 f4		bne $a6d9			bne 	_ADCCheck 					; checked the whole identifier.
.a6e5	a5 0a		lda $0a				lda 	zTemp0 						; work out copy from, into zTemp1
.a6e7	48		pha				pha
.a6e8	18		clc				clc
.a6e9	72 0a		adc ($0a)			adc 	(zTemp0)
.a6eb	85 0c		sta $0c				sta 	zTemp1
.a6ed	a5 0b		lda $0b				lda 	zTemp0+1
.a6ef	48		pha				pha
.a6f0	69 00		adc #$00			adc 	#0
.a6f2	85 0d		sta $0d				sta 	zTemp1+1
.a6f4					_ADCopyOverwrite:
.a6f4	b2 0c		lda ($0c)			lda 	(zTemp1) 					; byte copy
.a6f6	92 0a		sta ($0a)			sta 	(zTemp0)
.a6f8	e6 0a		inc $0a				inc 	zTemp0
.a6fa	d0 02		bne $a6fe			bne 	_NoCarry
.a6fc	e6 0b		inc $0b				inc 	zTemp0+1
.a6fe					_NoCarry:
.a6fe	e6 0c		inc $0c				inc 	zTemp1
.a700	d0 02		bne $a704			bne 	_NoCarry
.a702	e6 0d		inc $0d				inc 	zTemp1+1
.a704					_NoCarry:
.a704	a5 0c		lda $0c				lda 	zTemp1 						; until the upper address = dictionary top
.a706	c5 04		cmp $04				cmp 	dictPtr
.a708	d0 ea		bne $a6f4			bne 	_ADCopyOverwrite
.a70a	a5 0d		lda $0d				lda 	zTemp1+1
.a70c	c5 05		cmp $05				cmp 	dictPtr+1
.a70e	d0 e4		bne $a6f4			bne 	_ADCopyOverwrite
.a710	a5 0a		lda $0a				lda 	zTemp0 						; copy from position is new top.
.a712	85 04		sta $04				sta 	dictPtr
.a714	a5 0b		lda $0b				lda 	zTemp0+1
.a716	85 05		sta $05				sta 	dictPtr+1
.a718	a9 00		lda #$00			lda 	#0							; mark end as not copied in loop
.a71a	92 04		sta ($04)			sta 	(dictPtr)
.a71c	68		pla				pla 								; restore original position.
.a71d	85 0b		sta $0b				sta 	zTemp0+1
.a71f	68		pla				pla
.a720	85 0a		sta $0a				sta 	zTemp0
.a722	80 ac		bra $a6d0			bra 	_ADCLoop 					; and continue from same position.
.a724					_ADCNext:
.a724	18		clc				clc 								; advance to next.
.a725	a5 0a		lda $0a				lda 	zTemp0
.a727	72 0a		adc ($0a)			adc 	(zTemp0)
.a729	85 0a		sta $0a				sta 	zTemp0
.a72b	90 a3		bcc $a6d0			bcc 	_ADCLoop
.a72d	e6 0b		inc $0b				inc 	zTemp0+1
.a72f	80 9f		bra $a6d0			bra 	_ADCLoop
.a731					_ADCExit:
.a731	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/tostring.asm

.a732					IntToString:
.a732	86 0a		stx $0a				stx 	zTemp0 						; count is in zTemp0
.a734	84 0b		sty $0b				sty 	zTemp0+1
.a736	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a738	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a73a					_ITSLoop:
.a73a	64 0c		stz $0c				stz 	zTemp1 						; this is the count of subtracts.
.a73c					_ITSSubtractLoop:
.a73c	38		sec				sec
.a73d	a5 0a		lda $0a				lda 	zTemp0 						; try to calculate
.a73f	fd 75 a7	sbc $a775,x			sbc 	_ITSWords,x
.a742	48		pha				pha
.a743	a5 0b		lda $0b				lda 	zTemp0+1
.a745	fd 76 a7	sbc $a776,x			sbc 	_ITSWords+1,x
.a748	90 09		bcc $a753			bcc 	_ITSEndSub 					; can't subtract any more.
.a74a	85 0b		sta $0b				sta 	zTemp0+1 					; update zTemp
.a74c	68		pla				pla
.a74d	85 0a		sta $0a				sta 	zTemp0
.a74f	e6 0c		inc $0c				inc 	zTemp1 						; bump subtract count.
.a751	80 e9		bra $a73c			bra 	_ITSSubtractLoop
.a753					_ITSEndSub:
.a753	68		pla				pla 								; throw away the interim result
.a754	a5 0c		lda $0c				lda 	zTemp1 						; if the subtract count is non zero
.a756	d0 04		bne $a75c			bne 	_ITSWriteOut 				; always write it out
.a758	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a75a	f0 06		beq $a762			beq 	_ITSNext 					; suppressing leading zeros.
.a75c					_ITSWriteOut:
.a75c	09 30		ora #$30			ora 	#48 						; output digit.
.a75e	99 40 06	sta $0640,y			sta 	lineBuffer,y
.a761	c8		iny				iny
.a762					_ITSNext:
.a762	e8		inx				inx
.a763	e8		inx				inx
.a764	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a766	d0 d2		bne $a73a			bne 	_ITSLoop 					; do the new digits
.a768	a5 0a		lda $0a				lda 	zTemp0 						; output the last digit
.a76a	09 30		ora #$30			ora 	#48
.a76c	99 40 06	sta $0640,y			sta 	lineBuffer,y 				; make it ASCIIZ.
.a76f	a9 00		lda #$00			lda 	#0
.a771	99 41 06	sta $0641,y			sta 	lineBuffer+1,y
.a774	60		rts				rts
.a775					_ITSWords:
>a775	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a77d					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: utility/tointeger.asm

.a77d					StringToInt:
.a77d	86 10		stx $10				stx 	zTemp3 						; save string
.a77f	84 11		sty $11				sty 	zTemp3+1
.a781	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a783	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a785	b2 10		lda ($10)			lda 	(zTemp3) 					; first character
.a787	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a789	f0 1b		beq $a7a6			beq 	_STIConvert 				; convert from character 1, base 16.
.a78b	88		dey				dey 								; from character 0
.a78c	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a78e	c9 2d		cmp #$2d			cmp 	#"-"						; first char is unary minus ?
.a790	d0 14		bne $a7a6			bne 	_STIConvert 				; no, convert as +ve decimal
.a792	c8		iny				iny 								; skip the minus
.a793	20 a6 a7	jsr $a7a6			jsr 	_STIConvert 				; convert the unsigned part.
.a796	90 0d		bcc $a7a5			bcc 	_STIExit 					; failed
.a798	8a		txa				txa 								; 1's complement YX
.a799	49 ff		eor #$ff			eor 	#$FF
.a79b	aa		tax				tax
.a79c	98		tya				tya
.a79d	49 ff		eor #$ff			eor 	#$FF
.a79f	a8		tay				tay
.a7a0	e8		inx				inx 								; +1 to make it negative
.a7a1	38		sec				sec
.a7a2	d0 01		bne $a7a5			bne 	_STIExit
.a7a4	c8		iny				iny
.a7a5					_STIExit:
.a7a5	60		rts				rts
.a7a6					_STIConvert:
.a7a6	86 0c		stx $0c				stx 	zTemp1 						; save base in zTemp1
.a7a8	b1 10		lda ($10),y			lda 	(zTemp3),y 					; get first character
.a7aa	f0 5f		beq $a80b			beq 	_STIFail 					; if zero, then it has failed anyway.
.a7ac	64 0a		stz $0a				stz 	zTemp0 						; clear the result.
.a7ae	64 0b		stz $0b				stz 	zTemp0+1
.a7b0					_STILoop:
.a7b0	a5 0a		lda $0a				lda 	zTemp0 						; copy current to zTemp2
.a7b2	85 0e		sta $0e				sta 	zTemp2
.a7b4	a5 0b		lda $0b				lda 	zTemp0+1
.a7b6	85 0f		sta $0f				sta 	zTemp2+1
.a7b8	64 0a		stz $0a				stz 	zTemp0 						; clear result
.a7ba	64 0b		stz $0b				stz 	zTemp0+1
.a7bc	a6 0c		ldx $0c				ldx 	zTemp1 						; X contains the base.
.a7be					_STIMultiply:
.a7be	8a		txa				txa 								; shift Y right into carry.
.a7bf	4a		lsr a				lsr 	a
.a7c0	aa		tax				tax
.a7c1	90 0d		bcc $a7d0			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a7c3	18		clc				clc
.a7c4	a5 0e		lda $0e				lda 	zTemp2 						; add zTemp2 into zTemp0
.a7c6	65 0a		adc $0a				adc 	zTemp0
.a7c8	85 0a		sta $0a				sta 	zTemp0
.a7ca	a5 0f		lda $0f				lda 	zTemp2+1
.a7cc	65 0b		adc $0b				adc 	zTemp0+1
.a7ce	85 0b		sta $0b				sta 	zTemp0+1
.a7d0					_STINoAdd:
.a7d0	06 0e		asl $0e				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a7d2	26 0f		rol $0f				rol 	zTemp2+1
.a7d4	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a7d6	d0 e6		bne $a7be			bne 	_STIMultiply
.a7d8	b1 10		lda ($10),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a7da	29 7f		and #$7f			and 	#$7F 						; remove End of Token bit if set
.a7dc	c9 30		cmp #$30			cmp 	#"0"
.a7de	90 2b		bcc $a80b			bcc 	_STIFail
.a7e0	c9 3a		cmp #$3a			cmp 	#"9"+1
.a7e2	90 0b		bcc $a7ef			bcc 	_STIOkay
.a7e4	c9 41		cmp #$41			cmp 	#"A"
.a7e6	90 23		bcc $a80b			bcc 	_STIFail
.a7e8	c9 47		cmp #$47			cmp 	#"F"+1
.a7ea	b0 1f		bcs $a80b			bcs 	_STIFail
.a7ec	38		sec				sec 								; hex adjust
.a7ed	e9 07		sbc #$07			sbc 	#7
.a7ef					_STIOkay:
.a7ef	38		sec				sec
.a7f0	e9 30		sbc #$30			sbc 	#48
.a7f2	c5 0c		cmp $0c				cmp 	zTemp1  					; if >= base then fail.
.a7f4	b0 15		bcs $a80b			bcs 	_STIFail
.a7f6	d8		cld				cld
.a7f7	65 0a		adc $0a				adc 	zTemp0 						; add into the current value
.a7f9	85 0a		sta $0a				sta 	zTemp0
.a7fb	90 02		bcc $a7ff			bcc 	_STINoCarry
.a7fd	e6 0b		inc $0b				inc 	zTemp0+1
.a7ff					_STINoCarry:
.a7ff	b1 10		lda ($10),y			lda 	(zTemp3),y					; get character just done.
.a801	c8		iny				iny 								; point to next
.a802	0a		asl a				asl 	a 							; shift bit 7 into carry
.a803	90 ab		bcc $a7b0			bcc 	_STILoop 					; not reached the end.
.a805	a6 0a		ldx $0a				ldx 	zTemp0 						; return result
.a807	a4 0b		ldy $0b				ldy 	zTemp0+1
.a809	38		sec				sec
.a80a	60		rts				rts
.a80b					_STIFail:
.a80b	18		clc				clc
.a80c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/astack.asm

.a80d					StackReset:
.a80d	a9 3f		lda #$3f			lda 	#(assemblerStack) & $FF
.a80f	85 02		sta $02				sta 	aStackPtr
.a811	a9 06		lda #$06			lda 	#(assemblerStack) >> 8
.a813	85 03		sta $03				sta 	aStackPtr+1
.a815	a9 2a		lda #$2a			lda 	#SCM_TOP
.a817	92 02		sta ($02)			sta 	(aStackPtr)
.a819	60		rts				rts
.a81a					StackPushPC:
.a81a	a5 16		lda $16				lda 	codeBank
.a81c	20 2a a8	jsr $a82a			jsr 	StackPush
.a81f	a5 14		lda $14				lda 	codePtr
.a821	20 2a a8	jsr $a82a			jsr 	StackPush
.a824	a5 15		lda $15				lda 	codePtr+1
.a826	20 2a a8	jsr $a82a			jsr 	StackPush
.a829	60		rts				rts
.a82a					StackPush:
.a82a	c6 02		dec $02				dec 	aStackPtr 					; decrement TOS pointer.
.a82c	f0 03		beq $a831			beq 	_SPStack
.a82e	92 02		sta ($02)			sta 	(aStackPtr)					; write to new TOS
.a830	60		rts				rts
.a831					_SPStack:
.a831	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a834	4c 45 41 4e 3a 52 45 54				.text 	"LEAN:","RETURN STACK",$00
>a83c	55 52 4e 20 53 54 41 43 4b 00
.a846					StackCheckStructureMarker:
.a846	d2 02		cmp ($02)			cmp 	(aStackPtr)					; check if tos matches
.a848	d0 01		bne $a84b			bne 	_SCSError
.a84a	60		rts				rts
.a84b					_SCSError:
.a84b	20 74 a4	jsr $a474			jsr 	ErrorHandler
>a84e	4c 45 41 4e 3a 53 54 52				.text 	"LEAN:","STRUCTURES",$00
>a856	55 43 54 55 52 45 53 00
.a85e					StackCompileBranch:
.a85e	48		pha				pha
.a85f	da		phx				phx
.a860	5a		phy				phy
.a861	20 33 a4	jsr $a433			jsr 	CodeWriteByte 				; write the opcode.
.a864	c8		iny				iny
.a865	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a867	aa		tax				tax
.a868	88		dey				dey
.a869	b1 02		lda ($02),y			lda 	(aStackPtr),y
.a86b	a8		tay				tay
.a86c	20 3c a4	jsr $a43c			jsr 	CodeWriteBranch 			; write a branch there.
.a86f	7a		ply				ply
.a870	fa		plx				plx
.a871	68		pla				pla
.a872	60		rts				rts
.a873					StackPopStack:
.a873	18		clc				clc 								; return stack all in same page
.a874	65 02		adc $02				adc 	aStackPtr 					; so we don't carry out.
.a876	85 02		sta $02				sta 	aStackPtr
.a878	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/system.inc

.a879					L10000:
>a879	09					.byte L10000_END-L10000-1
.a87a	91 63		sta ($63),y		sta  ($63),y
.a87c	c8		iny			iny
.a87d	8a		txa			txa
.a87e	91 63		sta ($63),y		sta  ($63),y
.a880	88		dey			dey
.a881	b1 63		lda ($63),y		lda  ($63),y
.a883					L10000_END:
.a883					L10001:
>a883	02					.byte L10001_END-L10001-1
.a884	91 63		sta ($63),y		sta  ($63),y
.a886					L10001_END:
.a886					L10002:
>a886	02					.byte L10002_END-L10002-1
.a887	84 63		sty $63			sty  $63
.a889					L10002_END:
.a889					L10003:
>a889	02					.byte L10003_END-L10003-1
.a88a	85 63		sta $63			sta  $63
.a88c					L10003_END:
.a88c					L10004:
>a88c	02					.byte L10004_END-L10004-1
.a88d	85 63		sta $63			sta  $63
.a88f					L10004_END:
.a88f					L10005:
>a88f	02					.byte L10005_END-L10005-1
>a890	a3 00					.byte $a3,$00
.a892					L10005_END:
.a892					L10006:
>a892	06					.byte L10006_END-L10006-1
.a893	8d 63 73	sta $7363		sta  $7363
.a896	8e 83 73	stx $7383		stx  $7383
.a899					L10006_END:
.a899					L10007:
>a899	04					.byte L10007_END-L10007-1
.a89a	85 63		sta $63			sta  $63
.a89c	86 83		stx $83			stx  $83
.a89e					L10007_END:
.a89e					L10008:
>a89e	03					.byte L10008_END-L10008-1
.a89f	8c 63 73	sty $7363		sty  $7363
.a8a2					L10008_END:
.a8a2					L10009:
>a8a2	03					.byte L10009_END-L10009-1
.a8a3	8d 63 73	sta $7363		sta  $7363
.a8a6					L10009_END:
.a8a6					L10010:
>a8a6	03					.byte L10010_END-L10010-1
.a8a7	8d 63 73	sta $7363		sta  $7363
.a8aa					L10010_END:
.a8aa					L10011:
>a8aa	02					.byte L10011_END-L10011-1
.a8ab	a4 63		ldy $63			ldy  $63
.a8ad					L10011_END:
.a8ad					L10012:
>a8ad	03					.byte L10012_END-L10012-1
.a8ae	ac 63 73	ldy $7363		ldy  $7363
.a8b1					L10012_END:
.a8b1					L10013:
>a8b1	02					.byte L10013_END-L10013-1
.a8b2	a0 63		ldy #$63		ldy  #$63
.a8b4					L10013_END:
.a8b4					L10014:
>a8b4	01					.byte L10014_END-L10014-1
.a8b5	a8		tay			tay
.a8b6					L10014_END:
.a8b6					L10015:
>a8b6	01					.byte L10015_END-L10015-1
.a8b7	a8		tay			tay
.a8b8					L10015_END:
.a8b8					L10016:
>a8b8	02					.byte L10016_END-L10016-1
>a8b9	a3 01					.byte $a3,$01
.a8bb					L10016_END:
.a8bb					L10017:
>a8bb	02					.byte L10017_END-L10017-1
>a8bc	a3 02					.byte $a3,$02
.a8be					L10017_END:
.a8be					L10018:
>a8be	02					.byte L10018_END-L10018-1
>a8bf	a3 03					.byte $a3,$03
.a8c1					L10018_END:
.a8c1					L10019:
>a8c1	02					.byte L10019_END-L10019-1
>a8c2	a3 04					.byte $a3,$04
.a8c4					L10019_END:
.a8c4					L10020:
>a8c4	04					.byte L10020_END-L10020-1
.a8c5	a9 63		lda #$63		lda  #$63
.a8c7	a2 73		ldx #$73		ldx  #$73
.a8c9					L10020_END:
.a8c9					L10021:
>a8c9	07					.byte L10021_END-L10021-1
.a8ca	c8		iny			iny
.a8cb	b1 63		lda ($63),y		lda  ($63),y
.a8cd	aa		tax			tax
.a8ce	88		dey			dey
.a8cf	b1 63		lda ($63),y		lda  ($63),y
.a8d1					L10021_END:
.a8d1					L10022:
>a8d1	04					.byte L10022_END-L10022-1
.a8d2	a5 63		lda $63			lda  $63
.a8d4	a2 00		ldx #$00		ldx  #0
.a8d6					L10022_END:
.a8d6					L10023:
>a8d6	06					.byte L10023_END-L10023-1
.a8d7	ad 63 73	lda $7363		lda  $7363
.a8da	ae 83 73	ldx $7383		ldx  $7383
.a8dd					L10023_END:
.a8dd					L10024:
>a8dd	04					.byte L10024_END-L10024-1
.a8de	a5 63		lda $63			lda  $63
.a8e0	a6 83		ldx $83			ldx  $83
.a8e2					L10024_END:
.a8e2					L10025:
>a8e2	05					.byte L10025_END-L10025-1
.a8e3	ad 63 73	lda $7363		lda  $7363
.a8e6	a2 00		ldx #$00		ldx  #0
.a8e8					L10025_END:
.a8e8					L10026:
>a8e8	04					.byte L10026_END-L10026-1
.a8e9	a9 63		lda #$63		lda  #$63
.a8eb	a2 73		ldx #$73		ldx  #$73
.a8ed					L10026_END:
.a8ed					L10027:
>a8ed	03					.byte L10027_END-L10027-1
.a8ee	98		tya			tya
.a8ef	a2 00		ldx #$00		ldx  #0
.a8f1					L10027_END:
.a8f1					L10028:
>a8f1	02					.byte L10028_END-L10028-1
.a8f2	a2 00		ldx #$00		ldx  #0
.a8f4					L10028_END:
.a8f4					L10029:
>a8f4	02					.byte L10029_END-L10029-1
>a8f5	a3 05					.byte $a3,$05
.a8f7					L10029_END:
.a8f7					L10030:
>a8f7	02					.byte L10030_END-L10030-1
>a8f8	a3 06					.byte $a3,$06
.a8fa					L10030_END:
.a8fa					L10031:
>a8fa	02					.byte L10031_END-L10031-1
>a8fb	a3 07					.byte $a3,$07
.a8fd					L10031_END:
.a8fd					L10032:
>a8fd	02					.byte L10032_END-L10032-1
>a8fe	a3 08					.byte $a3,$08
.a900					L10032_END:
.a900					L10033:
>a900	02					.byte L10033_END-L10033-1
>a901	a3 09					.byte $a3,$09
.a903					L10033_END:
.a903					L10034:
>a903	02					.byte L10034_END-L10034-1
>a904	a3 0a					.byte $a3,$0a
.a906					L10034_END:
.a906					L10035:
>a906	02					.byte L10035_END-L10035-1
>a907	a3 0b					.byte $a3,$0b
.a909					L10035_END:
.a909					L10036:
>a909	02					.byte L10036_END-L10036-1
.a90a	b1 63		lda ($63),y		lda  ($63),y
.a90c					L10036_END:
.a90c					L10037:
>a90c	02					.byte L10037_END-L10037-1
.a90d	a5 63		lda $63			lda  $63
.a90f					L10037_END:
.a90f					L10038:
>a90f	03					.byte L10038_END-L10038-1
.a910	ad 63 73	lda $7363		lda  $7363
.a913					L10038_END:
.a913					L10039:
>a913	02					.byte L10039_END-L10039-1
.a914	a9 63		lda #$63		lda  #$63
.a916					L10039_END:
.a916					L10040:
>a916	01					.byte L10040_END-L10040-1
.a917	98		tya			tya
.a918					L10040_END:
.a918					L10041:
>a918	00					.byte L10041_END-L10041-1
.a919					L10041_END:
.a919					L10042:
>a919	02					.byte L10042_END-L10042-1
>a91a	a3 0c					.byte $a3,$0c
.a91c					L10042_END:
.a91c					ExecutableVectorTable:
>a91c	20 a5					.word Action_call                      ; 0
>a91e	59 a6					.word Action_wordvar                   ; 1
>a920	09 a6					.word Action_until                     ; 2
>a922	00 a6					.word Action_repeat                    ; 3
>a924	c8 a6					.word Action_dictionarycrunch          ; 4
>a926	db a4					.word Action_procedure_def             ; 5
>a928	30 a6					.word Action_next                      ; 6
>a92a	9b a5					.word Action_if                        ; 7
>a92c	10 a5					.word Action_endproc                   ; 8
>a92e	d2 a5					.word Action_endif                     ; 9
>a930	b0 a5					.word Action_else                      ; 10
>a932	55 a6					.word Action_bytevar                   ; 11
>a934	1d a6					.word Action_afor                      ; 12
.a936					SystemDictionary:
>a936	0c					.byte	12
>a937	4d					.byte	'M'
>a938	79 a8					.word	L10000
>a93a	00					.byte	0
>a93b	06					.byte	6
>a93c	f3 db d9 dd bd d2			.byte	$f3,$db,$d9,$dd,$bd,$d2
>a942	0c					.byte	12
>a943	4d					.byte	'M'
>a944	83 a8					.word	L10001
>a946	00					.byte	0
>a947	06					.byte	6
>a948	f3 db d9 dd bd c1			.byte	$f3,$db,$d9,$dd,$bd,$c1
>a94e	09					.byte	9
>a94f	4d					.byte	'M'
>a950	86 a8					.word	L10002
>a952	00					.byte	0
>a953	03					.byte	3
>a954	f3 bd d9				.byte	$f3,$bd,$d9
>a957	09					.byte	9
>a958	4d					.byte	'M'
>a959	89 a8					.word	L10003
>a95b	00					.byte	0
>a95c	03					.byte	3
>a95d	f3 bd d2				.byte	$f3,$bd,$d2
>a960	09					.byte	9
>a961	4d					.byte	'M'
>a962	8c a8					.word	L10004
>a964	00					.byte	0
>a965	03					.byte	3
>a966	f3 bd c1				.byte	$f3,$bd,$c1
>a969	07					.byte	7
>a96a	4d					.byte	'M'
>a96b	8f a8					.word	L10005
>a96d	00					.byte	0
>a96e	01					.byte	1
>a96f	f0					.byte	$f0
>a970	09					.byte	9
>a971	4d					.byte	'M'
>a972	92 a8					.word	L10006
>a974	00					.byte	0
>a975	03					.byte	3
>a976	ec bd d2				.byte	$ec,$bd,$d2
>a979	09					.byte	9
>a97a	4d					.byte	'M'
>a97b	99 a8					.word	L10007
>a97d	00					.byte	0
>a97e	03					.byte	3
>a97f	e9 bd d2				.byte	$e9,$bd,$d2
>a982	09					.byte	9
>a983	4d					.byte	'M'
>a984	9e a8					.word	L10008
>a986	00					.byte	0
>a987	03					.byte	3
>a988	e3 bd d9				.byte	$e3,$bd,$d9
>a98b	09					.byte	9
>a98c	4d					.byte	'M'
>a98d	a2 a8					.word	L10009
>a98f	00					.byte	0
>a990	03					.byte	3
>a991	e3 bd d2				.byte	$e3,$bd,$d2
>a994	09					.byte	9
>a995	4d					.byte	'M'
>a996	a6 a8					.word	L10010
>a998	00					.byte	0
>a999	03					.byte	3
>a99a	e3 bd c1				.byte	$e3,$bd,$c1
>a99d	09					.byte	9
>a99e	4d					.byte	'M'
>a99f	aa a8					.word	L10011
>a9a1	00					.byte	0
>a9a2	03					.byte	3
>a9a3	d9 bd f3				.byte	$d9,$bd,$f3
>a9a6	09					.byte	9
>a9a7	4d					.byte	'M'
>a9a8	ad a8					.word	L10012
>a9aa	00					.byte	0
>a9ab	03					.byte	3
>a9ac	d9 bd e3				.byte	$d9,$bd,$e3
>a9af	09					.byte	9
>a9b0	4d					.byte	'M'
>a9b1	b1 a8					.word	L10013
>a9b3	00					.byte	0
>a9b4	03					.byte	3
>a9b5	d9 bd e2				.byte	$d9,$bd,$e2
>a9b8	09					.byte	9
>a9b9	4d					.byte	'M'
>a9ba	b4 a8					.word	L10014
>a9bc	00					.byte	0
>a9bd	03					.byte	3
>a9be	d9 bd d2				.byte	$d9,$bd,$d2
>a9c1	09					.byte	9
>a9c2	4d					.byte	'M'
>a9c3	b6 a8					.word	L10015
>a9c5	00					.byte	0
>a9c6	03					.byte	3
>a9c7	d9 bd c1				.byte	$d9,$bd,$c1
>a9ca	0a					.byte	10
>a9cb	4d					.byte	'M'
>a9cc	b8 a8					.word	L10016
>a9ce	00					.byte	0
>a9cf	04					.byte	4
>a9d0	57 4f 52 c4				.byte	$57,$4f,$52,$c4
>a9d4	0b					.byte	11
>a9d5	4d					.byte	'M'
>a9d6	bb a8					.word	L10017
>a9d8	00					.byte	0
>a9d9	05					.byte	5
>a9da	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
>a9df	0c					.byte	12
>a9e0	4d					.byte	'M'
>a9e1	be a8					.word	L10018
>a9e3	00					.byte	0
>a9e4	06					.byte	6
>a9e5	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
>a9eb	13					.byte	19
>a9ec	4d					.byte	'M'
>a9ed	c1 a8					.word	L10019
>a9ef	00					.byte	0
>a9f0	0d					.byte	13
>a9f1	52 45 4d 4f 56 45 2e 4c			.byte	$52,$45,$4d,$4f,$56,$45,$2e,$4c,$4f,$43,$41,$4c,$d3
>a9f9	4f 43 41 4c d3
>a9fe	09					.byte	9
>a9ff	4d					.byte	'M'
>aa00	c4 a8					.word	L10020
>aa02	00					.byte	0
>aa03	03					.byte	3
>aa04	d2 bd f7				.byte	$d2,$bd,$f7
>aa07	0c					.byte	12
>aa08	4d					.byte	'M'
>aa09	c9 a8					.word	L10021
>aa0b	00					.byte	0
>aa0c	06					.byte	6
>aa0d	d2 bd f3 db d9 dd			.byte	$d2,$bd,$f3,$db,$d9,$dd
>aa13	09					.byte	9
>aa14	4d					.byte	'M'
>aa15	d1 a8					.word	L10022
>aa17	00					.byte	0
>aa18	03					.byte	3
>aa19	d2 bd f3				.byte	$d2,$bd,$f3
>aa1c	09					.byte	9
>aa1d	4d					.byte	'M'
>aa1e	d6 a8					.word	L10023
>aa20	00					.byte	0
>aa21	03					.byte	3
>aa22	d2 bd ec				.byte	$d2,$bd,$ec
>aa25	09					.byte	9
>aa26	4d					.byte	'M'
>aa27	dd a8					.word	L10024
>aa29	00					.byte	0
>aa2a	03					.byte	3
>aa2b	d2 bd e9				.byte	$d2,$bd,$e9
>aa2e	09					.byte	9
>aa2f	4d					.byte	'M'
>aa30	e2 a8					.word	L10025
>aa32	00					.byte	0
>aa33	03					.byte	3
>aa34	d2 bd e3				.byte	$d2,$bd,$e3
>aa37	09					.byte	9
>aa38	4d					.byte	'M'
>aa39	e8 a8					.word	L10026
>aa3b	00					.byte	0
>aa3c	03					.byte	3
>aa3d	d2 bd e2				.byte	$d2,$bd,$e2
>aa40	09					.byte	9
>aa41	4d					.byte	'M'
>aa42	ed a8					.word	L10027
>aa44	00					.byte	0
>aa45	03					.byte	3
>aa46	d2 bd d9				.byte	$d2,$bd,$d9
>aa49	09					.byte	9
>aa4a	4d					.byte	'M'
>aa4b	f1 a8					.word	L10028
>aa4d	00					.byte	0
>aa4e	03					.byte	3
>aa4f	d2 bd c1				.byte	$d2,$bd,$c1
>aa52	0a					.byte	10
>aa53	4d					.byte	'M'
>aa54	f4 a8					.word	L10029
>aa56	00					.byte	0
>aa57	04					.byte	4
>aa58	50 52 4f c3				.byte	$50,$52,$4f,$c3
>aa5c	0a					.byte	10
>aa5d	4d					.byte	'M'
>aa5e	f7 a8					.word	L10030
>aa60	00					.byte	0
>aa61	04					.byte	4
>aa62	4e 45 58 d4				.byte	$4e,$45,$58,$d4
>aa66	08					.byte	8
>aa67	4d					.byte	'M'
>aa68	fa a8					.word	L10031
>aa6a	00					.byte	0
>aa6b	02					.byte	2
>aa6c	49 c6					.byte	$49,$c6
>aa6e	0d					.byte	13
>aa6f	4d					.byte	'M'
>aa70	fd a8					.word	L10032
>aa72	00					.byte	0
>aa73	07					.byte	7
>aa74	45 4e 44 50 52 4f c3			.byte	$45,$4e,$44,$50,$52,$4f,$c3
>aa7b	0b					.byte	11
>aa7c	4d					.byte	'M'
>aa7d	00 a9					.word	L10033
>aa7f	00					.byte	0
>aa80	05					.byte	5
>aa81	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
>aa86	0a					.byte	10
>aa87	4d					.byte	'M'
>aa88	03 a9					.word	L10034
>aa8a	00					.byte	0
>aa8b	04					.byte	4
>aa8c	45 4c 53 c5				.byte	$45,$4c,$53,$c5
>aa90	0a					.byte	10
>aa91	4d					.byte	'M'
>aa92	06 a9					.word	L10035
>aa94	00					.byte	0
>aa95	04					.byte	4
>aa96	42 59 54 c5				.byte	$42,$59,$54,$c5
>aa9a	0c					.byte	12
>aa9b	4d					.byte	'M'
>aa9c	09 a9					.word	L10036
>aa9e	00					.byte	0
>aa9f	06					.byte	6
>aaa0	c1 bd f3 db d9 dd			.byte	$c1,$bd,$f3,$db,$d9,$dd
>aaa6	09					.byte	9
>aaa7	4d					.byte	'M'
>aaa8	0c a9					.word	L10037
>aaaa	00					.byte	0
>aaab	03					.byte	3
>aaac	c1 bd f3				.byte	$c1,$bd,$f3
>aaaf	09					.byte	9
>aab0	4d					.byte	'M'
>aab1	0f a9					.word	L10038
>aab3	00					.byte	0
>aab4	03					.byte	3
>aab5	c1 bd e3				.byte	$c1,$bd,$e3
>aab8	09					.byte	9
>aab9	4d					.byte	'M'
>aaba	13 a9					.word	L10039
>aabc	00					.byte	0
>aabd	03					.byte	3
>aabe	c1 bd e2				.byte	$c1,$bd,$e2
>aac1	09					.byte	9
>aac2	4d					.byte	'M'
>aac3	16 a9					.word	L10040
>aac5	00					.byte	0
>aac6	03					.byte	3
>aac7	c1 bd d9				.byte	$c1,$bd,$d9
>aaca	09					.byte	9
>aacb	4d					.byte	'M'
>aacc	18 a9					.word	L10041
>aace	00					.byte	0
>aacf	03					.byte	3
>aad0	c1 bd d2				.byte	$c1,$bd,$d2
>aad3	0b					.byte	11
>aad4	4d					.byte	'M'
>aad5	19 a9					.word	L10042
>aad7	00					.byte	0
>aad8	05					.byte	5
>aad9	41 2e 46 4f d2				.byte	$41,$2e,$46,$4f,$d2
>aade	00					.byte	$00

;******  Return to file: main.asm


;******  Processing file: utility/loadcode.asm

.aadf					LoadBasicCode:
.aadf	a9 0e		lda #$0e			lda 	#(LBCTest) & $FF
.aae1	85 0a		sta $0a				sta 	zTemp0
.aae3	a9 ab		lda #$ab			lda 	#(LBCTest) >> 8
.aae5	85 0b		sta $0b				sta 	zTemp0+1
.aae7	a9 01		lda #$01			lda 	#($801) & $FF
.aae9	85 0c		sta $0c				sta 	zTemp1
.aaeb	a9 08		lda #$08			lda 	#($801) >> 8
.aaed	85 0d		sta $0d				sta 	zTemp1+1
.aaef					_LBCCopy:
.aaef	a0 02		ldy #$02			ldy 	#2							; skip over the loading address
.aaf1	b1 0a		lda ($0a),y			lda 	(zTemp0),y 					; skips first two bytes :)
.aaf3	92 0c		sta ($0c)			sta 	(zTemp1)
.aaf5	e6 0a		inc $0a				inc 	zTemp0
.aaf7	d0 02		bne $aafb			bne 	_NoCarry
.aaf9	e6 0b		inc $0b				inc 	zTemp0+1
.aafb					_NoCarry:
.aafb	e6 0c		inc $0c				inc 	zTemp1
.aafd	d0 02		bne $ab01			bne 	_NoCarry
.aaff	e6 0d		inc $0d				inc 	zTemp1+1
.ab01					_NoCarry:
.ab01	a5 0a		lda $0a				lda 	zTemp0
.ab03	c9 c0		cmp #$c0			cmp 	#LBCTestEnd & $FF
.ab05	d0 e8		bne $aaef			bne 	_LBCCopy
.ab07	a5 0b		lda $0b				lda 	zTemp0+1
.ab09	c9 ab		cmp #$ab			cmp 	#LBCTestEnd >> 8
.ab0b	d0 e2		bne $aaef			bne 	_LBCCopy
.ab0d	60		rts				rts
.ab0e					LBCTest:
>ab0e	01 08 0c 08 e8 03 99 c7				.binary 	"../generated/test.prg"
>ab16	28 31 34 29 00 17 08 f2 03 9e 34 30 39 36 30 00
>ab26	2b 08 fc 03 8f 2e 20 42 59 54 45 20 5a 42 31 40
>ab36	24 30 34 00 3f 08 06 04 8f 2e 20 57 4f 52 44 20
>ab46	5a 57 31 40 24 31 34 00 55 08 10 04 8f 2e 20 42
>ab56	59 54 45 20 41 42 31 40 24 31 32 33 34 00 6b 08
>ab66	1a 04 8f 2e 20 57 4f 52 44 20 41 57 31 40 24 32
>ab76	43 44 45 00 7e 08 24 04 8f 2e 20 50 52 4f 43 20
>ab86	4d 41 49 4e 28 29 00 95 08 2e 04 8f 2e 20 52 20
>ab96	3d 20 24 43 44 31 32 20 59 3d 24 34 35 00 a0 08
>aba6	38 04 8f 2e 20 59 3d 52 00 af 08 42 04 8f 2e 20
>abb6	45 4e 44 50 52 4f 43 00 00 00
.abc0					LBCTestEnd:

;******  Return to file: main.asm

.abc0					EndCode:

;******  End of listing
