
; 64tass Turbo Assembler Macro V1.54.1900? listing file
; 64tass -Wall -q -c -D loadbas=1 -o lean.prg -L lean.lst main.asm
; Sat Nov  2 15:54:58 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					loadbas=1

;******  Processing input file: main.asm

=$0801					ProgramStart = $0801 						; where source code starts.
=$bb1a					UserDictionary = EndCode 					; user dictionary
=$a000					CodeMemory = $A000 							; where object code goes.
=$01					CodePage = $01 								; page for code memory.
=$063f					AssemblerStack = $063F 						; compiler stack space.
=$0640					lineBuffer = $0640	 						; current line, match encoded.
=$0680					valueBuffer = $0680 						; buffer for associated values.
=$0700					VariableMemory = $0700 						; data memory allocaed from here
=$0700					BankCode = $0700 							; bank handling code goes here.
=64					LINEBUFFSIZE = 64
=128					VALBUFFSIZE = 128

;******  Processing file: data.asm

=$9f61					ramBank = $9F61 							; RAM Memory bank register.
>0010					scanPtr:	.word ?							; BASIC scan position.
>0012					aStackPtr:	.word ? 						; compiler stack.
>0014					dictPtr:	.word ? 						; dictionary pointer
>0016					genPtr:		.word ? 						; code generation pointer
>0018					varPtr: 	.word ?							; next free variable pointer.
>001a					zTemp0:		.word ? 						; temps.
>001c					zTemp1:		.word ?
>001e					zTemp2:		.word ?
>0020					zTemp3:		.word ?
>0022					lastCreate:	.word ? 						; last created dictionary word
>0024					codePtr:	.word ? 						; code pointer
>0026					codeBank:	.byte ?							; code bank
>0027					originalSP:			.byte ? 				; 6502 stack on entry.
>0028					lastDefine:			.fill 3 				; last defined word (addr/page)
>002b					lineNumber:			.word ? 				; current line number
>002d					identStart:			.byte ? 				; start offset of current identifier
>002e					dirLowByte:			.byte ?					; values returned from search
>002f					dirHighByte:		.byte ?
>0030					dirBank:			.byte ?
>0031					dirLength:			.byte ?
>0032					valueBufferPos:		.byte ? 				; position in value buffer.
>0033					genPos: 			.byte ? 				; position in line buffer, generation.
>0034					generateVar:		.word ? 				; variables used in set value
>0036					elementData:		.fill 3 				; data from matched constant/identifier
>0039					codeBackup:			.fill 3 				; backup code pointer.
>003c					varSize:			.byte ? 				; size of current variable.
>003d					matchCount:			.byte ? 				; successful line matches (for errors)
=$8f					REM_TOKEN = $8F 							; C64 REM Token
="*"					SCM_TOP = '*'								; top of stack marker.
="P"					SCM_PROC = 'P'								; procedure marker
="R"					SCM_REPEAT = 'R'							; repeat marker
="F"					SCM_FOR = 'F' 								; for marker (8 bit)
="G"					SCM_INTFOR = 'G'							; for marker (16 bit)
="I"					SCM_IF = 'I'								; if/else/endif marker.
=$60					CPU_RETURN = $60 							; RTS opcode.
=$48					CPU_PHA = $48 								; PHA
=$68					CPU_PLA = $68 								; PLA
=$3a					CPU_DECA = $3A 								; DEC A
=$d0					CPU_BNE = $D0								; BNE
=$80					CPU_BRA = $80								; BRA
=$20					CPU_JSR = $20 								; JSR
=$da					CPU_PHX = $DA 								; PHX
=$fa					CPU_PLX = $FA 								; PLX
=$c9					CPU_CMPIM = $C9 							; CMP#
=$e0					CPU_CPXIM = $E0 							; CPX#
=$ca					CPU_DEX = $CA 								; DEX

;******  Return to file: main.asm


;******  Processing file: generated/cgconst.inc

=$53					CGEN_C_ISZERO = $53
=$63					CGEN_C_LOW = $63
=$73					CGEN_C_HIGH = $73
=$83					CGEN_C_LOWPLUS1 = $83
=$93					CGEN_C_SETDATA = $93
=$a3					CGEN_C_EXEC = $a3

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.a000					Start:
.a000	4c 21 a0	jmp $a021			jmp 	RunCompiler
.a003	4c 59 a0	jmp $a059			jmp 	CallCodeMemory
.a006					LeanMessage:
>a006	0d 20 20 20 20 4c 45 41				.text 	13,"    LEAN V0.3 (01-NOV-19)",0
>a00e	4e 20 56 30 2e 33 20 28 30 31 2d 4e 4f 56 2d 31
>a01e	39 29 00
.a021					RunCompiler:
.a021	ba		tsx				tsx 									; save SP
.a022	86 27		stx $27				stx 	originalSP
.a024	a2 05		ldx #$05			ldx 	#5 								; set up vectors.
.a026	bd 00 a0	lda $a000,x	_RCCopy:lda 	Start,x
.a029	95 00		sta $00,x			sta 	$00,x
.a02b	ca		dex				dex
.a02c	10 f8		bpl $a026			bpl 	_RCCopy
.a02e	20 2e b4	jsr $b42e			jsr 	LoadBasicCode
.a031	20 ab a3	jsr $a3ab			jsr 	BankCopyCode 					; copy banked code to RAM space.
.a034	20 e6 a8	jsr $a8e6			jsr 	StackReset 						; reset convert stack.
.a037	20 2a a7	jsr $a72a			jsr 	VariableReset 					; reset variable memory.
.a03a	20 20 a4	jsr $a420			jsr 	DictionaryReset 				; reset user dictionary
.a03d	20 94 a4	jsr $a494			jsr 	CodeReset 						; reset code output.
.a040	20 77 a0	jsr $a077			jsr 	ScannerReset 					; reset scanner
.a043					AsmLoop:
.a043	20 7a a0	jsr $a07a			jsr 	ScannerFind 					; next thing in code
.a046	90 08		bcc $a050			bcc 	AsmEnd 							; nothing more
.a048	20 bc a0	jsr $a0bc			jsr 	ProcessLineToBuffer 			; convert it.
.a04b	20 08 a2	jsr $a208			jsr 	GeneratorSearch 				; check it for generators
.a04e	80 f3		bra $a043			bra 	AsmLoop 						; and keep going.
.a050					AsmEnd:
.a050	a9 2a		lda #$2a			lda 	#SCM_TOP 						; check structures are done
.a052	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a055					ReturnCaller:
.a055	a6 27		ldx $27				ldx		originalSP 						; restore XP and exit.
.a057	9a		txs				txs
.a058	60		rts				rts
.a059					CallCodeMemory:
.a059	a5 28		lda $28				lda 	lastDefine 					; check if something defined (no error)
.a05b	05 29		ora $29				ora 	lastDefine+1
.a05d	05 2a		ora $2a				ora 	lastDefine+2
.a05f	f0 06		beq $a067			beq 	_NoExecute
.a061	20 ab a3	jsr $a3ab			jsr 	BankCopyCode 				; copy banked code to RAM space.
.a064	4c 02 07	jmp $0702			jmp 	CodeRunCode
.a067					_NoExecute:
.a067	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a06a	4c 45 41 4e 3a 4e 4f 20				.text 	"LEAN:","NO CODE",$00
>a072	43 4f 44 45 00

;******  Processing file: lean/scanner.asm

.a077					ScannerReset:
.a077	64 11		stz $11				stz 	scanPtr+1 					; zero MSB means the start
.a079	60		rts				rts
.a07a					ScannerFind:
.a07a	48		pha				pha 								; save registers
.a07b	da		phx				phx
.a07c	5a		phy				phy
.a07d	a5 11		lda $11				lda 	scanPtr+1 					; reset the scanner pointer ?
.a07f	d0 0a		bne $a08b			bne 	_SFScanForward 				; no, scan forward from current.
.a081	a9 01		lda #$01			lda 	#(ProgramStart) & $FF
.a083	85 10		sta $10				sta 	scanPtr
.a085	a9 08		lda #$08			lda 	#(ProgramStart) >> 8
.a087	85 11		sta $11				sta 	scanPtr+1
.a089	80 12		bra $a09d			bra 	_SFCheck 					; check if this one is a REM.
.a08b					_SFScanForward:
.a08b	a0 01		ldy #$01			ldy 	#1 							; check if the offset is zero
.a08d	b2 10		lda ($10)			lda 	(scanPtr)
.a08f	11 10		ora ($10),y			ora 	(scanPtr),y
.a091	18		clc				clc 								; if so exit with CC.
.a092	f0 24		beq $a0b8			beq 	_SFExit
.a094	b2 10		lda ($10)			lda 	(scanPtr) 					; forward to next.
.a096	aa		tax				tax
.a097	b1 10		lda ($10),y			lda 	(scanPtr),y
.a099	86 10		stx $10				stx 	scanPtr
.a09b	85 11		sta $11				sta 	scanPtr+1
.a09d					_SFCheck:
.a09d	a0 02		ldy #$02			ldy 	#2 								; copy line number.
.a09f	b1 10		lda ($10),y			lda 	(scanPtr),y
.a0a1	85 2b		sta $2b				sta 	lineNumber
.a0a3	c8		iny				iny
.a0a4	b1 10		lda ($10),y			lda 	(scanPtr),y
.a0a6	85 2c		sta $2c				sta 	lineNumber+1
.a0a8	c8		iny				iny
.a0a9	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it a "REM." line ?
.a0ab	c9 8f		cmp #$8f			cmp 	#REM_TOKEN
.a0ad	d0 dc		bne $a08b			bne 	_SFScanForward
.a0af	c8		iny				iny
.a0b0	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it followed by a '.'
.a0b2	c8		iny				iny
.a0b3	c9 2e		cmp #$2e			cmp 	#"."
.a0b5	d0 d4		bne $a08b			bne 	_SFScanForward
.a0b7	38		sec				sec 								; found something, exit with CS.
.a0b8					_SFExit:
.a0b8	7a		ply				ply 								; load registers and exit.
.a0b9	fa		plx				plx
.a0ba	68		pla				pla
.a0bb	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: lean/process.asm

.a0bc					ProcessLineToBuffer:
.a0bc	a0 06		ldy #$06			ldy 	#6 							; position in line
.a0be	a2 00		ldx #$00			ldx 	#0 							; position in buffer
.a0c0	64 32		stz $32				stz 	valueBufferPos 				; reset value buffer pos
.a0c2	a9 ff		lda #$ff			lda 	#$FF
.a0c4	8d 80 06	sta $0680			sta 	valueBuffer 				; erase value buffer (end marker $FF)
.a0c7					_PLTConvert:
.a0c7	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a0c9	f0 7a		beq $a145			beq 	_PLTExit
.a0cb	c8		iny				iny
.a0cc	c9 20		cmp #$20			cmp 	#' ' 						; skip over spaces.
.a0ce	f0 f7		beq $a0c7			beq 	_PLTConvert
.a0d0	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; identifier character.
.a0d3	b0 08		bcs $a0dd			bcs 	_PLTIsIdentifier 			; it's an identifier.
.a0d5	09 80		ora #$80			ora 	#$80 						; set bit 7
.a0d7	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write out
.a0da	e8		inx				inx
.a0db	80 ea		bra $a0c7			bra 	_PLTConvert
.a0dd					_PLTIsIdentifier:
.a0dd	86 2d		stx $2d				stx 	identStart 					; save as start of identifier.
.a0df					_PLTGetIdentifier:
.a0df	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out.
.a0e2	e8		inx				inx
.a0e3	b1 10		lda ($10),y			lda 	(scanPtr),y	 				; get next character
.a0e5	c8		iny				iny
.a0e6	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; still identifier
.a0e9	b0 f4		bcs $a0df			bcs 	_PLTGetIdentifier
.a0eb	88		dey				dey 								; undo last bump.
.a0ec					_PLTGotIdentifier:
.a0ec	bd 3f 06	lda $063f,x			lda 	lineBuffer-1,x 				; set bit 7 of last
.a0ef	09 80		ora #$80			ora 	#$80
.a0f1	9d 3f 06	sta $063f,x			sta 	lineBuffer-1,x
.a0f4	5a		phy				phy
.a0f5	da		phx				phx
.a0f6	20 9d a1	jsr $a19d			jsr 	PLTGetAddress 				; XY <= address of identifier.
.a0f9	20 2f a4	jsr $a42f			jsr 	DictionarySearch 			; is it in the dictionaries ?
.a0fc	90 0c		bcc $a10a			bcc 	_PLTTryConstant
.a0fe	c9 50		cmp #$50			cmp 	#"P" 						; procedure, short or var ?
.a100	f0 4b		beq $a14d			beq 	_PLTFoundIdentifier
.a102	c9 53		cmp #$53			cmp 	#"S"
.a104	f0 47		beq $a14d			beq 	_PLTFoundIdentifier
.a106	c9 49		cmp #$49			cmp 	#"I"
.a108	f0 43		beq $a14d			beq 	_PLTFoundIdentifier
.a10a					_PLTTryConstant:
.a10a	20 9d a1	jsr $a19d			jsr 	PLTGetAddress 				; try as a constant
.a10d	20 56 a8	jsr $a856			jsr 	StringToInt
.a110	b0 04		bcs $a116			bcs 	_PLTAttachIdentifier
.a112	fa		plx				plx 								; leave as it is - unknown identifier
.a113	7a		ply				ply
.a114	80 b1		bra $a0c7			bra 	_PLTConvert
.a116					_PLTAttachIdentifier:
.a116	86 1a		stx $1a				stx 	zTemp0 						; save XY
.a118	84 1b		sty $1b				sty 	zTemp0+1
.a11a	fa		plx				plx 								; restore current position
.a11b	7a		ply				ply
.a11c	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a11e	c9 2d		cmp #$2d			cmp 	#"-"
.a120	d0 04		bne $a126			bne 	_PLTNotMinus
.a122	20 8f a1	jsr $a18f			jsr 	_PLTNegateZTemp0 			; negate zTemp0
.a125	c8		iny				iny 								; skip it if '-'
.a126					_PLTNotMinus:
.a126	5a		phy				phy 								; save current positions
.a127	da		phx				phx
.a128	a6 1a		ldx $1a				ldx 	zTemp0 						; restore XY number
.a12a	a4 1b		ldy $1b				ldy 	zTemp0+1
.a12c	a9 00		lda #$00			lda 	#0
.a12e	20 cd a1	jsr $a1cd			jsr 	ProcessRecordData 			; record associated data
.a131	a9 62		lda #$62			lda 	#"b"
.a133	c0 00		cpy #$00			cpy 	#0
.a135	f0 02		beq $a139			beq 	_PLTRecord
.a137	a9 77		lda #$77			lda 	#"w"
.a139					_PLTRecord:
.a139	fa		plx				plx 								; restore XY position
.a13a	7a		ply				ply
.a13b	a6 2d		ldx $2d				ldx 	identStart 					; overwrite the position with ident start
.a13d	09 80		ora #$80			ora 	#$80 						; bit 7, it's an element in its own right
.a13f	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out
.a142	e8		inx				inx 								; bump the position
.a143	80 82		bra $a0c7			bra		_PLTConvert 				; do the next one.
.a145					_PLTExit:
.a145	9e 40 06	stz $0640,x			stz 	lineBuffer,x 				; make it ASCIIZ
.a148	e0 40		cpx #$40			cpx		#LINEBUFFSIZE 				; line too long.
.a14a	b0 31		bcs $a17d			bcs 	_PLTBuffer
.a14c	60		rts				rts
.a14d					_PLTFoundIdentifier:
.a14d	48		pha				pha 								; save type.
.a14e	a6 2e		ldx $2e				ldx 	dirLowByte 					; get the dictionary AXY values
.a150	a4 2f		ldy $2f				ldy 	dirHighByte
.a152	a5 30		lda $30				lda 	dirBank
.a154	20 cd a1	jsr $a1cd			jsr 	ProcessRecordData 			; attached to identstart
.a157	68		pla				pla 								; get type back, which is I or S or P
.a158	09 20		ora #$20			ora 	#$20 						; make it lower case.
.a15a	c9 70		cmp #$70			cmp 	#"p"						; P goes untrammelled
.a15c	f0 db		beq $a139			beq 	_PLTRecord
.a15e	c0 00		cpy #$00			cpy 	#0 							; if Y = 0, e.g. zero page, use that.
.a160	f0 d7		beq $a139			beq 	_PLTRecord
.a162	49 05		eor #$05			eor 	#"i"^"l" 					; convert it to L
.a164	c9 6c		cmp #$6c			cmp 	#"l"
.a166	f0 d1		beq $a139			beq 	_PLTRecord
.a168	a9 63		lda #$63			lda 	#"c" 						; otherwise C
.a16a	80 cd		bra $a139			bra 	_PLTRecord
.a16c					_PLTError:
.a16c	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a16f	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX ?",$00
>a177	54 41 58 20 3f 00
.a17d					_PLTBuffer:
.a17d	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a180	4c 45 41 4e 3a 4c 49 4e				.text 	"LEAN:","LINE SIZE",$00
>a188	45 20 53 49 5a 45 00
.a18f					_PLTNegateZTemp0:
.a18f	38		sec				sec 								; negate zTemp0
.a190	a9 00		lda #$00			lda 	#0
.a192	e5 1a		sbc $1a				sbc 	zTemp0
.a194	85 1a		sta $1a				sta 	zTemp0
.a196	a9 00		lda #$00			lda 	#0
.a198	e5 1b		sbc $1b				sbc 	zTemp0+1
.a19a	85 1b		sta $1b				sta 	zTemp0+1
.a19c	60		rts				rts
.a19d					PLTGetAddress:
.a19d	18		clc				clc
.a19e	a5 2d		lda $2d				lda 	identStart
.a1a0	69 40		adc #$40			adc 	#lineBuffer & $FF
.a1a2	aa		tax				tax
.a1a3	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a1a5	90 01		bcc $a1a8			bcc 	_PLGANoCarry
.a1a7	c8		iny				iny
.a1a8					_PLGANoCarry:
.a1a8	60		rts				rts
.a1a9					PLTCheckCharacter:
.a1a9	c9 25		cmp #$25			cmp 	#'%'
.a1ab	f0 1c		beq $a1c9			beq 	_PLCCYes
.a1ad	c9 5f		cmp #$5f			cmp 	#'_'
.a1af	f0 18		beq $a1c9			beq 	_PLCCYes
.a1b1	c9 24		cmp #$24			cmp 	#'$'
.a1b3	f0 14		beq $a1c9			beq 	_PLCCYes
.a1b5	c9 2e		cmp #$2e			cmp 	#'.'
.a1b7	f0 10		beq $a1c9			beq 	_PLCCYes
.a1b9	c9 30		cmp #$30			cmp 	#'0'
.a1bb	90 0e		bcc $a1cb			bcc 	_PLCCNo
.a1bd	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1bf	90 08		bcc $a1c9			bcc 	_PLCCYes
.a1c1	c9 41		cmp #$41			cmp 	#'A'
.a1c3	90 06		bcc $a1cb			bcc 	_PLCCNo
.a1c5	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a1c7	b0 02		bcs $a1cb			bcs 	_PLCCNo
.a1c9					_PLCCYes:
.a1c9	38		sec				sec
.a1ca	60		rts				rts
.a1cb					_PLCCNo:
.a1cb	18		clc				clc
.a1cc	60		rts				rts
.a1cd					ProcessRecordData:
.a1cd	48		pha				pha
.a1ce	da		phx				phx
.a1cf	5a		phy				phy
.a1d0	da		phx				phx
.a1d1	a6 32		ldx $32				ldx 	valueBufferPos 				; get current position
.a1d3	9d 83 06	sta $0683,x			sta 	valueBuffer+3,x 			; copy data to it
.a1d6	98		tya				tya
.a1d7	9d 82 06	sta $0682,x			sta 	valueBuffer+2,x
.a1da	68		pla				pla
.a1db	9d 81 06	sta $0681,x			sta 	valueBuffer+1,x
.a1de	a5 2d		lda $2d				lda 	identStart
.a1e0	9d 80 06	sta $0680,x			sta 	valueBuffer+0,x
.a1e3	e8		inx				inx 								; next position
.a1e4	e8		inx				inx
.a1e5	e8		inx				inx
.a1e6	e8		inx				inx
.a1e7	86 32		stx $32				stx 	valueBufferPos 				; save
.a1e9	a9 ff		lda #$ff			lda 	#$FF 						; write end marker.
.a1eb	9d 80 06	sta $0680,x			sta 	valueBuffer,x
.a1ee	e0 80		cpx #$80			cpx 	#VALBUFFSIZE
.a1f0	b0 04		bcs $a1f6			bcs 	_PRDError
.a1f2	7a		ply				ply
.a1f3	fa		plx				plx
.a1f4	68		pla				pla
.a1f5	60		rts				rts
.a1f6					_PRDError:
.a1f6	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a1f9	4c 45 41 4e 3a 43 4f 4d				.text 	"LEAN:","COMPLEX ?",$00
>a201	50 4c 45 58 20 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/generate.asm

.a208					GeneratorSearch:
.a208	64 33		stz $33				stz 	genPos 						; reset the generator pointer
.a20a	64 3d		stz $3d				stz 	matchCount 					; reset the match count.
.a20c					_GSNextItem:
.a20c	a6 33		ldx $33				ldx 	genPos 						; check end ?
.a20e	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a211	f0 07		beq $a21a			beq 	_GSExit
.a213	20 1b a2	jsr $a21b			jsr 	GenerateOne 				; do one match
.a216	e6 3d		inc $3d				inc 	matchCount 					; bump the count.
.a218	80 f2		bra $a20c			bra 	_GSNextItem
.a21a					_GSExit:
.a21a	60		rts				rts
.a21b					GenerateOne:
.a21b	a5 33		lda $33				lda 	genPos 						; point XY to the next thing
.a21d	18		clc				clc 								; the actual address in the line buffer.
.a21e	69 40		adc #$40			adc 	#lineBuffer & $FF
.a220	aa		tax				tax
.a221	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a223	90 01		bcc $a226			bcc 	_GSNoCarry
.a225	c8		iny				iny
.a226					_GSNoCarry:
.a226	20 2c a4	jsr $a42c			jsr 	DictionarySearchSystemOnly 	; dictionary search
.a229	b0 10		bcs $a23b			bcs 	_GSFound
.a22b					_GSError:
.a22b	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a22e	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX?",$00
>a236	54 41 58 3f 00
.a23b					_GSFound:
.a23b	c9 4d		cmp #$4d			cmp 	#"M"						; check it's a match.
.a23d	d0 ec		bne $a22b			bne 	_GSError
.a23f	a4 31		ldy $31				ldy 	dirLength 					; advance to next
.a241	a6 33		ldx $33				ldx 	genPos 						; checking for a-z.
.a243					_GSCheckData:
.a243	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a246	29 7f		and #$7f			and 	#$7F
.a248	c9 61		cmp #$61			cmp 	#'a'
.a24a	90 08		bcc $a254			bcc 	_GSNotLC
.a24c	c9 7b		cmp #$7b			cmp 	#'z'+1
.a24e	b0 04		bcs $a254			bcs 	_GSNotLC
.a250	8a		txa				txa
.a251	20 d7 a2	jsr $a2d7			jsr 	GenCopyData
.a254					_GSNotLC:
.a254	e8		inx				inx
.a255	88		dey				dey
.a256	d0 eb		bne $a243			bne 	_GSCheckData
.a258	86 33		stx $33				stx 	genPos
.a25a	a5 2e		lda $2e				lda 	dirLowByte					; copy address to genPtr
.a25c	85 16		sta $16				sta 	genPtr
.a25e	a5 2f		lda $2f				lda 	dirHighByte
.a260	85 17		sta $17				sta 	genPtr+1
.a262	b2 16		lda ($16)			lda 	(genPtr)					; count in A
.a264	f0 25		beq $a28b			beq 	_GSNext 					; nothing !
.a266	aa		tax				tax 								; X is count
.a267	a0 01		ldy #$01			ldy 	#1
.a269					_GSGenerate:
.a269	b1 16		lda ($16),y			lda 	(genPtr),y 					; execute something
.a26b	c9 a3		cmp #$a3			cmp 	#CGEN_C_EXEC
.a26d	f0 1d		beq $a28c			beq 	_GSExecute
.a26f	c9 93		cmp #$93			cmp 	#CGEN_C_SETDATA 			; set data ?
.a271	d0 0e		bne $a281			bne 	_GSCopy
.a273	c8		iny				iny									; copy next two bytes out.
.a274	b1 16		lda ($16),y			lda 	(genPtr),y
.a276	85 34		sta $34				sta 	generateVar
.a278	c8		iny				iny
.a279	b1 16		lda ($16),y			lda 	(genPtr),y
.a27b	85 35		sta $35				sta 	generateVar+1
.a27d	ca		dex				dex
.a27e	ca		dex				dex
.a27f	80 06		bra $a287			bra 	_GSContinue
.a281					_GSCopy:
.a281	20 a8 a2	jsr $a2a8			jsr 	GenConvertByte 				; replace bytes
.a284	20 00 07	jsr $0700			jsr 	CodeWriteByte				; write out.
.a287					_GSContinue:
.a287	c8		iny				iny
.a288	ca		dex				dex
.a289	d0 de		bne $a269			bne 	_GSGenerate
.a28b					_GSNext:
.a28b	60		rts				rts
.a28c					_GSExecute:
.a28c	c8		iny				iny 								; grab one.
.a28d	ca		dex				dex
.a28e	da		phx				phx 								; save XY
.a28f	5a		phy				phy
.a290	b1 16		lda ($16),y			lda 	(genPtr),y 					; read the execution ID
.a292	0a		asl a				asl 	a 							; index into table.
.a293	aa		tax				tax
.a294	bd 2a ad	lda $ad2a,x			lda 	ExecutableVectorTable,x 	; read jump vector
.a297	85 1a		sta $1a				sta 	zTemp0
.a299	bd 2b ad	lda $ad2b,x			lda 	ExecutableVectorTable+1,x
.a29c	85 1b		sta $1b				sta 	zTemp0+1
.a29e	20 a5 a2	jsr $a2a5			jsr 	_GSCallzTemp0 				; call routine
.a2a1	7a		ply				ply 								; restore XY
.a2a2	fa		plx				plx
.a2a3	80 e2		bra $a287			bra 	_GSContinue
.a2a5					_GSCallzTemp0:
.a2a5	6c 1a 00	jmp ($001a)			jmp 	(zTemp0)
.a2a8					GenConvertByte:
.a2a8	c9 63		cmp #$63			cmp 	#CGEN_C_LOW
.a2aa	f0 09		beq $a2b5			beq 	_GCBLowByte
.a2ac	c9 83		cmp #$83			cmp 	#CGEN_C_LOWPLUS1
.a2ae	f0 08		beq $a2b8			beq 	_GCBLowBytePlus1
.a2b0	c9 73		cmp #$73			cmp 	#CGEN_C_HIGH
.a2b2	f0 0a		beq $a2be			beq 	_GCBHighByte
.a2b4	60		rts				rts
.a2b5					_GCBLowByte:
.a2b5	a5 36		lda $36				lda 	elementData
.a2b7	60		rts				rts
.a2b8					_GCBLowBytePlus1:
.a2b8	a5 36		lda $36				lda 	elementData
.a2ba	1a		inc a				inc 	a
.a2bb	f0 04		beq $a2c1			beq 	_GCBSystem
.a2bd	60		rts				rts
.a2be					_GCBHighByte:
.a2be	a5 37		lda $37				lda 	elementData+1
.a2c0	60		rts				rts
.a2c1					_GCBSystem:
.a2c1	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a2c4	4c 45 41 4e 3a 57 4f 52				.text 	"LEAN:","WORD OFF PAGE",$00
>a2cc	44 20 4f 46 46 20 50 41 47 45 00
.a2d7					GenCopyData:
.a2d7	48		pha				pha
.a2d8	da		phx				phx
.a2d9	5a		phy				phy
.a2da	85 1a		sta $1a				sta 	zTemp0
.a2dc	a2 fc		ldx #$fc			ldx 	#256-4
.a2de					_GCDLoop:
.a2de	e8		inx				inx 								; next slot
.a2df	e8		inx				inx
.a2e0	e8		inx				inx
.a2e1	e8		inx				inx
.a2e2	bd 80 06	lda $0680,x			lda 	valueBuffer,x 				; next in value buffer
.a2e5	c9 ff		cmp #$ff			cmp 	#$FF
.a2e7	f0 16		beq $a2ff			beq 	_GCDError 					; system ?
.a2e9	c5 1a		cmp $1a				cmp 	zTemp0 						; match.
.a2eb	d0 f1		bne $a2de			bne 	_GCDLoop
.a2ed	a0 00		ldy #$00			ldy 	#0 							; copy assoc data back
.a2ef					_GCDCopy:
.a2ef	bd 81 06	lda $0681,x			lda 	valueBuffer+1,x
.a2f2	99 36 00	sta $0036,y			sta 	elementData,y
.a2f5	e8		inx				inx
.a2f6	c8		iny				iny
.a2f7	c0 03		cpy #$03			cpy 	#3
.a2f9	d0 f4		bne $a2ef			bne 	_GCDCopy
.a2fb	7a		ply				ply
.a2fc	fa		plx				plx
.a2fd	68		pla				pla
.a2fe	60		rts				rts
.a2ff					_GCDError:
.a2ff	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a302	4c 45 41 4e 3a 53 59 53				.text 	"LEAN:","SYS0?",$00
>a30a	30 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/extract.asm

.a30d					EGetUnknownIdentifier:
.a30d	a6 33		ldx $33				ldx 	genPos 						; get next character
.a30f	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a312	29 7f		and #$7f			and 	#$7F
.a314	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; is it an identifier ?
.a317	90 15		bcc $a32e			bcc 	_EUIError 					; no
.a319	da		phx				phx 								; save start position on stack.
.a31a					_EGetFindEnd:
.a31a	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a31d	e8		inx				inx
.a31e	0a		asl a				asl 	a
.a31f	90 f9		bcc $a31a			bcc 	_EGetFindEnd
.a321	86 33		stx $33				stx 	genPos 						; points to the next thing.
.a323	68		pla				pla 								; offset
.a324	a0 06		ldy #$06			ldy 	#lineBuffer >> 8 			; make address in YX
.a326	18		clc				clc
.a327	69 40		adc #$40			adc 	#lineBuffer & $FF
.a329	aa		tax				tax
.a32a	90 01		bcc $a32d			bcc 	_EGetNoCarry
.a32c	c8		iny				iny
.a32d					_EGetNoCarry:
.a32d	60		rts				rts
.a32e					_EUIError:
.a32e	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a331	4c 45 41 4e 3a 49 44 45				.text 	"LEAN:","IDENTIFIER ?",$00
>a339	4e 54 49 46 49 45 52 20 3f 00
.a343					EGetSyntaxCheck:
.a343	48		pha				pha
.a344	da		phx				phx
.a345	a6 33		ldx $33				ldx 	genPos 						; position of next
.a347	5d 40 06	eor $0640,x			eor 	lineBuffer,x 				; bits 0-6 will be zero if match
.a34a	29 7f		and #$7f			and 	#$7F
.a34c	d0 05		bne $a353			bne 	_EGSFail 					; different
.a34e	e6 33		inc $33				inc 	genPos 						; skip it and exit
.a350	fa		plx				plx
.a351	68		pla				pla
.a352	60		rts				rts
.a353					_EGSFail:
.a353	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a356	4c 45 41 4e 3a 4d 49 53				.text 	"LEAN:","MISSING ?",$00
>a35e	53 49 4e 47 20 3f 00
.a365					EGLookNext:
.a365	da		phx				phx
.a366	a6 33		ldx $33				ldx 	genPos 						; position of next
.a368	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a36b	fa		plx				plx
.a36c	60		rts				rts
.a36d					EGSkipNext:
.a36d	e6 33		inc $33				inc 	genPos
.a36f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: bank/banking.asm

.a370					BANKEDStart:
=$0700					CodeWriteByte = BankCode
=1794					CodeRunCode = Bankcode+2
.a370	80 21		bra $a393			bra 	BankedCodeWriteByte
.a372	80 00		bra $a374			bra 	BankedCodeRun
.a374					BankedCodeRun:
.a374	ad 61 9f	lda $9f61			lda 	ramBank 					; save current RAM bank
.a377	48		pha				pha
.a378	a5 2a		lda $2a				lda 	lastDefine+2 				; set page number
.a37a	8d 61 9f	sta $9f61			sta 	ramBank
.a37d	a5 28		lda $28				lda 	lastDefine 					; overwrite the call address
.a37f	8d 1c 07	sta $071c			sta 	_BCRCode-BANKEDStart+BankCode+1
.a382	a5 29		lda $29				lda 	lastDefine+1
.a384	8d 1d 07	sta $071d			sta 	_BCRCode-BANKEDStart+BankCode+2
.a387	a5 24		lda $24				lda 	codePtr						; pass in byte after code.
.a389	a6 25		ldx $25				ldx 	codePtr+1
.a38b					_BCRCode:
.a38b	20 00 00	jsr $0000			jsr 	$0000 						; call the code
.a38e	68		pla				pla 								; restore RAM page.
.a38f	8d 61 9f	sta $9f61			sta 	ramBank
.a392	60		rts				rts
.a393					BankedCodeWriteByte:
.a393	da		phx				phx 								; save XY
.a394	5a		phy				phy
.a395	ae 61 9f	ldx $9f61			ldx 	ramBank  					; save old RAM Bank# in X
.a398	a4 26		ldy $26				ldy 	codeBank 					; get code RAM bank and save code there.
.a39a	8c 61 9f	sty $9f61			sty 	ramBank
.a39d	92 24		sta ($24)			sta 	(codePtr) 					; save byte out
.a39f	e6 24		inc $24				inc 	codePtr 					; bump pointer
.a3a1	d0 02		bne $a3a5			bne 	_CWBNoCarry
.a3a3	e6 25		inc $25				inc 	codePtr+1
.a3a5					_CWBNoCarry:
.a3a5	8e 61 9f	stx $9f61			stx 	ramBank 					; restore page
.a3a8	7a		ply				ply 								; and exit.
.a3a9	fa		plx				plx
.a3aa	60		rts				rts
.a3ab					BANKEDEnd:
.a3ab					BankCopyCode:
.a3ab	48		pha				pha
.a3ac	da		phx				phx
.a3ad	a2 3b		ldx #$3b			ldx 	#BANKEDEnd-BANKEDStart
.a3af					_BCCCopy:
.a3af	bd 70 a3	lda $a370,x			lda 	BANKEDStart,x
.a3b2	9d 00 07	sta $0700,x			sta 	BankCode,x
.a3b5	ca		dex				dex
.a3b6	e0 ff		cpx #$ff			cpx 	#$FF
.a3b8	d0 f5		bne $a3af			bne 	_BCCCopy
.a3ba	fa		plx				plx
.a3bb	68		pla				pla
.a3bc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/create.asm

.a3bd					DictionaryCreate:
.a3bd	86 1a		stx $1a				stx 	zTemp0 						; save identifier position
.a3bf	84 1b		sty $1b				sty 	zTemp0+1
.a3c1	a0 01		ldy #$01			ldy 	#1 							; write the type byte out.
.a3c3	91 14		sta ($14),y			sta 	(dictPtr),y
.a3c5	a0 00		ldy #$00			ldy 	#0 							; work out length.
.a3c7					_DCGetLength:
.a3c7	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a3c9	c8		iny				iny
.a3ca	0a		asl a				asl 	a
.a3cb	90 fa		bcc $a3c7			bcc 	_DCGetLength
.a3cd	5a		phy				phy 								; save Y on stack.
.a3ce	98		tya				tya 								; save length +6 as offset
.a3cf	18		clc				clc
.a3d0	69 06		adc #$06			adc 	#6
.a3d2	92 14		sta ($14)			sta 	(dictPtr)
.a3d4	a0 02		ldy #$02			ldy 	#2 							; fill 2 to 4 with $FF
.a3d6	a9 ff		lda #$ff	_DCFill:lda 	#$FF
.a3d8	91 14		sta ($14),y			sta 	(dictPtr),y
.a3da	c8		iny				iny
.a3db	c0 05		cpy #$05			cpy 	#5
.a3dd	d0 f7		bne $a3d6			bne 	_DCFill
.a3df	68		pla				pla 								; get length, store in X
.a3e0	aa		tax				tax
.a3e1	91 14		sta ($14),y			sta 	(dictPtr),y 				; write length out.
.a3e3	a0 00		ldy #$00			ldy 	#0
.a3e5					_DCCopy:
.a3e5	b1 1a		lda ($1a),y			lda 	(zTemp0),y 					; next identifier character
.a3e7	c8		iny				iny 								; save +1 on stack
.a3e8	5a		phy				phy
.a3e9	c8		iny				iny 								; advance by 6 total
.a3ea	c8		iny				iny
.a3eb	c8		iny				iny
.a3ec	c8		iny				iny
.a3ed	c8		iny				iny
.a3ee	91 14		sta ($14),y			sta 	(dictPtr),y 				; write out
.a3f0	7a		ply				ply 								; restore +1
.a3f1	ca		dex				dex
.a3f2	d0 f1		bne $a3e5			bne 	_DCCopy 					; do that the required# times.
.a3f4	a5 14		lda $14				lda 	dictPtr 					; copy last created
.a3f6	85 22		sta $22				sta 	lastCreate
.a3f8	a5 15		lda $15				lda 	dictPtr+1
.a3fa	85 23		sta $23				sta 	lastCreate+1
.a3fc	18		clc				clc 								; advance dictionary pointer
.a3fd	b2 14		lda ($14)			lda 	(dictPtr)
.a3ff	65 14		adc $14				adc 	dictPtr
.a401	85 14		sta $14				sta 	dictPtr
.a403	90 02		bcc $a407			bcc 	_DCNoCarry
.a405	e6 15		inc $15				inc 	dictPtr+1
.a407					_DCNoCarry:
.a407	a9 00		lda #$00			lda 	#$00 						; write end of dictionary marker
.a409	92 14		sta ($14)			sta 	(dictPtr)
.a40b	60		rts				rts
.a40c					DictionarySet:
.a40c	48		pha				pha
.a40d	da		phx				phx
.a40e	5a		phy				phy
.a40f	5a		phy				phy 								; copy data out to
.a410	a0 04		ldy #$04			ldy 	#4 							; offset 2,3,4 => A X Y
.a412	91 22		sta ($22),y			sta 	(lastCreate),y
.a414	88		dey				dey
.a415	68		pla				pla
.a416	91 22		sta ($22),y			sta 	(lastCreate),y
.a418	88		dey				dey
.a419	8a		txa				txa
.a41a	91 22		sta ($22),y			sta 	(lastCreate),y
.a41c	7a		ply				ply
.a41d	fa		plx				plx
.a41e	68		pla				pla
.a41f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/search.asm

.a420					DictionaryReset:
.a420	a9 1a		lda #$1a			lda 	#(UserDictionary) & $FF
.a422	85 14		sta $14				sta 	dictPtr
.a424	a9 bb		lda #$bb			lda 	#(UserDictionary) >> 8
.a426	85 15		sta $15				sta 	dictPtr+1
.a428	9c 1a bb	stz $bb1a			stz 	UserDictionary
.a42b	60		rts				rts
.a42c					DictionarySearchSystemOnly:
.a42c	38		sec				sec
.a42d	80 01		bra $a430			bra 	DictionarySearchContinue
.a42f					DictionarySearch:
.a42f	18		clc				clc
.a430					DictionarySearchContinue:
.a430	da		phx				phx
.a431	5a		phy				phy
.a432	08		php				php 								; CS if user only
.a433	8a		txa				txa 								; subtract 6 so can use offset Y
.a434	38		sec				sec
.a435	e9 06		sbc #$06			sbc 	#6
.a437	85 1a		sta $1a				sta 	zTemp0
.a439	98		tya				tya
.a43a	e9 00		sbc #$00			sbc 	#0
.a43c	85 1b		sta $1b				sta 	zTemp0+1 					; in zTemp0
.a43e	28		plp				plp
.a43f	b0 09		bcs $a44a			bcs 	_DSCOnly
.a441	a2 1a		ldx #$1a			ldx 	#UserDictionary & $FF
.a443	a0 bb		ldy #$bb			ldy 	#UserDictionary >> 8
.a445	20 54 a4	jsr $a454			jsr 	DSSearch
.a448	b0 07		bcs $a451			bcs 	_DSCExit
.a44a					_DSCOnly:
.a44a	a2 46		ldx #$46			ldx 	#SystemDictionary & $FF
.a44c	a0 ad		ldy #$ad			ldy 	#SystemDictionary >> 8
.a44e	20 54 a4	jsr $a454			jsr 	DSSearch
.a451					_DSCExit:
.a451	7a		ply				ply 								; restore YX
.a452	fa		plx				plx
.a453	60		rts				rts
.a454					DSSearch:
.a454	86 1c		stx $1c				stx 	zTemp1 						; save dictionary in zTemp1
.a456	84 1d		sty $1d				sty 	zTemp1+1
.a458					_DSLoop:
.a458	b2 1c		lda ($1c)			lda 	(zTemp1) 					; offset 0 ?
.a45a	f0 36		beq $a492			beq 	_DSExit
.a45c	a0 05		ldy #$05			ldy 	#5 							; get length in X
.a45e	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a460	aa		tax				tax
.a461					_DSCompare:
.a461	c8		iny				iny 								; match next ?
.a462	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a464	d1 1a		cmp ($1a),y			cmp 	(zTemp0),y
.a466	d0 1d		bne $a485			bne 	_DSNext
.a468	ca		dex				dex 								; done all
.a469	d0 f6		bne $a461			bne 	_DSCompare
.a46b	a0 05		ldy #$05			ldy 	#5 							; copy bank/address
.a46d	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a46f	85 31		sta $31				sta 	dirLength
.a471	88		dey				dey
.a472	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a474	85 30		sta $30				sta 	dirBank
.a476	88		dey				dey
.a477	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a479	85 2f		sta $2f				sta 	dirHighByte
.a47b	88		dey				dey
.a47c	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a47e	85 2e		sta $2e				sta 	dirLowByte
.a480	88		dey				dey
.a481	b1 1c		lda ($1c),y			lda 	(zTemp1),y 					; return type
.a483	38		sec				sec
.a484	60		rts				rts
.a485					_DSNext:
.a485	18		clc				clc 								; advance to next.
.a486	b2 1c		lda ($1c)			lda 	(zTemp1)
.a488	65 1c		adc $1c				adc 	zTemp1
.a48a	85 1c		sta $1c				sta 	zTemp1
.a48c	90 ca		bcc $a458			bcc 	_DSLoop
.a48e	e6 1d		inc $1d				inc 	zTemp1+1
.a490	80 c6		bra $a458			bra 	_DSLoop
.a492					_DSExit:
.a492	18		clc				clc
.a493	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/code.asm

.a494					CodeReset:
.a494	a2 00		ldx #$00			ldx 	#CodeMemory & 255
.a496	a0 a0		ldy #$a0			ldy 	#CodeMemory >> 8
.a498	a9 01		lda #$01			lda 	#CodePage
.a49a	80 00		bra $a49c			bra 	CodeSetPointer
.a49c					CodeSetPointer:
.a49c	48		pha				pha 								; copy old to backup
.a49d	a5 24		lda $24				lda 	codePtr
.a49f	85 39		sta $39				sta 	codeBackup
.a4a1	a5 25		lda $25				lda 	codePtr+1
.a4a3	85 3a		sta $3a				sta 	codeBackup+1
.a4a5	a5 26		lda $26				lda 	codeBank
.a4a7	85 3b		sta $3b				sta 	codeBackup+2
.a4a9	68		pla				pla
.a4aa	85 26		sta $26				sta 	codeBank 					; update
.a4ac	86 24		stx $24				stx 	codePtr
.a4ae	84 25		sty $25				sty 	codePtr+1
.a4b0	60		rts				rts
.a4b1					CodeRestorePointer:
.a4b1	a5 39		lda $39				lda 	codeBackup
.a4b3	85 24		sta $24				sta 	codePtr
.a4b5	a5 3a		lda $3a				lda 	codeBackup+1
.a4b7	85 25		sta $25				sta 	codePtr+1
.a4b9	a5 3b		lda $3b				lda 	codeBackup+2
.a4bb	85 26		sta $26				sta 	codeBank
.a4bd	60		rts				rts
.a4be					CodeWriteBranch:
.a4be	18		clc				clc 								; borrow 1 as branch is from one on
.a4bf	8a		txa				txa
.a4c0	e5 24		sbc $24				sbc 	codePtr
.a4c2	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; compile anyway.
.a4c5	aa		tax				tax 								; actual result in X.
.a4c6	98		tya				tya
.a4c7	e5 25		sbc $25				sbc 	codePtr+1
.a4c9	f0 14		beq $a4df			beq 	_CWBCheckPositive 			; 00xx
.a4cb	c9 ff		cmp #$ff			cmp 	#$FF
.a4cd	f0 14		beq $a4e3			beq 	_CWBCheckNegative 			; FFxx
.a4cf					_CWBError:
.a4cf	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4d2	4c 45 41 4e 3a 42 52 41				.text 	"LEAN:","BRANCH?",$00
>a4da	4e 43 48 3f 00
.a4df					_CWBCheckPositive:
.a4df	8a		txa				txa
.a4e0	30 ed		bmi $a4cf			bmi 	_CWBError
.a4e2	60		rts				rts
.a4e3					_CWBCheckNegative:
.a4e3	8a		txa				txa
.a4e4	10 e9		bpl $a4cf			bpl 	_CWBError
.a4e6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/error.asm

.a4e7					SyntaxError:
.a4e7	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4ea	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX",$00
>a4f2	54 41 58 00
.a4f6					ErrorHandler:
.a4f6	fa		plx				plx 								; pull address off.
.a4f7	7a		ply				ply
.a4f8	e8		inx				inx 								; point to message
.a4f9	d0 01		bne $a4fc			bne 	_EHNoCarry
.a4fb	c8		iny				iny
.a4fc					_EHNoCarry:
.a4fc	20 42 a5	jsr $a542			jsr 	PrintStringXY 				; print string at XY
.a4ff	a5 2b		lda $2b				lda 	lineNumber
.a501	05 2c		ora $2c				ora 	lineNumber+1
.a503	f0 28		beq $a52d			beq 	_EHNoLine
.a505	a2 3d		ldx #$3d			ldx 	#_EHMessage & $FF 			; print " AT "
.a507	a0 a5		ldy #$a5			ldy 	#_EHMessage >> 8
.a509	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a50c	a6 2b		ldx $2b				ldx 	lineNumber 					; convert line number
.a50e	a4 2c		ldy $2c				ldy 	lineNumber+1
.a510	20 0b a8	jsr $a80b			jsr 	IntToString
.a513	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a515	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a517	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a51a	a9 3a		lda #$3a			lda 	#":"						; print match count
.a51c	20 53 a5	jsr $a553			jsr 	PrintCharacter
.a51f	a6 3d		ldx $3d				ldx 	matchCount
.a521	a0 00		ldy #$00			ldy 	#0
.a523	20 0b a8	jsr $a80b			jsr 	IntToString
.a526	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a528	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a52a	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a52d					_EHNoLine:
.a52d	64 28		stz $28				stz 	lastDefine 					; disable running by zeroing last defined
.a52f	64 29		stz $29				stz 	lastDefine+1
.a531	64 2a		stz $2a				stz 	lastDefine+2
.a533	a2 06		ldx #$06			ldx 	#LeanMessage & $FF 			; print LEAN info
.a535	a0 a0		ldy #$a0			ldy 	#LeanMessage >> 8
.a537	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a53a	4c 55 a0	jmp $a055			jmp 	ReturnCaller 				; exit the compiler.
.a53d					_EHMessage:
>a53d	20 41 54 20 00					.text	" AT ",0
.a542					PrintStringXY:
.a542	86 1a		stx $1a				stx 	zTemp0
.a544	84 1b		sty $1b				sty 	zTemp0+1
.a546	a0 00		ldy #$00			ldy 	#0
.a548	b1 1a		lda ($1a),y	_PSLoop:lda 	(zTemp0),y
.a54a	f0 06		beq $a552			beq 	_PSExit
.a54c	20 53 a5	jsr $a553			jsr 	PrintCharacter
.a54f	c8		iny				iny
.a550	80 f6		bra $a548			bra 	_PSLoop
.a552	60		rts		_PSExit:rts
.a553					PrintCharacter:
.a553	48		pha				pha
.a554	da		phx				phx
.a555	5a		phy				phy
.a556	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a559	7a		ply				ply
.a55a	fa		plx				plx
.a55b	68		pla				pla
.a55c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/procedure.asm

.a55d					Action_Procedure_Def:
.a55d	20 0d a3	jsr $a30d			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a560	a9 50		lda #$50			lda 	#"P"
.a562	20 bd a3	jsr $a3bd			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a565	a5 26		lda $26				lda 	codeBank 					; and assign it the current PC value.
.a567	a6 24		ldx $24				ldx 	codePtr
.a569	a4 25		ldy $25				ldy 	codePtr+1
.a56b	86 28		stx $28				stx 	lastDefine 					; update last defined
.a56d	84 29		sty $29				sty 	lastDefine+1
.a56f	85 2a		sta $2a				sta 	lastDefine+2
.a571	20 0c a4	jsr $a40c			jsr 	DictionarySet 				; set the dictionary values.
.a574	a9 28		lda #$28			lda 	#"("
.a576	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a579	a9 29		lda #$29			lda 	#")"
.a57b	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a57e	a9 50		lda #$50			lda 	#SCM_PROC 					; put a procedure marker on the stack.
.a580	20 03 a9	jsr $a903			jsr 	StackPush
.a583	60		rts				rts
.a584					_APError:
.a584	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a587	4c 45 41 4e 3a 50 52 4f				.text 	"LEAN:","PROCDEF",$00
>a58f	43 44 45 46 00
.a594					Action_EndProc:
.a594	a9 50		lda #$50			lda 	#SCM_PROC 					; check corresponding PROC
.a596	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a599	a9 60		lda #$60			lda 	#CPU_RETURN					; write out RTS
.a59b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a59e	a9 01		lda #$01			lda 	#1 							; remove from stack.
.a5a0	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a5a3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/call.asm

.a5a4					Action_Call:
.a5a4	a5 33		lda $33				lda 	genPos 						; get position
.a5a6	3a		dec a				dec 	a 							; point to the <proc>
.a5a7	48		pha				pha 								; save it
.a5a8	a9 28		lda #$28			lda 	#'('						; check (
.a5aa	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a5ad	20 65 a3	jsr $a365			jsr 	EGLookNext 					; ) next ?
.a5b0	c9 a9		cmp #$a9			cmp 	#')'+$80
.a5b2	f0 1a		beq $a5ce			beq 	_ACNoParameters
.a5b4	a9 52		lda #$52			lda 	#"R" 	 					; do R=<something>
.a5b6	20 e7 a5	jsr $a5e7			jsr 	ACDoParameter 				; do the parameter.
.a5b9	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip the parameter
.a5bc	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what follows
.a5bf	c9 ac		cmp #$ac			cmp 	#","+$80 					; if not comma
.a5c1	d0 0b		bne $a5ce			bne 	_ACNoParameters 			; should be end of parameters
.a5c3	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip ,
.a5c6	a9 59		lda #$59			lda 	#"Y"						; do Y=<something>
.a5c8	20 e7 a5	jsr $a5e7			jsr 	ACDoParameter 				; do the parameter.
.a5cb	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip parameter.
.a5ce					_ACNoParameters:
.a5ce	a9 29		lda #$29			lda 	#')' 						; check closing bracket.
.a5d0	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a5d3	68		pla				pla 								; restore procedure posiion.
.a5d4	20 d7 a2	jsr $a2d7			jsr 	GenCopyData					; get the data
.a5d7	a9 20		lda #$20			lda 	#CPU_JSR					; output a call to it.
.a5d9	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5dc	a5 36		lda $36				lda 	elementData
.a5de	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5e1	a5 37		lda $37				lda 	elementData+1
.a5e3	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5e6	60		rts				rts
.a5e7					ACDoParameter:
.a5e7	a6 33		ldx $33				ldx 	genPos 						; save position
.a5e9	da		phx				phx
.a5ea	48		pha				pha 								; save the target register
.a5eb	bd 40 06	lda $0640,x			lda 	lineBuffer,x 				; what is there ?
.a5ee	c9 e1		cmp #$e1			cmp 	#"a"+$80 					; check a-z
.a5f0	90 1a		bcc $a60c			bcc 	_ADPError
.a5f2	c9 fb		cmp #$fb			cmp 	#"z"+$81
.a5f4	b0 16		bcs $a60c			bcs 	_ADPError
.a5f6	ca		dex				dex 								; write = before it
.a5f7	a9 bd		lda #$bd			lda 	#"="+$80
.a5f9	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a5fc	ca		dex				dex
.a5fd	68		pla				pla 								; write Y/R before that
.a5fe	09 80		ora #$80			ora 	#$80
.a600	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a603	86 33		stx $33				stx 	genPos 						; make genPos point to that.
.a605	20 1b a2	jsr $a21b			jsr 	GenerateOne 				; generate that.
.a608	68		pla				pla 								; restore position
.a609	85 33		sta $33				sta 	genPos
.a60b	60		rts				rts
.a60c					_ADPError:
.a60c	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a60f	4c 45 41 4e 3a 50 41 52				.text 	"LEAN:","PARAMETER?",$00
>a617	41 4d 45 54 45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/if.asm

.a61f					Action_If:
.a61f	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a621	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a623	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; output it
.a626	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 				; push branch position on stack
.a629	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a62b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a62e	a9 49		lda #$49			lda 	#SCM_IF 					; put if marker on the stack.
.a630	20 03 a9	jsr $a903			jsr 	StackPush
.a633	60		rts				rts
.a634					Action_Else:
.a634	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a636	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a639	a9 80		lda #$80			lda 	#CPU_BRA 					; compile branch
.a63b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a63e	a5 24		lda $24				lda 	codePtr 					; push current position on the stack
.a640	48		pha				pha
.a641	a5 25		lda $25				lda 	codePtr+1
.a643	48		pha				pha
.a644	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a646	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a649	20 64 a6	jsr $a664			jsr 	BackPatchIf 				; do the backpatch.
.a64c	68		pla				pla 								; overwrite backpatch address
.a64d	a0 01		ldy #$01			ldy 	#1 							; with stacked position.
.a64f	91 12		sta ($12),y			sta 	(aStackPtr),y
.a651	68		pla				pla
.a652	c8		iny				iny
.a653	91 12		sta ($12),y			sta 	(aStackPtr),y
.a655	60		rts				rts
.a656					Action_Endif:
.a656	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a658	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a65b	20 64 a6	jsr $a664			jsr 	BackPatchIf 				; do the backpatch.
.a65e	a9 04		lda #$04			lda 	#3+1 						; throw the stack.
.a660	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a663	60		rts				rts
.a664					BackPatchIf:
.a664	a5 24		lda $24					lda 	codePtr 					; save code pointer
.a666	48		pha				pha
.a667	a5 25		lda $25				lda 	codePtr+1
.a669	48		pha				pha
.a66a	a0 03		ldy #$03			ldy 	#3 							; AYX = address.
.a66c	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a66e	48		pha				pha
.a66f	88		dey				dey
.a670	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a672	aa		tax				tax
.a673	88		dey				dey
.a674	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a676	a8		tay				tay
.a677	68		pla				pla
.a678	20 9c a4	jsr $a49c			jsr 	CodeSetPointer 				; set write position to that
.a67b	7a		ply				ply 								; target address in YX
.a67c	fa		plx				plx
.a67d	20 be a4	jsr $a4be			jsr 	CodeWriteBranch 			; write the actual branch there
.a680	20 b1 a4	jsr $a4b1			jsr 	CodeRestorePointer 			; undo the set pointer.
.a683	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/repeat.asm

.a684					Action_Repeat:
.a684	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a687	a9 52		lda #$52			lda 	#SCM_REPEAT 					; put a repeat marker on the stack.
.a689	20 03 a9	jsr $a903			jsr 	StackPush
.a68c	60		rts				rts
.a68d					Action_Until:
.a68d	a9 52		lda #$52			lda 	#SCM_REPEAT 				; check corresponding repeat
.a68f	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a692	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a694	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a696	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a698	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch.
.a69b	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a69d	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a6a0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/for.asm

.a6a1					Action_AFor:
.a6a1	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a6a4	a9 3a		lda #$3a			lda 	#CPU_DECA 						; counts backwards from n-1 to 0.
.a6a6	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6a9	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6ab	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6ae	a9 46		lda #$46			lda 	#SCM_FOR 						; put a for marker on the stack.
.a6b0	20 03 a9	jsr $a903			jsr 	StackPush
.a6b3	60		rts				rts
.a6b4					Action_RFor:
.a6b4	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a6b7	a9 c9		lda #$c9			lda 	#CPU_CMPIM 						; dec XA code cmp #0
.a6b9	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6bc	a9 00		lda #$00			lda 	#0
.a6be	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c1	a9 d0		lda #$d0			lda 	#CPU_BNE 						; bne +1
.a6c3	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c6	a9 01		lda #$01			lda 	#1
.a6c8	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6cb	a9 ca		lda #$ca			lda 	#CPU_DEX 						; dex
.a6cd	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d0	a9 3a		lda #$3a			lda 	#CPU_DECA 						; dec a
.a6d2	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d5	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6d7	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6da	a9 da		lda #$da			lda 	#CPU_PHX
.a6dc	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6df	a9 47		lda #$47			lda 	#SCM_INTFOR 					; put a for marker on the stack.
.a6e1	20 03 a9	jsr $a903			jsr 	StackPush
.a6e4	60		rts				rts
.a6e5					Action_Next:
.a6e5	b2 12		lda ($12)			lda 	(aStackPtr) 				; check for R-Next
.a6e7	c9 47		cmp #$47			cmp 	#SCM_INTFOR
.a6e9	f0 17		beq $a702			beq 	_AN16Bit
.a6eb	a9 46		lda #$46			lda 	#SCM_FOR 					; check corresponding for
.a6ed	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a6f0	a9 68		lda #$68			lda 	#CPU_PLA 					; pop index off stack.
.a6f2	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6f5	a9 d0		lda #$d0			lda 	#CPU_BNE 					; branch back if #0
.a6f7	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a6f9	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch.
.a6fc	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a6fe	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a701	60		rts				rts
.a702					_AN16Bit:
.a702	a9 fa		lda #$fa			lda 	#CPU_PLX 					; pop index on stack
.a704	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a707	a9 68		lda #$68			lda 	#CPU_PLA
.a709	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a70c	a9 d0		lda #$d0			lda 	#CPU_BNE
.a70e	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a710	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch (check LSB)
.a713	a9 e0		lda #$e0			lda 	#CPU_CPXIM  				; check MSB of index
.a715	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a718	a9 00		lda #$00			lda 	#0
.a71a	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a71d	a9 d0		lda #$d0			lda 	#CPU_BNE
.a71f	a0 01		ldy #$01			ldy 	#1
.a721	20 37 a9	jsr $a937			jsr 	StackCompileBranch
.a724	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a726	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a729	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/variables.asm

.a72a					VariableReset:
.a72a	a9 00		lda #$00			lda 	#(VariableMemory) & $FF
.a72c	85 18		sta $18				sta 	varPtr
.a72e	a9 07		lda #$07			lda 	#(VariableMemory) >> 8
.a730	85 19		sta $19				sta 	varPtr+1
.a732	60		rts				rts
.a733					Action_ByteVar:
.a733	a9 01		lda #$01			lda 	#1
.a735	80 02		bra $a739			bra 	VariableDeclare
.a737					Action_WordVar:
.a737	a9 02		lda #$02			lda 	#2
.a739					VariableDeclare:
.a739	85 3c		sta $3c				sta 	varSize 					; save variable size.
.a73b					_VDLoop:
.a73b	a9 53		lda #$53			lda 	#"S"						; get I or S
.a73d	a6 3c		ldx $3c				ldx 	varSize
.a73f	ca		dex				dex
.a740	f0 02		beq $a744			beq 	_VDNotWord
.a742	a9 49		lda #$49			lda 	#"I"
.a744					_VDNotWord:
.a744	48		pha				pha
.a745	20 0d a3	jsr $a30d			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a748	68		pla				pla
.a749	20 bd a3	jsr $a3bd			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a74c	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what's next ?
.a74f	c9 c0		cmp #$c0			cmp 	#'@'|$80 					; if not @, use default
.a751	d0 21		bne $a774			bne 	_VDDefault
.a753	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip @
.a756	20 65 a3	jsr $a365			jsr 	EGLookNext 					; get next
.a759	c9 e2		cmp #$e2			cmp 	#'b'|$80 					; must be b/w constant
.a75b	f0 04		beq $a761			beq 	_VDLegit
.a75d	c9 f7		cmp #$f7			cmp 	#'w'|$80
.a75f	d0 34		bne $a795			bne 	_VDError
.a761					_VDLegit:
.a761	a5 33		lda $33				lda 	genPos 						; position
.a763	20 d7 a2	jsr $a2d7			jsr 	GenCopyData					; access data
.a766	a9 00		lda #$00			lda 	#0 		 					; set the address
.a768	a6 36		ldx $36				ldx 	elementData
.a76a	a4 37		ldy $37				ldy 	elementData+1
.a76c	20 0c a4	jsr $a40c			jsr 	DictionarySet
.a76f	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; consume the constant
.a772	80 14		bra $a788			bra 	_VDTryNext
.a774					_VDDefault:
.a774	a6 18		ldx $18				ldx 	varPtr 						; place at default position
.a776	a4 19		ldy $19				ldy 	varPtr+1
.a778	a9 00		lda #$00			lda 	#0
.a77a	20 0c a4	jsr $a40c			jsr 	DictionarySet
.a77d	a5 3c		lda $3c				lda 	varSize 					; get count of bytes back
.a77f	18		clc				clc
.a780	65 18		adc $18				adc 	varPtr
.a782	85 18		sta $18				sta 	varPtr
.a784	90 02		bcc $a788			bcc 	_VDNoCarry
.a786	e6 19		inc $19				inc 	varPtr+1
.a788					_VDNoCarry:
.a788					_VDTryNext:
.a788	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what's next ?
.a78b	c9 ac		cmp #$ac			cmp 	#","|$80 					; is it a comma
.a78d	d0 05		bne $a794			bne 	_VDExit 					; no, exit.
.a78f	20 6d a3	jsr $a36d			jsr 	EGSkipNext
.a792	80 a7		bra $a73b			bra 	_VDLoop
.a794					_VDExit:
.a794	60		rts				rts
.a795					_VDError:
.a795	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a798	4c 45 41 4e 3a 41 44 44				.text 	"LEAN:","ADDRESS?",$00
>a7a0	52 45 53 53 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/crunch.asm

.a7a6					Action_DictionaryCrunch:
.a7a6	a9 1a		lda #$1a			lda 	#(UserDictionary) & $FF
.a7a8	85 1a		sta $1a				sta 	zTemp0
.a7aa	a9 bb		lda #$bb			lda 	#(UserDictionary) >> 8
.a7ac	85 1b		sta $1b				sta 	zTemp0+1
.a7ae					_ADCLoop:
.a7ae	b2 1a		lda ($1a)			lda 	(zTemp0) 					; reached end of dictionary
.a7b0	f0 58		beq $a80a			beq 	_ADCExit
.a7b2	a0 06		ldy #$06			ldy 	#6							; read first character
.a7b4	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a7b6	29 7f		and #$7f			and 	#$7F 						; is it a '.' ?
.a7b8	c9 2e		cmp #$2e			cmp 	#'.'
.a7ba	d0 41		bne $a7fd			bne 	_ADCNext 					; if not, it's a global, skip to next.
.a7bc	a5 1a		lda $1a				lda 	zTemp0 						; work out copy from, into zTemp1
.a7be	48		pha				pha
.a7bf	18		clc				clc
.a7c0	72 1a		adc ($1a)			adc 	(zTemp0)
.a7c2	85 1c		sta $1c				sta 	zTemp1
.a7c4	a5 1b		lda $1b				lda 	zTemp0+1
.a7c6	48		pha				pha
.a7c7	69 00		adc #$00			adc 	#0
.a7c9	85 1d		sta $1d				sta 	zTemp1+1
.a7cb					_ADCopyOverwrite:
.a7cb	b2 1c		lda ($1c)			lda 	(zTemp1) 					; byte copy
.a7cd	92 1a		sta ($1a)			sta 	(zTemp0)
.a7cf	a5 1c		lda $1c				lda 	zTemp1 						; until the upper address = dictionary top
.a7d1	c5 14		cmp $14				cmp 	dictPtr
.a7d3	d0 06		bne $a7db			bne 	_ADCNextCopy
.a7d5	a5 1d		lda $1d				lda 	zTemp1+1
.a7d7	c5 15		cmp $15				cmp 	dictPtr+1
.a7d9	f0 0e		beq $a7e9			beq 	_ADCRemoved
.a7db					_ADCNextCopy:
.a7db	e6 1a		inc $1a				inc 	zTemp0
.a7dd	d0 02		bne $a7e1			bne 	_NoCarry
.a7df	e6 1b		inc $1b				inc 	zTemp0+1
.a7e1					_NoCarry:
.a7e1	e6 1c		inc $1c				inc 	zTemp1
.a7e3	d0 02		bne $a7e7			bne 	_NoCarry
.a7e5	e6 1d		inc $1d				inc 	zTemp1+1
.a7e7					_NoCarry:
.a7e7	80 e2		bra $a7cb			bra 	_ADCopyOverwrite
.a7e9					_ADCRemoved:
.a7e9	a5 1a		lda $1a				lda 	zTemp0 						; copy from position is new top.
.a7eb	85 14		sta $14				sta 	dictPtr
.a7ed	a5 1b		lda $1b				lda 	zTemp0+1
.a7ef	85 15		sta $15				sta 	dictPtr+1
.a7f1	a9 00		lda #$00			lda 	#0							; mark end as not copied in loop
.a7f3	92 14		sta ($14)			sta 	(dictPtr)
.a7f5	68		pla				pla 								; restore original position.
.a7f6	85 1b		sta $1b				sta 	zTemp0+1
.a7f8	68		pla				pla
.a7f9	85 1a		sta $1a				sta 	zTemp0
.a7fb	80 b1		bra $a7ae			bra 	_ADCLoop 					; and continue from same position.
.a7fd					_ADCNext:
.a7fd	18		clc				clc 								; advance to next.
.a7fe	a5 1a		lda $1a				lda 	zTemp0
.a800	72 1a		adc ($1a)			adc 	(zTemp0)
.a802	85 1a		sta $1a				sta 	zTemp0
.a804	90 a8		bcc $a7ae			bcc 	_ADCLoop
.a806	e6 1b		inc $1b				inc 	zTemp0+1
.a808	80 a4		bra $a7ae			bra 	_ADCLoop
.a80a					_ADCExit:
.a80a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/tostring.asm

.a80b					IntToString:
.a80b	86 1a		stx $1a				stx 	zTemp0 						; count is in zTemp0
.a80d	84 1b		sty $1b				sty 	zTemp0+1
.a80f	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a811	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a813					_ITSLoop:
.a813	64 1c		stz $1c				stz 	zTemp1 						; this is the count of subtracts.
.a815					_ITSSubtractLoop:
.a815	38		sec				sec
.a816	a5 1a		lda $1a				lda 	zTemp0 						; try to calculate
.a818	fd 4e a8	sbc $a84e,x			sbc 	_ITSWords,x
.a81b	48		pha				pha
.a81c	a5 1b		lda $1b				lda 	zTemp0+1
.a81e	fd 4f a8	sbc $a84f,x			sbc 	_ITSWords+1,x
.a821	90 09		bcc $a82c			bcc 	_ITSEndSub 					; can't subtract any more.
.a823	85 1b		sta $1b				sta 	zTemp0+1 					; update zTemp
.a825	68		pla				pla
.a826	85 1a		sta $1a				sta 	zTemp0
.a828	e6 1c		inc $1c				inc 	zTemp1 						; bump subtract count.
.a82a	80 e9		bra $a815			bra 	_ITSSubtractLoop
.a82c					_ITSEndSub:
.a82c	68		pla				pla 								; throw away the interim result
.a82d	a5 1c		lda $1c				lda 	zTemp1 						; if the subtract count is non zero
.a82f	d0 04		bne $a835			bne 	_ITSWriteOut 				; always write it out
.a831	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a833	f0 06		beq $a83b			beq 	_ITSNext 					; suppressing leading zeros.
.a835					_ITSWriteOut:
.a835	09 30		ora #$30			ora 	#48 						; output digit.
.a837	99 40 06	sta $0640,y			sta 	lineBuffer,y
.a83a	c8		iny				iny
.a83b					_ITSNext:
.a83b	e8		inx				inx
.a83c	e8		inx				inx
.a83d	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a83f	d0 d2		bne $a813			bne 	_ITSLoop 					; do the new digits
.a841	a5 1a		lda $1a				lda 	zTemp0 						; output the last digit
.a843	09 30		ora #$30			ora 	#48
.a845	99 40 06	sta $0640,y			sta 	lineBuffer,y 				; make it ASCIIZ.
.a848	a9 00		lda #$00			lda 	#0
.a84a	99 41 06	sta $0641,y			sta 	lineBuffer+1,y
.a84d	60		rts				rts
.a84e					_ITSWords:
>a84e	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a856					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: utility/tointeger.asm

.a856					StringToInt:
.a856	86 20		stx $20				stx 	zTemp3 						; save string
.a858	84 21		sty $21				sty 	zTemp3+1
.a85a	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a85c	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a85e	b2 20		lda ($20)			lda 	(zTemp3) 					; first character
.a860	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a862	f0 1b		beq $a87f			beq 	_STIConvert 				; convert from character 1, base 16.
.a864	88		dey				dey 								; from character 0
.a865	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a867	c9 2d		cmp #$2d			cmp 	#"-"						; first char is unary minus ?
.a869	d0 14		bne $a87f			bne 	_STIConvert 				; no, convert as +ve decimal
.a86b	c8		iny				iny 								; skip the minus
.a86c	20 7f a8	jsr $a87f			jsr 	_STIConvert 				; convert the unsigned part.
.a86f	90 0d		bcc $a87e			bcc 	_STIExit 					; failed
.a871	8a		txa				txa 								; 1's complement YX
.a872	49 ff		eor #$ff			eor 	#$FF
.a874	aa		tax				tax
.a875	98		tya				tya
.a876	49 ff		eor #$ff			eor 	#$FF
.a878	a8		tay				tay
.a879	e8		inx				inx 								; +1 to make it negative
.a87a	38		sec				sec
.a87b	d0 01		bne $a87e			bne 	_STIExit
.a87d	c8		iny				iny
.a87e					_STIExit:
.a87e	60		rts				rts
.a87f					_STIConvert:
.a87f	86 1c		stx $1c				stx 	zTemp1 						; save base in zTemp1
.a881	b1 20		lda ($20),y			lda 	(zTemp3),y 					; get first character
.a883	f0 5f		beq $a8e4			beq 	_STIFail 					; if zero, then it has failed anyway.
.a885	64 1a		stz $1a				stz 	zTemp0 						; clear the result.
.a887	64 1b		stz $1b				stz 	zTemp0+1
.a889					_STILoop:
.a889	a5 1a		lda $1a				lda 	zTemp0 						; copy current to zTemp2
.a88b	85 1e		sta $1e				sta 	zTemp2
.a88d	a5 1b		lda $1b				lda 	zTemp0+1
.a88f	85 1f		sta $1f				sta 	zTemp2+1
.a891	64 1a		stz $1a				stz 	zTemp0 						; clear result
.a893	64 1b		stz $1b				stz 	zTemp0+1
.a895	a6 1c		ldx $1c				ldx 	zTemp1 						; X contains the base.
.a897					_STIMultiply:
.a897	8a		txa				txa 								; shift Y right into carry.
.a898	4a		lsr a				lsr 	a
.a899	aa		tax				tax
.a89a	90 0d		bcc $a8a9			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a89c	18		clc				clc
.a89d	a5 1e		lda $1e				lda 	zTemp2 						; add zTemp2 into zTemp0
.a89f	65 1a		adc $1a				adc 	zTemp0
.a8a1	85 1a		sta $1a				sta 	zTemp0
.a8a3	a5 1f		lda $1f				lda 	zTemp2+1
.a8a5	65 1b		adc $1b				adc 	zTemp0+1
.a8a7	85 1b		sta $1b				sta 	zTemp0+1
.a8a9					_STINoAdd:
.a8a9	06 1e		asl $1e				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a8ab	26 1f		rol $1f				rol 	zTemp2+1
.a8ad	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a8af	d0 e6		bne $a897			bne 	_STIMultiply
.a8b1	b1 20		lda ($20),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a8b3	29 7f		and #$7f			and 	#$7F 						; remove End of Token bit if set
.a8b5	c9 30		cmp #$30			cmp 	#"0"
.a8b7	90 2b		bcc $a8e4			bcc 	_STIFail
.a8b9	c9 3a		cmp #$3a			cmp 	#"9"+1
.a8bb	90 0b		bcc $a8c8			bcc 	_STIOkay
.a8bd	c9 41		cmp #$41			cmp 	#"A"
.a8bf	90 23		bcc $a8e4			bcc 	_STIFail
.a8c1	c9 47		cmp #$47			cmp 	#"F"+1
.a8c3	b0 1f		bcs $a8e4			bcs 	_STIFail
.a8c5	38		sec				sec 								; hex adjust
.a8c6	e9 07		sbc #$07			sbc 	#7
.a8c8					_STIOkay:
.a8c8	38		sec				sec
.a8c9	e9 30		sbc #$30			sbc 	#48
.a8cb	c5 1c		cmp $1c				cmp 	zTemp1  					; if >= base then fail.
.a8cd	b0 15		bcs $a8e4			bcs 	_STIFail
.a8cf	d8		cld				cld
.a8d0	65 1a		adc $1a				adc 	zTemp0 						; add into the current value
.a8d2	85 1a		sta $1a				sta 	zTemp0
.a8d4	90 02		bcc $a8d8			bcc 	_STINoCarry
.a8d6	e6 1b		inc $1b				inc 	zTemp0+1
.a8d8					_STINoCarry:
.a8d8	b1 20		lda ($20),y			lda 	(zTemp3),y					; get character just done.
.a8da	c8		iny				iny 								; point to next
.a8db	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8dc	90 ab		bcc $a889			bcc 	_STILoop 					; not reached the end.
.a8de	a6 1a		ldx $1a				ldx 	zTemp0 						; return result
.a8e0	a4 1b		ldy $1b				ldy 	zTemp0+1
.a8e2	38		sec				sec
.a8e3	60		rts				rts
.a8e4					_STIFail:
.a8e4	18		clc				clc
.a8e5	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/astack.asm

.a8e6					StackReset:
.a8e6	a9 3f		lda #$3f			lda 	#(assemblerStack) & $FF
.a8e8	85 12		sta $12				sta 	aStackPtr
.a8ea	a9 06		lda #$06			lda 	#(assemblerStack) >> 8
.a8ec	85 13		sta $13				sta 	aStackPtr+1
.a8ee	a9 2a		lda #$2a			lda 	#SCM_TOP
.a8f0	92 12		sta ($12)			sta 	(aStackPtr)
.a8f2	60		rts				rts
.a8f3					StackPushPC:
.a8f3	a5 26		lda $26				lda 	codeBank
.a8f5	20 03 a9	jsr $a903			jsr 	StackPush
.a8f8	a5 24		lda $24				lda 	codePtr
.a8fa	20 03 a9	jsr $a903			jsr 	StackPush
.a8fd	a5 25		lda $25				lda 	codePtr+1
.a8ff	20 03 a9	jsr $a903			jsr 	StackPush
.a902	60		rts				rts
.a903					StackPush:
.a903	c6 12		dec $12				dec 	aStackPtr 					; decrement TOS pointer.
.a905	f0 03		beq $a90a			beq 	_SPStack
.a907	92 12		sta ($12)			sta 	(aStackPtr)					; write to new TOS
.a909	60		rts				rts
.a90a					_SPStack:
.a90a	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a90d	4c 45 41 4e 3a 52 45 54				.text 	"LEAN:","RETURN STACK",$00
>a915	55 52 4e 20 53 54 41 43 4b 00
.a91f					StackCheckStructureMarker:
.a91f	d2 12		cmp ($12)			cmp 	(aStackPtr)					; check if tos matches
.a921	d0 01		bne $a924			bne 	_SCSError
.a923	60		rts				rts
.a924					_SCSError:
.a924	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a927	4c 45 41 4e 3a 53 54 52				.text 	"LEAN:","STRUCTURES",$00
>a92f	55 43 54 55 52 45 53 00
.a937					StackCompileBranch:
.a937	48		pha				pha
.a938	da		phx				phx
.a939	5a		phy				phy
.a93a	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; write the opcode.
.a93d	c8		iny				iny
.a93e	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a940	aa		tax				tax
.a941	88		dey				dey
.a942	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a944	a8		tay				tay
.a945	20 be a4	jsr $a4be			jsr 	CodeWriteBranch 			; write a branch there.
.a948	7a		ply				ply
.a949	fa		plx				plx
.a94a	68		pla				pla
.a94b	60		rts				rts
.a94c					StackPopStack:
.a94c	18		clc				clc 								; return stack all in same page
.a94d	65 12		adc $12				adc 	aStackPtr 					; so we don't carry out.
.a94f	85 12		sta $12				sta 	aStackPtr
.a951	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/system.inc

.a952					L10000:
>a952	04					.byte L10000_END-L10000-1
.a953	a9 63		lda #$63		lda  #$63
.a955	a2 73		ldx #$73		ldx  #$73
.a957					L10000_END:
.a957					L10001:
>a957	02					.byte L10001_END-L10001-1
.a958	84 63		sty $63			sty  $63
.a95a					L10001_END:
.a95a					L10002:
>a95a	02					.byte L10002_END-L10002-1
.a95b	85 63		sta $63			sta  $63
.a95d					L10002_END:
.a95d					L10003:
>a95d	02					.byte L10003_END-L10003-1
.a95e	85 63		sta $63			sta  $63
.a960					L10003_END:
.a960					L10004:
>a960	04					.byte L10004_END-L10004-1
.a961	a5 63		lda $63			lda  $63
.a963	a2 00		ldx #$00		ldx  #0
.a965					L10004_END:
.a965					L10005:
>a965	02					.byte L10005_END-L10005-1
>a966	a3 00					.byte $a3,$00
.a968					L10005_END:
.a968					L10006:
>a968	09					.byte L10006_END-L10006-1
.a969	91 63		sta ($63),y		sta  ($7363& $ff),y
.a96b	c8		iny			iny
.a96c	8a		txa			txa
.a96d	91 63		sta ($63),y		sta  ($7363& $ff),y
.a96f	88		dey			dey
.a970	b1 63		lda ($63),y		lda  ($7363& $ff),y
.a972					L10006_END:
.a972					L10007:
>a972	02					.byte L10007_END-L10007-1
.a973	91 63		sta ($63),y		sta  ($7363& $ff),y
.a975					L10007_END:
.a975					L10008:
>a975	06					.byte L10008_END-L10008-1
.a976	8d 63 73	sta $7363		sta  $7363
.a979	8e 83 73	stx $7383		stx  $7383
.a97c					L10008_END:
.a97c					L10009:
>a97c	06					.byte L10009_END-L10009-1
.a97d	ad 63 73	lda $7363		lda  $7363
.a980	ae 83 73	ldx $7383		ldx  $7383
.a983					L10009_END:
.a983					L10010:
>a983	09					.byte L10010_END-L10010-1
.a984	91 63		sta ($63),y		sta  ($63& $ff),y
.a986	c8		iny			iny
.a987	8a		txa			txa
.a988	91 63		sta ($63),y		sta  ($63& $ff),y
.a98a	88		dey			dey
.a98b	b1 63		lda ($63),y		lda  ($63& $ff),y
.a98d					L10010_END:
.a98d					L10011:
>a98d	02					.byte L10011_END-L10011-1
.a98e	91 63		sta ($63),y		sta  ($63& $ff),y
.a990					L10011_END:
.a990					L10012:
>a990	04					.byte L10012_END-L10012-1
.a991	85 63		sta $63			sta  $63
.a993	86 83		stx $83			stx  $83
.a995					L10012_END:
.a995					L10013:
>a995	04					.byte L10013_END-L10013-1
.a996	a5 63		lda $63			lda  $63
.a998	a6 83		ldx $83			ldx  $83
.a99a					L10013_END:
.a99a					L10014:
>a99a	03					.byte L10014_END-L10014-1
.a99b	8c 63 73	sty $7363		sty  $7363
.a99e					L10014_END:
.a99e					L10015:
>a99e	03					.byte L10015_END-L10015-1
.a99f	8d 63 73	sta $7363		sta  $7363
.a9a2					L10015_END:
.a9a2					L10016:
>a9a2	03					.byte L10016_END-L10016-1
.a9a3	8d 63 73	sta $7363		sta  $7363
.a9a6					L10016_END:
.a9a6					L10017:
>a9a6	05					.byte L10017_END-L10017-1
.a9a7	ad 63 73	lda $7363		lda  $7363
.a9aa	a2 00		ldx #$00		ldx  #0
.a9ac					L10017_END:
.a9ac					L10018:
>a9ac	04					.byte L10018_END-L10018-1
.a9ad	a9 63		lda #$63		lda  #$63
.a9af	a2 73		ldx #$73		ldx  #$73
.a9b1					L10018_END:
.a9b1					L10019:
>a9b1	07					.byte L10019_END-L10019-1
.a9b2	8a		txa			txa
.a9b3	49 ff		eor #$ff		eor  #$ff
.a9b5	aa		tax			tax
.a9b6	68		pla			pla
.a9b7	49 ff		eor #$ff		eor  #$ff
.a9b9					L10019_END:
.a9b9					L10020:
>a9b9	02					.byte L10020_END-L10020-1
.a9ba	49 ff		eor #$ff		eor  #$ff
.a9bc					L10020_END:
.a9bc					L10021:
>a9bc	02					.byte L10021_END-L10021-1
.a9bd	a4 63		ldy $63			ldy  $63
.a9bf					L10021_END:
.a9bf					L10022:
>a9bf	03					.byte L10022_END-L10022-1
.a9c0	ac 63 73	ldy $7363		ldy  $7363
.a9c3					L10022_END:
.a9c3					L10023:
>a9c3	02					.byte L10023_END-L10023-1
.a9c4	a0 63		ldy #$63		ldy  #$63
.a9c6					L10023_END:
.a9c6					L10024:
>a9c6	01					.byte L10024_END-L10024-1
.a9c7	a8		tay			tay
.a9c8					L10024_END:
.a9c8					L10025:
>a9c8	01					.byte L10025_END-L10025-1
.a9c9	a8		tay			tay
.a9ca					L10025_END:
.a9ca					L10026:
>a9ca	01					.byte L10026_END-L10026-1
.a9cb	5a		phy			phy
.a9cc					L10026_END:
.a9cc					L10027:
>a9cc	02					.byte L10027_END-L10027-1
>a9cd	a3 01					.byte $a3,$01
.a9cf					L10027_END:
.a9cf					L10028:
>a9cf	02					.byte L10028_END-L10028-1
>a9d0	a3 02					.byte $a3,$02
.a9d2					L10028_END:
.a9d2					L10029:
>a9d2	01					.byte L10029_END-L10029-1
.a9d3	7a		ply			ply
.a9d4					L10029_END:
.a9d4					L10030:
>a9d4	03					.byte L10030_END-L10030-1
.a9d5	7a		ply			ply
.a9d6	fa		plx			plx
.a9d7	68		pla			pla
.a9d8					L10030_END:
.a9d8					L10031:
>a9d8	02					.byte L10031_END-L10031-1
.a9d9	fa		plx			plx
.a9da	68		pla			pla
.a9db					L10031_END:
.a9db					L10032:
>a9db	01					.byte L10032_END-L10032-1
.a9dc	68		pla			pla
.a9dd					L10032_END:
.a9dd					L10033:
>a9dd	02					.byte L10033_END-L10033-1
>a9de	a3 03					.byte $a3,$03
.a9e0					L10033_END:
.a9e0					L10034:
>a9e0	02					.byte L10034_END-L10034-1
>a9e1	a3 04					.byte $a3,$04
.a9e3					L10034_END:
.a9e3					L10035:
>a9e3	03					.byte L10035_END-L10035-1
.a9e4	48		pha			pha
.a9e5	da		phx			phx
.a9e6	5a		phy			phy
.a9e7					L10035_END:
.a9e7					L10036:
>a9e7	04					.byte L10036_END-L10036-1
.a9e8	a9 63		lda #$63		lda  #$63
.a9ea	a2 73		ldx #$73		ldx  #$73
.a9ec					L10036_END:
.a9ec					L10037:
>a9ec	04					.byte L10037_END-L10037-1
.a9ed	a5 63		lda $63			lda  $63
.a9ef	a2 00		ldx #$00		ldx  #0
.a9f1					L10037_END:
.a9f1					L10038:
>a9f1	07					.byte L10038_END-L10038-1
.a9f2	c8		iny			iny
.a9f3	b1 63		lda ($63),y		lda  ($7363& $ff),y
.a9f5	aa		tax			tax
.a9f6	88		dey			dey
.a9f7	b1 63		lda ($63),y		lda  ($7363& $ff),y
.a9f9					L10038_END:
.a9f9					L10039:
>a9f9	06					.byte L10039_END-L10039-1
.a9fa	ad 63 73	lda $7363		lda  $7363
.a9fd	ae 83 73	ldx $7383		ldx  $7383
.aa00					L10039_END:
.aa00					L10040:
>aa00	07					.byte L10040_END-L10040-1
.aa01	c8		iny			iny
.aa02	b1 63		lda ($63),y		lda  ($63& $ff),y
.aa04	aa		tax			tax
.aa05	88		dey			dey
.aa06	b1 63		lda ($63),y		lda  ($63& $ff),y
.aa08					L10040_END:
.aa08					L10041:
>aa08	04					.byte L10041_END-L10041-1
.aa09	a5 63		lda $63			lda  $63
.aa0b	a6 83		ldx $83			ldx  $83
.aa0d					L10041_END:
.aa0d					L10042:
>aa0d	05					.byte L10042_END-L10042-1
.aa0e	ad 63 73	lda $7363		lda  $7363
.aa11	a2 00		ldx #$00		ldx  #0
.aa13					L10042_END:
.aa13					L10043:
>aa13	04					.byte L10043_END-L10043-1
.aa14	a9 63		lda #$63		lda  #$63
.aa16	a2 73		ldx #$73		ldx  #$73
.aa18					L10043_END:
.aa18					L10044:
>aa18	03					.byte L10044_END-L10044-1
.aa19	98		tya			tya
.aa1a	a2 00		ldx #$00		ldx  #0
.aa1c					L10044_END:
.aa1c					L10045:
>aa1c	02					.byte L10045_END-L10045-1
.aa1d	a2 00		ldx #$00		ldx  #0
.aa1f					L10045_END:
.aa1f					L10046:
>aa1f	09					.byte L10046_END-L10046-1
.aa20	c9 00		cmp #$00		cmp #0
.aa22	d0 02		bne $aa26		bne *+4
.aa24	e0 00		cpx #$00		cpx #0
>aa26	93					.byte $93
.aa27	f0 fe		beq $aa27		beq *
.aa29					L10046_END:
.aa29					L10047:
>aa29	09					.byte L10047_END-L10047-1
.aa2a	c9 00		cmp #$00		cmp #0
.aa2c	d0 02		bne $aa30		bne *+4
.aa2e	e0 00		cpx #$00		cpx #0
>aa30	93					.byte $93
.aa31	d0 fe		bne $aa31		bne *
.aa33					L10047_END:
.aa33					L10048:
>aa33	08					.byte L10048_END-L10048-1
.aa34	09 63		ora #$63		ora  #$63
.aa36	48		pha			pha
.aa37	8a		txa			txa
.aa38	09 73		ora #$73		ora  #$73
.aa3a	aa		tax			tax
.aa3b	68		pla			pla
.aa3c					L10048_END:
.aa3c					L10049:
>aa3c	02					.byte L10049_END-L10049-1
.aa3d	05 63		ora $63			ora  $63
.aa3f					L10049_END:
.aa3f					L10050:
>aa3f	0a					.byte L10050_END-L10050-1
.aa40	11 63		ora ($63),y		ora  ($7363& $ff),y
.aa42	48		pha			pha
.aa43	8a		txa			txa
.aa44	c8		iny			iny
.aa45	11 63		ora ($63),y		ora  ($7363& $ff),y
.aa47	88		dey			dey
.aa48	aa		tax			tax
.aa49	68		pla			pla
.aa4a					L10050_END:
.aa4a					L10051:
>aa4a	0a					.byte L10051_END-L10051-1
.aa4b	0d 63 73	ora $7363		ora  $7363
.aa4e	48		pha			pha
.aa4f	8a		txa			txa
.aa50	0d 83 73	ora $7383		ora  $7383
.aa53	aa		tax			tax
.aa54	68		pla			pla
.aa55					L10051_END:
.aa55					L10052:
>aa55	0a					.byte L10052_END-L10052-1
.aa56	11 63		ora ($63),y		ora  ($63& $ff),y
.aa58	48		pha			pha
.aa59	8a		txa			txa
.aa5a	c8		iny			iny
.aa5b	11 63		ora ($63),y		ora  ($63& $ff),y
.aa5d	88		dey			dey
.aa5e	aa		tax			tax
.aa5f	68		pla			pla
.aa60					L10052_END:
.aa60					L10053:
>aa60	08					.byte L10053_END-L10053-1
.aa61	05 63		ora $63			ora  $63
.aa63	48		pha			pha
.aa64	8a		txa			txa
.aa65	05 83		ora $83			ora  $83
.aa67	aa		tax			tax
.aa68	68		pla			pla
.aa69					L10053_END:
.aa69					L10054:
>aa69	03					.byte L10054_END-L10054-1
.aa6a	0d 63 73	ora $7363		ora  $7363
.aa6d					L10054_END:
.aa6d					L10055:
>aa6d	02					.byte L10055_END-L10055-1
.aa6e	09 63		ora #$63		ora  #$63
.aa70					L10055_END:
.aa70					L10056:
>aa70	03					.byte L10056_END-L10056-1
.aa71	48		pha			pha
.aa72	8a		txa			txa
.aa73	fa		plx			plx
.aa74					L10056_END:
.aa74					L10057:
>aa74	02					.byte L10057_END-L10057-1
>aa75	a3 05					.byte $a3,$05
.aa77					L10057_END:
.aa77					L10058:
>aa77	09					.byte L10058_END-L10058-1
.aa78	38		sec			sec
.aa79	e9 63		sbc #$63		sbc  #$63
.aa7b	48		pha			pha
.aa7c	8a		txa			txa
.aa7d	e9 73		sbc #$73		sbc  #$73
.aa7f	aa		tax			tax
.aa80	68		pla			pla
.aa81					L10058_END:
.aa81					L10059:
>aa81	06					.byte L10059_END-L10059-1
.aa82	38		sec			sec
.aa83	e5 63		sbc $63			sbc  $63
.aa85	b0 01		bcs $aa88		bcs  *+3
.aa87	ca		dex			dex
.aa88					L10059_END:
.aa88					L10060:
>aa88	0b					.byte L10060_END-L10060-1
.aa89	38		sec			sec
.aa8a	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.aa8c	48		pha			pha
.aa8d	8a		txa			txa
.aa8e	c8		iny			iny
.aa8f	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.aa91	88		dey			dey
.aa92	aa		tax			tax
.aa93	68		pla			pla
.aa94					L10060_END:
.aa94					L10061:
>aa94	0b					.byte L10061_END-L10061-1
.aa95	38		sec			sec
.aa96	ed 63 73	sbc $7363		sbc  $7363
.aa99	48		pha			pha
.aa9a	8a		txa			txa
.aa9b	ed 83 73	sbc $7383		sbc  $7383
.aa9e	aa		tax			tax
.aa9f	68		pla			pla
.aaa0					L10061_END:
.aaa0					L10062:
>aaa0	0b					.byte L10062_END-L10062-1
.aaa1	38		sec			sec
.aaa2	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.aaa4	48		pha			pha
.aaa5	8a		txa			txa
.aaa6	c8		iny			iny
.aaa7	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.aaa9	88		dey			dey
.aaaa	aa		tax			tax
.aaab	68		pla			pla
.aaac					L10062_END:
.aaac					L10063:
>aaac	09					.byte L10063_END-L10063-1
.aaad	38		sec			sec
.aaae	e5 63		sbc $63			sbc  $63
.aab0	48		pha			pha
.aab1	8a		txa			txa
.aab2	e5 83		sbc $83			sbc  $83
.aab4	aa		tax			tax
.aab5	68		pla			pla
.aab6					L10063_END:
.aab6					L10064:
>aab6	07					.byte L10064_END-L10064-1
.aab7	38		sec			sec
.aab8	ed 63 73	sbc $7363		sbc  $7363
.aabb	b0 01		bcs $aabe		bcs  *+3
.aabd	ca		dex			dex
.aabe					L10064_END:
.aabe					L10065:
>aabe	06					.byte L10065_END-L10065-1
.aabf	38		sec			sec
.aac0	e9 63		sbc #$63		sbc  #$63
.aac2	b0 01		bcs $aac5		bcs  *+3
.aac4	ca		dex			dex
.aac5					L10065_END:
.aac5					L10066:
>aac5	05					.byte L10066_END-L10066-1
.aac6	e0 00		cpx #$00		cpx #0
>aac8	93					.byte $93
.aac9	30 fe		bmi $aac9		bmi *
.aacb					L10066_END:
.aacb					L10067:
>aacb	02					.byte L10067_END-L10067-1
.aacc	48		pha			pha
.aacd	da		phx			phx
.aace					L10067_END:
.aace					L10068:
>aace	09					.byte L10068_END-L10068-1
.aacf	18		clc			clc
.aad0	69 63		adc #$63		adc  #$63
.aad2	48		pha			pha
.aad3	8a		txa			txa
.aad4	69 73		adc #$73		adc  #$73
.aad6	aa		tax			tax
.aad7	68		pla			pla
.aad8					L10068_END:
.aad8					L10069:
>aad8	06					.byte L10069_END-L10069-1
.aad9	18		clc			clc
.aada	65 63		adc $63			adc  $63
.aadc	90 01		bcc $aadf		bcc  *+3
.aade	e8		inx			inx
.aadf					L10069_END:
.aadf					L10070:
>aadf	0b					.byte L10070_END-L10070-1
.aae0	18		clc			clc
.aae1	71 63		adc ($63),y		adc  ($7363& $ff),y
.aae3	48		pha			pha
.aae4	8a		txa			txa
.aae5	c8		iny			iny
.aae6	71 63		adc ($63),y		adc  ($7363& $ff),y
.aae8	88		dey			dey
.aae9	aa		tax			tax
.aaea	68		pla			pla
.aaeb					L10070_END:
.aaeb					L10071:
>aaeb	0b					.byte L10071_END-L10071-1
.aaec	18		clc			clc
.aaed	6d 63 73	adc $7363		adc  $7363
.aaf0	48		pha			pha
.aaf1	8a		txa			txa
.aaf2	6d 83 73	adc $7383		adc  $7383
.aaf5	aa		tax			tax
.aaf6	68		pla			pla
.aaf7					L10071_END:
.aaf7					L10072:
>aaf7	0b					.byte L10072_END-L10072-1
.aaf8	18		clc			clc
.aaf9	71 63		adc ($63),y		adc  ($63& $ff),y
.aafb	48		pha			pha
.aafc	8a		txa			txa
.aafd	c8		iny			iny
.aafe	71 63		adc ($63),y		adc  ($63& $ff),y
.ab00	88		dey			dey
.ab01	aa		tax			tax
.ab02	68		pla			pla
.ab03					L10072_END:
.ab03					L10073:
>ab03	09					.byte L10073_END-L10073-1
.ab04	18		clc			clc
.ab05	65 63		adc $63			adc  $63
.ab07	48		pha			pha
.ab08	8a		txa			txa
.ab09	65 83		adc $83			adc  $83
.ab0b	aa		tax			tax
.ab0c	68		pla			pla
.ab0d					L10073_END:
.ab0d					L10074:
>ab0d	07					.byte L10074_END-L10074-1
.ab0e	18		clc			clc
.ab0f	6d 63 73	adc $7363		adc  $7363
.ab12	90 01		bcc $ab15		bcc  *+3
.ab14	e8		inx			inx
.ab15					L10074_END:
.ab15					L10075:
>ab15	06					.byte L10075_END-L10075-1
.ab16	18		clc			clc
.ab17	69 63		adc #$63		adc  #$63
.ab19	90 01		bcc $ab1c		bcc  *+3
.ab1b	e8		inx			inx
.ab1c					L10075_END:
.ab1c					L10076:
>ab1c	05					.byte L10076_END-L10076-1
.ab1d	e0 00		cpx #$00		cpx #0
>ab1f	93					.byte $93
.ab20	10 fe		bpl $ab20		bpl *
.ab22					L10076_END:
.ab22					L10077:
>ab22	08					.byte L10077_END-L10077-1
.ab23	49 63		eor #$63		eor  #$63
.ab25	48		pha			pha
.ab26	8a		txa			txa
.ab27	49 73		eor #$73		eor  #$73
.ab29	aa		tax			tax
.ab2a	68		pla			pla
.ab2b					L10077_END:
.ab2b					L10078:
>ab2b	02					.byte L10078_END-L10078-1
.ab2c	45 63		eor $63			eor  $63
.ab2e					L10078_END:
.ab2e					L10079:
>ab2e	0a					.byte L10079_END-L10079-1
.ab2f	51 63		eor ($63),y		eor  ($7363 & $ff),y
.ab31	48		pha			pha
.ab32	8a		txa			txa
.ab33	c8		iny			iny
.ab34	51 63		eor ($63),y		eor  ($7363 & $ff),y
.ab36	88		dey			dey
.ab37	aa		tax			tax
.ab38	68		pla			pla
.ab39					L10079_END:
.ab39					L10080:
>ab39	0a					.byte L10080_END-L10080-1
.ab3a	4d 63 73	eor $7363		eor  $7363
.ab3d	48		pha			pha
.ab3e	8a		txa			txa
.ab3f	4d 83 73	eor $7383		eor  $7383
.ab42	aa		tax			tax
.ab43	68		pla			pla
.ab44					L10080_END:
.ab44					L10081:
>ab44	0a					.byte L10081_END-L10081-1
.ab45	51 63		eor ($63),y		eor  ($63 & $ff),y
.ab47	48		pha			pha
.ab48	8a		txa			txa
.ab49	c8		iny			iny
.ab4a	51 63		eor ($63),y		eor  ($63 & $ff),y
.ab4c	88		dey			dey
.ab4d	aa		tax			tax
.ab4e	68		pla			pla
.ab4f					L10081_END:
.ab4f					L10082:
>ab4f	08					.byte L10082_END-L10082-1
.ab50	45 63		eor $63			eor  $63
.ab52	48		pha			pha
.ab53	8a		txa			txa
.ab54	45 83		eor $83			eor  $83
.ab56	aa		tax			tax
.ab57	68		pla			pla
.ab58					L10082_END:
.ab58					L10083:
>ab58	03					.byte L10083_END-L10083-1
.ab59	4d 63 73	eor $7363		eor  $7363
.ab5c					L10083_END:
.ab5c					L10084:
>ab5c	02					.byte L10084_END-L10084-1
.ab5d	49 63		eor #$63		eor  #$63
.ab5f					L10084_END:
.ab5f					L10085:
>ab5f	08					.byte L10085_END-L10085-1
.ab60	29 63		and #$63		and  #$63
.ab62	48		pha			pha
.ab63	8a		txa			txa
.ab64	29 73		and #$73		and  #$73
.ab66	aa		tax			tax
.ab67	68		pla			pla
.ab68					L10085_END:
.ab68					L10086:
>ab68	04					.byte L10086_END-L10086-1
.ab69	25 63		and $63			and  $63
.ab6b	a2 00		ldx #$00		ldx  #0
.ab6d					L10086_END:
.ab6d					L10087:
>ab6d	0a					.byte L10087_END-L10087-1
.ab6e	31 63		and ($63),y		and  ($7363& $ff),y
.ab70	48		pha			pha
.ab71	8a		txa			txa
.ab72	c8		iny			iny
.ab73	31 63		and ($63),y		and  ($7363& $ff),y
.ab75	88		dey			dey
.ab76	aa		tax			tax
.ab77	68		pla			pla
.ab78					L10087_END:
.ab78					L10088:
>ab78	0a					.byte L10088_END-L10088-1
.ab79	2d 63 73	and $7363		and  $7363
.ab7c	48		pha			pha
.ab7d	8a		txa			txa
.ab7e	2d 83 73	and $7383		and  $7383
.ab81	aa		tax			tax
.ab82	68		pla			pla
.ab83					L10088_END:
.ab83					L10089:
>ab83	0a					.byte L10089_END-L10089-1
.ab84	31 63		and ($63),y		and  ($63& $ff),y
.ab86	48		pha			pha
.ab87	8a		txa			txa
.ab88	c8		iny			iny
.ab89	31 63		and ($63),y		and  ($63& $ff),y
.ab8b	88		dey			dey
.ab8c	aa		tax			tax
.ab8d	68		pla			pla
.ab8e					L10089_END:
.ab8e					L10090:
>ab8e	08					.byte L10090_END-L10090-1
.ab8f	25 63		and $63			and  $63
.ab91	48		pha			pha
.ab92	8a		txa			txa
.ab93	25 83		and $83			and  $83
.ab95	aa		tax			tax
.ab96	68		pla			pla
.ab97					L10090_END:
.ab97					L10091:
>ab97	05					.byte L10091_END-L10091-1
.ab98	2d 63 73	and $7363		and  $7363
.ab9b	a2 00		ldx #$00		ldx  #0
.ab9d					L10091_END:
.ab9d					L10092:
>ab9d	04					.byte L10092_END-L10092-1
.ab9e	29 63		and #$63		and  #$63
.aba0	a2 00		ldx #$00		ldx  #0
.aba2					L10092_END:
.aba2					L10093:
>aba2	02					.byte L10093_END-L10093-1
>aba3	a3 06					.byte $a3,$06
.aba5					L10093_END:
.aba5					L10094:
>aba5	02					.byte L10094_END-L10094-1
>aba6	a3 07					.byte $a3,$07
.aba8					L10094_END:
.aba8					L10095:
>aba8	02					.byte L10095_END-L10095-1
>aba9	a3 08					.byte $a3,$08
.abab					L10095_END:
.abab					L10096:
>abab	02					.byte L10096_END-L10096-1
>abac	a3 09					.byte $a3,$09
.abae					L10096_END:
.abae					L10097:
>abae	02					.byte L10097_END-L10097-1
>abaf	a3 0a					.byte $a3,$0a
.abb1					L10097_END:
.abb1					L10098:
>abb1	02					.byte L10098_END-L10098-1
>abb2	a3 0b					.byte $a3,$0b
.abb4					L10098_END:
.abb4					L10099:
>abb4	03					.byte L10099_END-L10099-1
>abb5	93					.byte $93
.abb6	b0 fe		bcs $abb6		bcs  *
.abb8					L10099_END:
.abb8					L10100:
>abb8	03					.byte L10100_END-L10100-1
>abb9	93					.byte $93
.abba	90 fe		bcc $abba		bcc  *
.abbc					L10100_END:
.abbc					L10101:
>abbc	02					.byte L10101_END-L10101-1
>abbd	a3 0c					.byte $a3,$0c
.abbf					L10101_END:
.abbf					L10102:
>abbf	01					.byte L10102_END-L10102-1
>abc0	ff					.byte  $ff
.abc1					L10102_END:
.abc1					L10103:
>abc1	05					.byte L10103_END-L10103-1
.abc2	c5 63		cmp $63			cmp  $63
>abc4	93					.byte $93
.abc5	b0 fe		bcs $abc5		bcs *
.abc7					L10103_END:
.abc7					L10104:
>abc7	06					.byte L10104_END-L10104-1
.abc8	cd 63 73	cmp $7363		cmp  $7363
>abcb	93					.byte $93
.abcc	b0 fe		bcs $abcc		bcs *
.abce					L10104_END:
.abce					L10105:
>abce	05					.byte L10105_END-L10105-1
.abcf	c9 63		cmp #$63		cmp  #$63
>abd1	93					.byte $93
.abd2	b0 fe		bcs $abd2		bcs *
.abd4					L10105_END:
.abd4					L10106:
>abd4	05					.byte L10106_END-L10106-1
.abd5	c5 63		cmp $63			cmp  $63
>abd7	93					.byte $93
.abd8	f0 fe		beq $abd8		beq *
.abda					L10106_END:
.abda					L10107:
>abda	02					.byte L10107_END-L10107-1
.abdb	a5 63		lda $63			lda  $63
.abdd					L10107_END:
.abdd					L10108:
>abdd	02					.byte L10108_END-L10108-1
.abde	b1 63		lda ($63),y		lda  ($7363& $ff),y
.abe0					L10108_END:
.abe0					L10109:
>abe0	02					.byte L10109_END-L10109-1
.abe1	b1 63		lda ($63),y		lda  ($63& $ff),y
.abe3					L10109_END:
.abe3					L10110:
>abe3	06					.byte L10110_END-L10110-1
.abe4	cd 63 73	cmp $7363		cmp  $7363
>abe7	93					.byte $93
.abe8	f0 fe		beq $abe8		beq *
.abea					L10110_END:
.abea					L10111:
>abea	03					.byte L10111_END-L10111-1
.abeb	ad 63 73	lda $7363		lda  $7363
.abee					L10111_END:
.abee					L10112:
>abee	05					.byte L10112_END-L10112-1
.abef	c9 63		cmp #$63		cmp  #$63
>abf1	93					.byte $93
.abf2	f0 fe		beq $abf2		beq *
.abf4					L10112_END:
.abf4					L10113:
>abf4	02					.byte L10113_END-L10113-1
.abf5	a9 63		lda #$63		lda  #$63
.abf7					L10113_END:
.abf7					L10114:
>abf7	01					.byte L10114_END-L10114-1
.abf8	98		tya			tya
.abf9					L10114_END:
.abf9					L10115:
>abf9	00					.byte L10115_END-L10115-1
.abfa					L10115_END:
.abfa					L10116:
>abfa	05					.byte L10116_END-L10116-1
.abfb	c9 00		cmp #$00		cmp #0
>abfd	93					.byte $93
.abfe	f0 fe		beq $abfe		beq *
.ac00					L10116_END:
.ac00					L10117:
>ac00	05					.byte L10117_END-L10117-1
.ac01	c5 63		cmp $63			cmp  $63
>ac03	93					.byte $93
.ac04	90 fe		bcc $ac04		bcc *
.ac06					L10117_END:
.ac06					L10118:
>ac06	06					.byte L10118_END-L10118-1
.ac07	cd 63 73	cmp $7363		cmp  $7363
>ac0a	93					.byte $93
.ac0b	90 fe		bcc $ac0b		bcc *
.ac0d					L10118_END:
.ac0d					L10119:
>ac0d	05					.byte L10119_END-L10119-1
.ac0e	c9 63		cmp #$63		cmp  #$63
>ac10	93					.byte $93
.ac11	90 fe		bcc $ac11		bcc *
.ac13					L10119_END:
.ac13					L10120:
>ac13	05					.byte L10120_END-L10120-1
.ac14	c5 63		cmp $63			cmp  $63
>ac16	93					.byte $93
.ac17	d0 fe		bne $ac17		bne *
.ac19					L10120_END:
.ac19					L10121:
>ac19	06					.byte L10121_END-L10121-1
.ac1a	cd 63 73	cmp $7363		cmp  $7363
>ac1d	93					.byte $93
.ac1e	d0 fe		bne $ac1e		bne *
.ac20					L10121_END:
.ac20					L10122:
>ac20	05					.byte L10122_END-L10122-1
.ac21	c9 63		cmp #$63		cmp  #$63
>ac23	93					.byte $93
.ac24	d0 fe		bne $ac24		bne *
.ac26					L10122_END:
.ac26					L10123:
>ac26	05					.byte L10123_END-L10123-1
.ac27	c9 00		cmp #$00		cmp #0
>ac29	93					.byte $93
.ac2a	d0 fe		bne $ac2a		bne *
.ac2c					L10123_END:
.ac2c					L10124:
>ac2c	02					.byte L10124_END-L10124-1
.ac2d	05 63		ora $63			ora  $63
.ac2f					L10124_END:
.ac2f					L10125:
>ac2f	02					.byte L10125_END-L10125-1
.ac30	11 63		ora ($63),y		ora  ($7363& $ff),y
.ac32					L10125_END:
.ac32					L10126:
>ac32	02					.byte L10126_END-L10126-1
.ac33	11 63		ora ($63),y		ora  ($63& $ff),y
.ac35					L10126_END:
.ac35					L10127:
>ac35	03					.byte L10127_END-L10127-1
.ac36	0d 63 73	ora $7363		ora  $7363
.ac39					L10127_END:
.ac39					L10128:
>ac39	02					.byte L10128_END-L10128-1
.ac3a	09 63		ora #$63		ora  #$63
.ac3c					L10128_END:
.ac3c					L10129:
>ac3c	02					.byte L10129_END-L10129-1
>ac3d	a3 0d					.byte $a3,$0d
.ac3f					L10129_END:
.ac3f					L10130:
>ac3f	03					.byte L10130_END-L10130-1
.ac40	38		sec			sec
.ac41	e5 63		sbc $63			sbc  $63
.ac43					L10130_END:
.ac43					L10131:
>ac43	03					.byte L10131_END-L10131-1
.ac44	38		sec			sec
.ac45	f1 63		sbc ($63),y		sbc  ($7363& $ff),y
.ac47					L10131_END:
.ac47					L10132:
>ac47	03					.byte L10132_END-L10132-1
.ac48	38		sec			sec
.ac49	f1 63		sbc ($63),y		sbc  ($63& $ff),y
.ac4b					L10132_END:
.ac4b					L10133:
>ac4b	04					.byte L10133_END-L10133-1
.ac4c	38		sec			sec
.ac4d	ed 63 73	sbc $7363		sbc  $7363
.ac50					L10133_END:
.ac50					L10134:
>ac50	03					.byte L10134_END-L10134-1
.ac51	38		sec			sec
.ac52	e9 63		sbc #$63		sbc  #$63
.ac54					L10134_END:
.ac54					L10135:
>ac54	05					.byte L10135_END-L10135-1
.ac55	c9 00		cmp #$00		cmp #0
>ac57	93					.byte $93
.ac58	30 fe		bmi $ac58		bmi *
.ac5a					L10135_END:
.ac5a					L10136:
>ac5a	01					.byte L10136_END-L10136-1
.ac5b	48		pha			pha
.ac5c					L10136_END:
.ac5c					L10137:
>ac5c	03					.byte L10137_END-L10137-1
.ac5d	18		clc			clc
.ac5e	65 63		adc $63			adc  $63
.ac60					L10137_END:
.ac60					L10138:
>ac60	03					.byte L10138_END-L10138-1
.ac61	18		clc			clc
.ac62	71 63		adc ($63),y		adc  ($7363& $ff),y
.ac64					L10138_END:
.ac64					L10139:
>ac64	03					.byte L10139_END-L10139-1
.ac65	18		clc			clc
.ac66	71 63		adc ($63),y		adc  ($63& $ff),y
.ac68					L10139_END:
.ac68					L10140:
>ac68	04					.byte L10140_END-L10140-1
.ac69	18		clc			clc
.ac6a	6d 63 73	adc $7363		adc  $7363
.ac6d					L10140_END:
.ac6d					L10141:
>ac6d	03					.byte L10141_END-L10141-1
.ac6e	18		clc			clc
.ac6f	69 63		adc #$63		adc  #$63
.ac71					L10141_END:
.ac71					L10142:
>ac71	05					.byte L10142_END-L10142-1
.ac72	c9 00		cmp #$00		cmp #0
>ac74	93					.byte $93
.ac75	10 fe		bpl $ac75		bpl *
.ac77					L10142_END:
.ac77					L10143:
>ac77	02					.byte L10143_END-L10143-1
.ac78	45 63		eor $63			eor  $63
.ac7a					L10143_END:
.ac7a					L10144:
>ac7a	02					.byte L10144_END-L10144-1
.ac7b	51 63		eor ($63),y		eor  ($7363 & $ff),y
.ac7d					L10144_END:
.ac7d					L10145:
>ac7d	02					.byte L10145_END-L10145-1
.ac7e	51 63		eor ($63),y		eor  ($63 & $ff),y
.ac80					L10145_END:
.ac80					L10146:
>ac80	03					.byte L10146_END-L10146-1
.ac81	4d 63 73	eor $7363		eor  $7363
.ac84					L10146_END:
.ac84					L10147:
>ac84	02					.byte L10147_END-L10147-1
.ac85	49 63		eor #$63		eor  #$63
.ac87					L10147_END:
.ac87					L10148:
>ac87	02					.byte L10148_END-L10148-1
.ac88	25 63		and $63			and  $63
.ac8a					L10148_END:
.ac8a					L10149:
>ac8a	02					.byte L10149_END-L10149-1
.ac8b	31 63		and ($63),y		and  ($7363& $ff),y
.ac8d					L10149_END:
.ac8d					L10150:
>ac8d	02					.byte L10150_END-L10150-1
.ac8e	31 63		and ($63),y		and  ($63& $ff),y
.ac90					L10150_END:
.ac90					L10151:
>ac90	03					.byte L10151_END-L10151-1
.ac91	2d 63 73	and $7363		and  $7363
.ac94					L10151_END:
.ac94					L10152:
>ac94	02					.byte L10152_END-L10152-1
.ac95	29 63		and #$63		and  #$63
.ac97					L10152_END:
.ac97					L10153:
>ac97	02					.byte L10153_END-L10153-1
.ac98	46 63		lsr $63			lsr  $63
.ac9a					L10153_END:
.ac9a					L10154:
>ac9a	06					.byte L10154_END-L10154-1
.ac9b	4e 83 73	lsr $7383		lsr  $7383
.ac9e	6e 63 73	ror $7363		ror  $7363
.aca1					L10154_END:
.aca1					L10155:
>aca1	04					.byte L10155_END-L10155-1
.aca2	46 83		lsr $83			lsr  $83
.aca4	66 63		ror $63			ror  $63
.aca6					L10155_END:
.aca6					L10156:
>aca6	03					.byte L10156_END-L10156-1
.aca7	4e 63 73	lsr $7363		lsr  $7363
.acaa					L10156_END:
.acaa					L10157:
>acaa	06					.byte L10157_END-L10157-1
.acab	48		pha			pha
.acac	8a		txa			txa
.acad	4a		lsr a			lsr  a
.acae	aa		tax			tax
.acaf	68		pla			pla
.acb0	6a		ror a			ror  a
.acb1					L10157_END:
.acb1					L10158:
>acb1	01					.byte L10158_END-L10158-1
.acb2	4a		lsr a			lsr  a
.acb3					L10158_END:
.acb3					L10159:
>acb3	02					.byte L10159_END-L10159-1
.acb4	06 63		asl $63			asl  $63
.acb6					L10159_END:
.acb6					L10160:
>acb6	06					.byte L10160_END-L10160-1
.acb7	0e 63 73	asl $7363		asl  $7363
.acba	2e 83 73	rol $7383		rol  $7383
.acbd					L10160_END:
.acbd					L10161:
>acbd	04					.byte L10161_END-L10161-1
.acbe	06 63		asl $63			asl  $63
.acc0	26 83		rol $83			rol  $83
.acc2					L10161_END:
.acc2					L10162:
>acc2	03					.byte L10162_END-L10162-1
.acc3	0e 63 73	asl $7363		asl  $7363
.acc6					L10162_END:
.acc6					L10163:
>acc6	06					.byte L10163_END-L10163-1
.acc7	0a		asl a			asl  a
.acc8	48		pha			pha
.acc9	8a		txa			txa
.acca	2a		rol a			rol  a
.accb	aa		tax			tax
.accc	68		pla			pla
.accd					L10163_END:
.accd					L10164:
>accd	01					.byte L10164_END-L10164-1
.acce	0a		asl a			asl  a
.accf					L10164_END:
.accf					L10165:
>accf	0b					.byte L10165_END-L10165-1
.acd0	8a		txa			txa
.acd1	49 ff		eor #$ff		eor  #$ff
.acd3	aa		tax			tax
.acd4	68		pla			pla
.acd5	49 ff		eor #$ff		eor  #$ff
.acd7	1a		inc a			inc  a
.acd8	d0 01		bne $acdb		bne  *+3
.acda	e8		inx			inx
.acdb					L10165_END:
.acdb					L10166:
>acdb	03					.byte L10166_END-L10166-1
.acdc	49 ff		eor #$ff		eor  #$ff
.acde	1a		inc a			inc  a
.acdf					L10166_END:
.acdf					L10167:
>acdf	02					.byte L10167_END-L10167-1
.ace0	c6 63		dec $63			dec  $63
.ace2					L10167_END:
.ace2					L10168:
>ace2	0d					.byte L10168_END-L10168-1
.ace3	48		pha			pha
.ace4	ad 63 73	lda $7363		lda  $7363
.ace7	d0 03		bne $acec		bne  _noborrow
.ace9	ce 83 73	dec $7383		dec  $7383
.acec					_noborrow:
.acec	ce 63 73	dec $7363		dec  $7363
.acef	68		pla			pla
.acf0					L10168_END:
.acf0					L10169:
>acf0	0a					.byte L10169_END-L10169-1
.acf1	48		pha			pha
.acf2	a5 63		lda $63			lda  $63
.acf4	d0 02		bne $acf8		bne  _noborrow
.acf6	c6 83		dec $83			dec  $83
.acf8					_noborrow:
.acf8	c6 63		dec $63			dec  $63
.acfa	68		pla			pla
.acfb					L10169_END:
.acfb					L10170:
>acfb	03					.byte L10170_END-L10170-1
.acfc	ce 63 73	dec $7363		dec  $7363
.acff					L10170_END:
.acff					L10171:
>acff	01					.byte L10171_END-L10171-1
.ad00	88		dey			dey
.ad01					L10171_END:
.ad01					L10172:
>ad01	06					.byte L10172_END-L10172-1
.ad02	c9 00		cmp #$00		cmp  #0
.ad04	d0 01		bne $ad07		bne  *+3
.ad06	ca		dex			dex
.ad07	3a		dec a			dec  a
.ad08					L10172_END:
.ad08					L10173:
>ad08	01					.byte L10173_END-L10173-1
.ad09	3a		dec a			dec  a
.ad0a					L10173_END:
.ad0a					L10174:
>ad0a	02					.byte L10174_END-L10174-1
.ad0b	e6 63		inc $63			inc  $63
.ad0d					L10174_END:
.ad0d					L10175:
>ad0d	08					.byte L10175_END-L10175-1
.ad0e	ee 63 73	inc $7363		inc  $7363
.ad11	d0 03		bne $ad16		bne  _nocarry
.ad13	ee 83 73	inc $7383		inc  $7383
.ad16					_nocarry:
.ad16					L10175_END:
.ad16					L10176:
>ad16	06					.byte L10176_END-L10176-1
.ad17	e6 63		inc $63			inc  $63
.ad19	d0 02		bne $ad1d		bne  _nocarry
.ad1b	e6 83		inc $83			inc  $83
.ad1d					_nocarry:
.ad1d					L10176_END:
.ad1d					L10177:
>ad1d	03					.byte L10177_END-L10177-1
.ad1e	ee 63 73	inc $7363		inc  $7363
.ad21					L10177_END:
.ad21					L10178:
>ad21	01					.byte L10178_END-L10178-1
.ad22	c8		iny			iny
.ad23					L10178_END:
.ad23					L10179:
>ad23	04					.byte L10179_END-L10179-1
.ad24	1a		inc a			inc  a
.ad25	d0 01		bne $ad28		bne  *+3
.ad27	e8		inx			inx
.ad28					L10179_END:
.ad28					L10180:
>ad28	01					.byte L10180_END-L10180-1
.ad29	1a		inc a			inc  a
.ad2a					L10180_END:
.ad2a					ExecutableVectorTable:
>ad2a	a4 a5					.word Action_call                      ; 0
>ad2c	37 a7					.word Action_wordvar                   ; 1
>ad2e	8d a6					.word Action_until                     ; 2
>ad30	84 a6					.word Action_repeat                    ; 3
>ad32	a6 a7					.word Action_dictionarycrunch          ; 4
>ad34	b4 a6					.word Action_rfor                      ; 5
>ad36	5d a5					.word Action_procedure_def             ; 6
>ad38	e5 a6					.word Action_next                      ; 7
>ad3a	1f a6					.word Action_if                        ; 8
>ad3c	94 a5					.word Action_endproc                   ; 9
>ad3e	56 a6					.word Action_endif                     ; 10
>ad40	34 a6					.word Action_else                      ; 11
>ad42	33 a7					.word Action_bytevar                   ; 12
>ad44	a1 a6					.word Action_afor                      ; 13
.ad46					SystemDictionary:
>ad46	07					.byte	7
>ad47	4d					.byte	'M'
>ad48	52 a9					.word	L10000
>ad4a	00					.byte	0
>ad4b	01					.byte	1
>ad4c	f7					.byte	$f7
>ad4d	09					.byte	9
>ad4e	4d					.byte	'M'
>ad4f	57 a9					.word	L10001
>ad51	00					.byte	0
>ad52	03					.byte	3
>ad53	f3 bd d9				.byte	$f3,$bd,$d9
>ad56	09					.byte	9
>ad57	4d					.byte	'M'
>ad58	5a a9					.word	L10002
>ad5a	00					.byte	0
>ad5b	03					.byte	3
>ad5c	f3 bd d2				.byte	$f3,$bd,$d2
>ad5f	09					.byte	9
>ad60	4d					.byte	'M'
>ad61	5d a9					.word	L10003
>ad63	00					.byte	0
>ad64	03					.byte	3
>ad65	f3 bd c1				.byte	$f3,$bd,$c1
>ad68	07					.byte	7
>ad69	4d					.byte	'M'
>ad6a	60 a9					.word	L10004
>ad6c	00					.byte	0
>ad6d	01					.byte	1
>ad6e	f3					.byte	$f3
>ad6f	07					.byte	7
>ad70	4d					.byte	'M'
>ad71	65 a9					.word	L10005
>ad73	00					.byte	0
>ad74	01					.byte	1
>ad75	f0					.byte	$f0
>ad76	0c					.byte	12
>ad77	4d					.byte	'M'
>ad78	68 a9					.word	L10006
>ad7a	00					.byte	0
>ad7b	06					.byte	6
>ad7c	ec db d9 dd bd d2			.byte	$ec,$db,$d9,$dd,$bd,$d2
>ad82	0c					.byte	12
>ad83	4d					.byte	'M'
>ad84	72 a9					.word	L10007
>ad86	00					.byte	0
>ad87	06					.byte	6
>ad88	ec db d9 dd bd c1			.byte	$ec,$db,$d9,$dd,$bd,$c1
>ad8e	09					.byte	9
>ad8f	4d					.byte	'M'
>ad90	75 a9					.word	L10008
>ad92	00					.byte	0
>ad93	03					.byte	3
>ad94	ec bd d2				.byte	$ec,$bd,$d2
>ad97	07					.byte	7
>ad98	4d					.byte	'M'
>ad99	7c a9					.word	L10009
>ad9b	00					.byte	0
>ad9c	01					.byte	1
>ad9d	ec					.byte	$ec
>ad9e	0c					.byte	12
>ad9f	4d					.byte	'M'
>ada0	83 a9					.word	L10010
>ada2	00					.byte	0
>ada3	06					.byte	6
>ada4	e9 db d9 dd bd d2			.byte	$e9,$db,$d9,$dd,$bd,$d2
>adaa	0c					.byte	12
>adab	4d					.byte	'M'
>adac	8d a9					.word	L10011
>adae	00					.byte	0
>adaf	06					.byte	6
>adb0	e9 db d9 dd bd c1			.byte	$e9,$db,$d9,$dd,$bd,$c1
>adb6	09					.byte	9
>adb7	4d					.byte	'M'
>adb8	90 a9					.word	L10012
>adba	00					.byte	0
>adbb	03					.byte	3
>adbc	e9 bd d2				.byte	$e9,$bd,$d2
>adbf	07					.byte	7
>adc0	4d					.byte	'M'
>adc1	95 a9					.word	L10013
>adc3	00					.byte	0
>adc4	01					.byte	1
>adc5	e9					.byte	$e9
>adc6	09					.byte	9
>adc7	4d					.byte	'M'
>adc8	9a a9					.word	L10014
>adca	00					.byte	0
>adcb	03					.byte	3
>adcc	e3 bd d9				.byte	$e3,$bd,$d9
>adcf	09					.byte	9
>add0	4d					.byte	'M'
>add1	9e a9					.word	L10015
>add3	00					.byte	0
>add4	03					.byte	3
>add5	e3 bd d2				.byte	$e3,$bd,$d2
>add8	09					.byte	9
>add9	4d					.byte	'M'
>adda	a2 a9					.word	L10016
>addc	00					.byte	0
>addd	03					.byte	3
>adde	e3 bd c1				.byte	$e3,$bd,$c1
>ade1	07					.byte	7
>ade2	4d					.byte	'M'
>ade3	a6 a9					.word	L10017
>ade5	00					.byte	0
>ade6	01					.byte	1
>ade7	e3					.byte	$e3
>ade8	07					.byte	7
>ade9	4d					.byte	'M'
>adea	ac a9					.word	L10018
>adec	00					.byte	0
>aded	01					.byte	1
>adee	e2					.byte	$e2
>adef	0b					.byte	11
>adf0	4d					.byte	'M'
>adf1	b1 a9					.word	L10019
>adf3	00					.byte	0
>adf4	05					.byte	5
>adf5	de 52 50 48 c1				.byte	$de,$52,$50,$48,$c1
>adfa	08					.byte	8
>adfb	4d					.byte	'M'
>adfc	b9 a9					.word	L10020
>adfe	00					.byte	0
>adff	02					.byte	2
>ae00	de c1					.byte	$de,$c1
>ae02	09					.byte	9
>ae03	4d					.byte	'M'
>ae04	bc a9					.word	L10021
>ae06	00					.byte	0
>ae07	03					.byte	3
>ae08	d9 bd f3				.byte	$d9,$bd,$f3
>ae0b	09					.byte	9
>ae0c	4d					.byte	'M'
>ae0d	bf a9					.word	L10022
>ae0f	00					.byte	0
>ae10	03					.byte	3
>ae11	d9 bd e3				.byte	$d9,$bd,$e3
>ae14	09					.byte	9
>ae15	4d					.byte	'M'
>ae16	c3 a9					.word	L10023
>ae18	00					.byte	0
>ae19	03					.byte	3
>ae1a	d9 bd e2				.byte	$d9,$bd,$e2
>ae1d	09					.byte	9
>ae1e	4d					.byte	'M'
>ae1f	c6 a9					.word	L10024
>ae21	00					.byte	0
>ae22	03					.byte	3
>ae23	d9 bd d2				.byte	$d9,$bd,$d2
>ae26	09					.byte	9
>ae27	4d					.byte	'M'
>ae28	c8 a9					.word	L10025
>ae2a	00					.byte	0
>ae2b	03					.byte	3
>ae2c	d9 bd c1				.byte	$d9,$bd,$c1
>ae2f	0a					.byte	10
>ae30	4d					.byte	'M'
>ae31	ca a9					.word	L10026
>ae33	00					.byte	0
>ae34	04					.byte	4
>ae35	d9 ad be d3				.byte	$d9,$ad,$be,$d3
>ae39	0a					.byte	10
>ae3a	4d					.byte	'M'
>ae3b	cc a9					.word	L10027
>ae3d	00					.byte	0
>ae3e	04					.byte	4
>ae3f	57 4f 52 c4				.byte	$57,$4f,$52,$c4
>ae43	0b					.byte	11
>ae44	4d					.byte	'M'
>ae45	cf a9					.word	L10028
>ae47	00					.byte	0
>ae48	05					.byte	5
>ae49	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
>ae4e	0a					.byte	10
>ae4f	4d					.byte	'M'
>ae50	d2 a9					.word	L10029
>ae52	00					.byte	0
>ae53	04					.byte	4
>ae54	d3 ad be d9				.byte	$d3,$ad,$be,$d9
>ae58	0c					.byte	12
>ae59	4d					.byte	'M'
>ae5a	d4 a9					.word	L10030
>ae5c	00					.byte	0
>ae5d	06					.byte	6
>ae5e	d3 ad be 52 41 d9			.byte	$d3,$ad,$be,$52,$41,$d9
>ae64	0a					.byte	10
>ae65	4d					.byte	'M'
>ae66	d8 a9					.word	L10031
>ae68	00					.byte	0
>ae69	04					.byte	4
>ae6a	d3 ad be d2				.byte	$d3,$ad,$be,$d2
>ae6e	0a					.byte	10
>ae6f	4d					.byte	'M'
>ae70	db a9					.word	L10032
>ae72	00					.byte	0
>ae73	04					.byte	4
>ae74	d3 ad be c1				.byte	$d3,$ad,$be,$c1
>ae78	0c					.byte	12
>ae79	4d					.byte	'M'
>ae7a	dd a9					.word	L10033
>ae7c	00					.byte	0
>ae7d	06					.byte	6
>ae7e	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
>ae84	13					.byte	19
>ae85	4d					.byte	'M'
>ae86	e0 a9					.word	L10034
>ae88	00					.byte	0
>ae89	0d					.byte	13
>ae8a	52 45 4d 4f 56 45 2e 4c			.byte	$52,$45,$4d,$4f,$56,$45,$2e,$4c,$4f,$43,$41,$4c,$d3
>ae92	4f 43 41 4c d3
>ae97	0c					.byte	12
>ae98	4d					.byte	'M'
>ae99	e3 a9					.word	L10035
>ae9b	00					.byte	0
>ae9c	06					.byte	6
>ae9d	52 41 d9 ad be d3			.byte	$52,$41,$d9,$ad,$be,$d3
>aea3	09					.byte	9
>aea4	4d					.byte	'M'
>aea5	e7 a9					.word	L10036
>aea7	00					.byte	0
>aea8	03					.byte	3
>aea9	d2 bd f7				.byte	$d2,$bd,$f7
>aeac	09					.byte	9
>aead	4d					.byte	'M'
>aeae	ec a9					.word	L10037
>aeb0	00					.byte	0
>aeb1	03					.byte	3
>aeb2	d2 bd f3				.byte	$d2,$bd,$f3
>aeb5	0c					.byte	12
>aeb6	4d					.byte	'M'
>aeb7	f1 a9					.word	L10038
>aeb9	00					.byte	0
>aeba	06					.byte	6
>aebb	d2 bd ec db d9 dd			.byte	$d2,$bd,$ec,$db,$d9,$dd
>aec1	09					.byte	9
>aec2	4d					.byte	'M'
>aec3	f9 a9					.word	L10039
>aec5	00					.byte	0
>aec6	03					.byte	3
>aec7	d2 bd ec				.byte	$d2,$bd,$ec
>aeca	0c					.byte	12
>aecb	4d					.byte	'M'
>aecc	00 aa					.word	L10040
>aece	00					.byte	0
>aecf	06					.byte	6
>aed0	d2 bd e9 db d9 dd			.byte	$d2,$bd,$e9,$db,$d9,$dd
>aed6	09					.byte	9
>aed7	4d					.byte	'M'
>aed8	08 aa					.word	L10041
>aeda	00					.byte	0
>aedb	03					.byte	3
>aedc	d2 bd e9				.byte	$d2,$bd,$e9
>aedf	09					.byte	9
>aee0	4d					.byte	'M'
>aee1	0d aa					.word	L10042
>aee3	00					.byte	0
>aee4	03					.byte	3
>aee5	d2 bd e3				.byte	$d2,$bd,$e3
>aee8	09					.byte	9
>aee9	4d					.byte	'M'
>aeea	13 aa					.word	L10043
>aeec	00					.byte	0
>aeed	03					.byte	3
>aeee	d2 bd e2				.byte	$d2,$bd,$e2
>aef1	09					.byte	9
>aef2	4d					.byte	'M'
>aef3	18 aa					.word	L10044
>aef5	00					.byte	0
>aef6	03					.byte	3
>aef7	d2 bd d9				.byte	$d2,$bd,$d9
>aefa	09					.byte	9
>aefb	4d					.byte	'M'
>aefc	1c aa					.word	L10045
>aefe	00					.byte	0
>aeff	03					.byte	3
>af00	d2 bd c1				.byte	$d2,$bd,$c1
>af03	09					.byte	9
>af04	4d					.byte	'M'
>af05	1f aa					.word	L10046
>af07	00					.byte	0
>af08	03					.byte	3
>af09	d2 bd bf				.byte	$d2,$bd,$bf
>af0c	0a					.byte	10
>af0d	4d					.byte	'M'
>af0e	29 aa					.word	L10047
>af10	00					.byte	0
>af11	04					.byte	4
>af12	d2 bc be bf				.byte	$d2,$bc,$be,$bf
>af16	09					.byte	9
>af17	4d					.byte	'M'
>af18	33 aa					.word	L10048
>af1a	00					.byte	0
>af1b	03					.byte	3
>af1c	d2 ba f7				.byte	$d2,$ba,$f7
>af1f	09					.byte	9
>af20	4d					.byte	'M'
>af21	3c aa					.word	L10049
>af23	00					.byte	0
>af24	03					.byte	3
>af25	d2 ba f3				.byte	$d2,$ba,$f3
>af28	0c					.byte	12
>af29	4d					.byte	'M'
>af2a	3f aa					.word	L10050
>af2c	00					.byte	0
>af2d	06					.byte	6
>af2e	d2 ba ec db d9 dd			.byte	$d2,$ba,$ec,$db,$d9,$dd
>af34	09					.byte	9
>af35	4d					.byte	'M'
>af36	4a aa					.word	L10051
>af38	00					.byte	0
>af39	03					.byte	3
>af3a	d2 ba ec				.byte	$d2,$ba,$ec
>af3d	0c					.byte	12
>af3e	4d					.byte	'M'
>af3f	55 aa					.word	L10052
>af41	00					.byte	0
>af42	06					.byte	6
>af43	d2 ba e9 db d9 dd			.byte	$d2,$ba,$e9,$db,$d9,$dd
>af49	09					.byte	9
>af4a	4d					.byte	'M'
>af4b	60 aa					.word	L10053
>af4d	00					.byte	0
>af4e	03					.byte	3
>af4f	d2 ba e9				.byte	$d2,$ba,$e9
>af52	09					.byte	9
>af53	4d					.byte	'M'
>af54	69 aa					.word	L10054
>af56	00					.byte	0
>af57	03					.byte	3
>af58	d2 ba e3				.byte	$d2,$ba,$e3
>af5b	09					.byte	9
>af5c	4d					.byte	'M'
>af5d	6d aa					.word	L10055
>af5f	00					.byte	0
>af60	03					.byte	3
>af61	d2 ba e2				.byte	$d2,$ba,$e2
>af64	0c					.byte	12
>af65	4d					.byte	'M'
>af66	70 aa					.word	L10056
>af68	00					.byte	0
>af69	06					.byte	6
>af6a	52 2e 53 57 41 d0			.byte	$52,$2e,$53,$57,$41,$d0
>af70	0b					.byte	11
>af71	4d					.byte	'M'
>af72	74 aa					.word	L10057
>af74	00					.byte	0
>af75	05					.byte	5
>af76	52 2e 46 4f d2				.byte	$52,$2e,$46,$4f,$d2
>af7b	09					.byte	9
>af7c	4d					.byte	'M'
>af7d	77 aa					.word	L10058
>af7f	00					.byte	0
>af80	03					.byte	3
>af81	d2 ad f7				.byte	$d2,$ad,$f7
>af84	09					.byte	9
>af85	4d					.byte	'M'
>af86	81 aa					.word	L10059
>af88	00					.byte	0
>af89	03					.byte	3
>af8a	d2 ad f3				.byte	$d2,$ad,$f3
>af8d	0c					.byte	12
>af8e	4d					.byte	'M'
>af8f	88 aa					.word	L10060
>af91	00					.byte	0
>af92	06					.byte	6
>af93	d2 ad ec db d9 dd			.byte	$d2,$ad,$ec,$db,$d9,$dd
>af99	09					.byte	9
>af9a	4d					.byte	'M'
>af9b	94 aa					.word	L10061
>af9d	00					.byte	0
>af9e	03					.byte	3
>af9f	d2 ad ec				.byte	$d2,$ad,$ec
>afa2	0c					.byte	12
>afa3	4d					.byte	'M'
>afa4	a0 aa					.word	L10062
>afa6	00					.byte	0
>afa7	06					.byte	6
>afa8	d2 ad e9 db d9 dd			.byte	$d2,$ad,$e9,$db,$d9,$dd
>afae	09					.byte	9
>afaf	4d					.byte	'M'
>afb0	ac aa					.word	L10063
>afb2	00					.byte	0
>afb3	03					.byte	3
>afb4	d2 ad e9				.byte	$d2,$ad,$e9
>afb7	09					.byte	9
>afb8	4d					.byte	'M'
>afb9	b6 aa					.word	L10064
>afbb	00					.byte	0
>afbc	03					.byte	3
>afbd	d2 ad e3				.byte	$d2,$ad,$e3
>afc0	09					.byte	9
>afc1	4d					.byte	'M'
>afc2	be aa					.word	L10065
>afc4	00					.byte	0
>afc5	03					.byte	3
>afc6	d2 ad e2				.byte	$d2,$ad,$e2
>afc9	09					.byte	9
>afca	4d					.byte	'M'
>afcb	c5 aa					.word	L10066
>afcd	00					.byte	0
>afce	03					.byte	3
>afcf	d2 ad bf				.byte	$d2,$ad,$bf
>afd2	0a					.byte	10
>afd3	4d					.byte	'M'
>afd4	cb aa					.word	L10067
>afd6	00					.byte	0
>afd7	04					.byte	4
>afd8	d2 ad be d3				.byte	$d2,$ad,$be,$d3
>afdc	09					.byte	9
>afdd	4d					.byte	'M'
>afde	ce aa					.word	L10068
>afe0	00					.byte	0
>afe1	03					.byte	3
>afe2	d2 ab f7				.byte	$d2,$ab,$f7
>afe5	09					.byte	9
>afe6	4d					.byte	'M'
>afe7	d8 aa					.word	L10069
>afe9	00					.byte	0
>afea	03					.byte	3
>afeb	d2 ab f3				.byte	$d2,$ab,$f3
>afee	0c					.byte	12
>afef	4d					.byte	'M'
>aff0	df aa					.word	L10070
>aff2	00					.byte	0
>aff3	06					.byte	6
>aff4	d2 ab ec db d9 dd			.byte	$d2,$ab,$ec,$db,$d9,$dd
>affa	09					.byte	9
>affb	4d					.byte	'M'
>affc	eb aa					.word	L10071
>affe	00					.byte	0
>afff	03					.byte	3
>b000	d2 ab ec				.byte	$d2,$ab,$ec
>b003	0c					.byte	12
>b004	4d					.byte	'M'
>b005	f7 aa					.word	L10072
>b007	00					.byte	0
>b008	06					.byte	6
>b009	d2 ab e9 db d9 dd			.byte	$d2,$ab,$e9,$db,$d9,$dd
>b00f	09					.byte	9
>b010	4d					.byte	'M'
>b011	03 ab					.word	L10073
>b013	00					.byte	0
>b014	03					.byte	3
>b015	d2 ab e9				.byte	$d2,$ab,$e9
>b018	09					.byte	9
>b019	4d					.byte	'M'
>b01a	0d ab					.word	L10074
>b01c	00					.byte	0
>b01d	03					.byte	3
>b01e	d2 ab e3				.byte	$d2,$ab,$e3
>b021	09					.byte	9
>b022	4d					.byte	'M'
>b023	15 ab					.word	L10075
>b025	00					.byte	0
>b026	03					.byte	3
>b027	d2 ab e2				.byte	$d2,$ab,$e2
>b02a	09					.byte	9
>b02b	4d					.byte	'M'
>b02c	1c ab					.word	L10076
>b02e	00					.byte	0
>b02f	03					.byte	3
>b030	d2 ab bf				.byte	$d2,$ab,$bf
>b033	09					.byte	9
>b034	4d					.byte	'M'
>b035	22 ab					.word	L10077
>b037	00					.byte	0
>b038	03					.byte	3
>b039	d2 aa f7				.byte	$d2,$aa,$f7
>b03c	09					.byte	9
>b03d	4d					.byte	'M'
>b03e	2b ab					.word	L10078
>b040	00					.byte	0
>b041	03					.byte	3
>b042	d2 aa f3				.byte	$d2,$aa,$f3
>b045	0c					.byte	12
>b046	4d					.byte	'M'
>b047	2e ab					.word	L10079
>b049	00					.byte	0
>b04a	06					.byte	6
>b04b	d2 aa ec db d9 dd			.byte	$d2,$aa,$ec,$db,$d9,$dd
>b051	09					.byte	9
>b052	4d					.byte	'M'
>b053	39 ab					.word	L10080
>b055	00					.byte	0
>b056	03					.byte	3
>b057	d2 aa ec				.byte	$d2,$aa,$ec
>b05a	0c					.byte	12
>b05b	4d					.byte	'M'
>b05c	44 ab					.word	L10081
>b05e	00					.byte	0
>b05f	06					.byte	6
>b060	d2 aa e9 db d9 dd			.byte	$d2,$aa,$e9,$db,$d9,$dd
>b066	09					.byte	9
>b067	4d					.byte	'M'
>b068	4f ab					.word	L10082
>b06a	00					.byte	0
>b06b	03					.byte	3
>b06c	d2 aa e9				.byte	$d2,$aa,$e9
>b06f	09					.byte	9
>b070	4d					.byte	'M'
>b071	58 ab					.word	L10083
>b073	00					.byte	0
>b074	03					.byte	3
>b075	d2 aa e3				.byte	$d2,$aa,$e3
>b078	09					.byte	9
>b079	4d					.byte	'M'
>b07a	5c ab					.word	L10084
>b07c	00					.byte	0
>b07d	03					.byte	3
>b07e	d2 aa e2				.byte	$d2,$aa,$e2
>b081	09					.byte	9
>b082	4d					.byte	'M'
>b083	5f ab					.word	L10085
>b085	00					.byte	0
>b086	03					.byte	3
>b087	d2 a6 f7				.byte	$d2,$a6,$f7
>b08a	09					.byte	9
>b08b	4d					.byte	'M'
>b08c	68 ab					.word	L10086
>b08e	00					.byte	0
>b08f	03					.byte	3
>b090	d2 a6 f3				.byte	$d2,$a6,$f3
>b093	0c					.byte	12
>b094	4d					.byte	'M'
>b095	6d ab					.word	L10087
>b097	00					.byte	0
>b098	06					.byte	6
>b099	d2 a6 ec db d9 dd			.byte	$d2,$a6,$ec,$db,$d9,$dd
>b09f	09					.byte	9
>b0a0	4d					.byte	'M'
>b0a1	78 ab					.word	L10088
>b0a3	00					.byte	0
>b0a4	03					.byte	3
>b0a5	d2 a6 ec				.byte	$d2,$a6,$ec
>b0a8	0c					.byte	12
>b0a9	4d					.byte	'M'
>b0aa	83 ab					.word	L10089
>b0ac	00					.byte	0
>b0ad	06					.byte	6
>b0ae	d2 a6 e9 db d9 dd			.byte	$d2,$a6,$e9,$db,$d9,$dd
>b0b4	09					.byte	9
>b0b5	4d					.byte	'M'
>b0b6	8e ab					.word	L10090
>b0b8	00					.byte	0
>b0b9	03					.byte	3
>b0ba	d2 a6 e9				.byte	$d2,$a6,$e9
>b0bd	09					.byte	9
>b0be	4d					.byte	'M'
>b0bf	97 ab					.word	L10091
>b0c1	00					.byte	0
>b0c2	03					.byte	3
>b0c3	d2 a6 e3				.byte	$d2,$a6,$e3
>b0c6	09					.byte	9
>b0c7	4d					.byte	'M'
>b0c8	9d ab					.word	L10092
>b0ca	00					.byte	0
>b0cb	03					.byte	3
>b0cc	d2 a6 e2				.byte	$d2,$a6,$e2
>b0cf	0a					.byte	10
>b0d0	4d					.byte	'M'
>b0d1	a2 ab					.word	L10093
>b0d3	00					.byte	0
>b0d4	04					.byte	4
>b0d5	50 52 4f c3				.byte	$50,$52,$4f,$c3
>b0d9	0a					.byte	10
>b0da	4d					.byte	'M'
>b0db	a5 ab					.word	L10094
>b0dd	00					.byte	0
>b0de	04					.byte	4
>b0df	4e 45 58 d4				.byte	$4e,$45,$58,$d4
>b0e3	08					.byte	8
>b0e4	4d					.byte	'M'
>b0e5	a8 ab					.word	L10095
>b0e7	00					.byte	0
>b0e8	02					.byte	2
>b0e9	49 c6					.byte	$49,$c6
>b0eb	0d					.byte	13
>b0ec	4d					.byte	'M'
>b0ed	ab ab					.word	L10096
>b0ef	00					.byte	0
>b0f0	07					.byte	7
>b0f1	45 4e 44 50 52 4f c3			.byte	$45,$4e,$44,$50,$52,$4f,$c3
>b0f8	0b					.byte	11
>b0f9	4d					.byte	'M'
>b0fa	ae ab					.word	L10097
>b0fc	00					.byte	0
>b0fd	05					.byte	5
>b0fe	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
>b103	0a					.byte	10
>b104	4d					.byte	'M'
>b105	b1 ab					.word	L10098
>b107	00					.byte	0
>b108	04					.byte	4
>b109	45 4c 53 c5				.byte	$45,$4c,$53,$c5
>b10d	09					.byte	9
>b10e	4d					.byte	'M'
>b10f	b4 ab					.word	L10099
>b111	00					.byte	0
>b112	03					.byte	3
>b113	43 d3 bf				.byte	$43,$d3,$bf
>b116	09					.byte	9
>b117	4d					.byte	'M'
>b118	b8 ab					.word	L10100
>b11a	00					.byte	0
>b11b	03					.byte	3
>b11c	43 c3 bf				.byte	$43,$c3,$bf
>b11f	0a					.byte	10
>b120	4d					.byte	'M'
>b121	bc ab					.word	L10101
>b123	00					.byte	0
>b124	04					.byte	4
>b125	42 59 54 c5				.byte	$42,$59,$54,$c5
>b129	0b					.byte	11
>b12a	4d					.byte	'M'
>b12b	bf ab					.word	L10102
>b12d	00					.byte	0
>b12e	05					.byte	5
>b12f	42 52 45 41 cb				.byte	$42,$52,$45,$41,$cb
>b134	0b					.byte	11
>b135	4d					.byte	'M'
>b136	c1 ab					.word	L10103
>b138	00					.byte	0
>b139	05					.byte	5
>b13a	c1 be bd f3 bf				.byte	$c1,$be,$bd,$f3,$bf
>b13f	0b					.byte	11
>b140	4d					.byte	'M'
>b141	c7 ab					.word	L10104
>b143	00					.byte	0
>b144	05					.byte	5
>b145	c1 be bd e3 bf				.byte	$c1,$be,$bd,$e3,$bf
>b14a	0b					.byte	11
>b14b	4d					.byte	'M'
>b14c	ce ab					.word	L10105
>b14e	00					.byte	0
>b14f	05					.byte	5
>b150	c1 be bd e2 bf				.byte	$c1,$be,$bd,$e2,$bf
>b155	0a					.byte	10
>b156	4d					.byte	'M'
>b157	d4 ab					.word	L10106
>b159	00					.byte	0
>b15a	04					.byte	4
>b15b	c1 bd f3 bf				.byte	$c1,$bd,$f3,$bf
>b15f	09					.byte	9
>b160	4d					.byte	'M'
>b161	da ab					.word	L10107
>b163	00					.byte	0
>b164	03					.byte	3
>b165	c1 bd f3				.byte	$c1,$bd,$f3
>b168	0c					.byte	12
>b169	4d					.byte	'M'
>b16a	dd ab					.word	L10108
>b16c	00					.byte	0
>b16d	06					.byte	6
>b16e	c1 bd ec db d9 dd			.byte	$c1,$bd,$ec,$db,$d9,$dd
>b174	0c					.byte	12
>b175	4d					.byte	'M'
>b176	e0 ab					.word	L10109
>b178	00					.byte	0
>b179	06					.byte	6
>b17a	c1 bd e9 db d9 dd			.byte	$c1,$bd,$e9,$db,$d9,$dd
>b180	0a					.byte	10
>b181	4d					.byte	'M'
>b182	e3 ab					.word	L10110
>b184	00					.byte	0
>b185	04					.byte	4
>b186	c1 bd e3 bf				.byte	$c1,$bd,$e3,$bf
>b18a	09					.byte	9
>b18b	4d					.byte	'M'
>b18c	ea ab					.word	L10111
>b18e	00					.byte	0
>b18f	03					.byte	3
>b190	c1 bd e3				.byte	$c1,$bd,$e3
>b193	0a					.byte	10
>b194	4d					.byte	'M'
>b195	ee ab					.word	L10112
>b197	00					.byte	0
>b198	04					.byte	4
>b199	c1 bd e2 bf				.byte	$c1,$bd,$e2,$bf
>b19d	09					.byte	9
>b19e	4d					.byte	'M'
>b19f	f4 ab					.word	L10113
>b1a1	00					.byte	0
>b1a2	03					.byte	3
>b1a3	c1 bd e2				.byte	$c1,$bd,$e2
>b1a6	09					.byte	9
>b1a7	4d					.byte	'M'
>b1a8	f7 ab					.word	L10114
>b1aa	00					.byte	0
>b1ab	03					.byte	3
>b1ac	c1 bd d9				.byte	$c1,$bd,$d9
>b1af	09					.byte	9
>b1b0	4d					.byte	'M'
>b1b1	f9 ab					.word	L10115
>b1b3	00					.byte	0
>b1b4	03					.byte	3
>b1b5	c1 bd d2				.byte	$c1,$bd,$d2
>b1b8	09					.byte	9
>b1b9	4d					.byte	'M'
>b1ba	fa ab					.word	L10116
>b1bc	00					.byte	0
>b1bd	03					.byte	3
>b1be	c1 bd bf				.byte	$c1,$bd,$bf
>b1c1	0a					.byte	10
>b1c2	4d					.byte	'M'
>b1c3	00 ac					.word	L10117
>b1c5	00					.byte	0
>b1c6	04					.byte	4
>b1c7	c1 bc f3 bf				.byte	$c1,$bc,$f3,$bf
>b1cb	0a					.byte	10
>b1cc	4d					.byte	'M'
>b1cd	06 ac					.word	L10118
>b1cf	00					.byte	0
>b1d0	04					.byte	4
>b1d1	c1 bc e3 bf				.byte	$c1,$bc,$e3,$bf
>b1d5	0a					.byte	10
>b1d6	4d					.byte	'M'
>b1d7	0d ac					.word	L10119
>b1d9	00					.byte	0
>b1da	04					.byte	4
>b1db	c1 bc e2 bf				.byte	$c1,$bc,$e2,$bf
>b1df	0b					.byte	11
>b1e0	4d					.byte	'M'
>b1e1	13 ac					.word	L10120
>b1e3	00					.byte	0
>b1e4	05					.byte	5
>b1e5	c1 bc be f3 bf				.byte	$c1,$bc,$be,$f3,$bf
>b1ea	0b					.byte	11
>b1eb	4d					.byte	'M'
>b1ec	19 ac					.word	L10121
>b1ee	00					.byte	0
>b1ef	05					.byte	5
>b1f0	c1 bc be e3 bf				.byte	$c1,$bc,$be,$e3,$bf
>b1f5	0b					.byte	11
>b1f6	4d					.byte	'M'
>b1f7	20 ac					.word	L10122
>b1f9	00					.byte	0
>b1fa	05					.byte	5
>b1fb	c1 bc be e2 bf				.byte	$c1,$bc,$be,$e2,$bf
>b200	0a					.byte	10
>b201	4d					.byte	'M'
>b202	26 ac					.word	L10123
>b204	00					.byte	0
>b205	04					.byte	4
>b206	c1 bc be bf				.byte	$c1,$bc,$be,$bf
>b20a	09					.byte	9
>b20b	4d					.byte	'M'
>b20c	2c ac					.word	L10124
>b20e	00					.byte	0
>b20f	03					.byte	3
>b210	c1 ba f3				.byte	$c1,$ba,$f3
>b213	0c					.byte	12
>b214	4d					.byte	'M'
>b215	2f ac					.word	L10125
>b217	00					.byte	0
>b218	06					.byte	6
>b219	c1 ba ec db d9 dd			.byte	$c1,$ba,$ec,$db,$d9,$dd
>b21f	0c					.byte	12
>b220	4d					.byte	'M'
>b221	32 ac					.word	L10126
>b223	00					.byte	0
>b224	06					.byte	6
>b225	c1 ba e9 db d9 dd			.byte	$c1,$ba,$e9,$db,$d9,$dd
>b22b	09					.byte	9
>b22c	4d					.byte	'M'
>b22d	35 ac					.word	L10127
>b22f	00					.byte	0
>b230	03					.byte	3
>b231	c1 ba e3				.byte	$c1,$ba,$e3
>b234	09					.byte	9
>b235	4d					.byte	'M'
>b236	39 ac					.word	L10128
>b238	00					.byte	0
>b239	03					.byte	3
>b23a	c1 ba e2				.byte	$c1,$ba,$e2
>b23d	0b					.byte	11
>b23e	4d					.byte	'M'
>b23f	3c ac					.word	L10129
>b241	00					.byte	0
>b242	05					.byte	5
>b243	41 2e 46 4f d2				.byte	$41,$2e,$46,$4f,$d2
>b248	09					.byte	9
>b249	4d					.byte	'M'
>b24a	3f ac					.word	L10130
>b24c	00					.byte	0
>b24d	03					.byte	3
>b24e	c1 ad f3				.byte	$c1,$ad,$f3
>b251	0c					.byte	12
>b252	4d					.byte	'M'
>b253	43 ac					.word	L10131
>b255	00					.byte	0
>b256	06					.byte	6
>b257	c1 ad ec db d9 dd			.byte	$c1,$ad,$ec,$db,$d9,$dd
>b25d	0c					.byte	12
>b25e	4d					.byte	'M'
>b25f	47 ac					.word	L10132
>b261	00					.byte	0
>b262	06					.byte	6
>b263	c1 ad e9 db d9 dd			.byte	$c1,$ad,$e9,$db,$d9,$dd
>b269	09					.byte	9
>b26a	4d					.byte	'M'
>b26b	4b ac					.word	L10133
>b26d	00					.byte	0
>b26e	03					.byte	3
>b26f	c1 ad e3				.byte	$c1,$ad,$e3
>b272	09					.byte	9
>b273	4d					.byte	'M'
>b274	50 ac					.word	L10134
>b276	00					.byte	0
>b277	03					.byte	3
>b278	c1 ad e2				.byte	$c1,$ad,$e2
>b27b	09					.byte	9
>b27c	4d					.byte	'M'
>b27d	54 ac					.word	L10135
>b27f	00					.byte	0
>b280	03					.byte	3
>b281	c1 ad bf				.byte	$c1,$ad,$bf
>b284	0a					.byte	10
>b285	4d					.byte	'M'
>b286	5a ac					.word	L10136
>b288	00					.byte	0
>b289	04					.byte	4
>b28a	c1 ad be d3				.byte	$c1,$ad,$be,$d3
>b28e	09					.byte	9
>b28f	4d					.byte	'M'
>b290	5c ac					.word	L10137
>b292	00					.byte	0
>b293	03					.byte	3
>b294	c1 ab f3				.byte	$c1,$ab,$f3
>b297	0c					.byte	12
>b298	4d					.byte	'M'
>b299	60 ac					.word	L10138
>b29b	00					.byte	0
>b29c	06					.byte	6
>b29d	c1 ab ec db d9 dd			.byte	$c1,$ab,$ec,$db,$d9,$dd
>b2a3	0c					.byte	12
>b2a4	4d					.byte	'M'
>b2a5	64 ac					.word	L10139
>b2a7	00					.byte	0
>b2a8	06					.byte	6
>b2a9	c1 ab e9 db d9 dd			.byte	$c1,$ab,$e9,$db,$d9,$dd
>b2af	09					.byte	9
>b2b0	4d					.byte	'M'
>b2b1	68 ac					.word	L10140
>b2b3	00					.byte	0
>b2b4	03					.byte	3
>b2b5	c1 ab e3				.byte	$c1,$ab,$e3
>b2b8	09					.byte	9
>b2b9	4d					.byte	'M'
>b2ba	6d ac					.word	L10141
>b2bc	00					.byte	0
>b2bd	03					.byte	3
>b2be	c1 ab e2				.byte	$c1,$ab,$e2
>b2c1	09					.byte	9
>b2c2	4d					.byte	'M'
>b2c3	71 ac					.word	L10142
>b2c5	00					.byte	0
>b2c6	03					.byte	3
>b2c7	c1 ab bf				.byte	$c1,$ab,$bf
>b2ca	09					.byte	9
>b2cb	4d					.byte	'M'
>b2cc	77 ac					.word	L10143
>b2ce	00					.byte	0
>b2cf	03					.byte	3
>b2d0	c1 aa f3				.byte	$c1,$aa,$f3
>b2d3	0c					.byte	12
>b2d4	4d					.byte	'M'
>b2d5	7a ac					.word	L10144
>b2d7	00					.byte	0
>b2d8	06					.byte	6
>b2d9	c1 aa ec db d9 dd			.byte	$c1,$aa,$ec,$db,$d9,$dd
>b2df	0c					.byte	12
>b2e0	4d					.byte	'M'
>b2e1	7d ac					.word	L10145
>b2e3	00					.byte	0
>b2e4	06					.byte	6
>b2e5	c1 aa e9 db d9 dd			.byte	$c1,$aa,$e9,$db,$d9,$dd
>b2eb	09					.byte	9
>b2ec	4d					.byte	'M'
>b2ed	80 ac					.word	L10146
>b2ef	00					.byte	0
>b2f0	03					.byte	3
>b2f1	c1 aa e3				.byte	$c1,$aa,$e3
>b2f4	09					.byte	9
>b2f5	4d					.byte	'M'
>b2f6	84 ac					.word	L10147
>b2f8	00					.byte	0
>b2f9	03					.byte	3
>b2fa	c1 aa e2				.byte	$c1,$aa,$e2
>b2fd	09					.byte	9
>b2fe	4d					.byte	'M'
>b2ff	87 ac					.word	L10148
>b301	00					.byte	0
>b302	03					.byte	3
>b303	c1 a6 f3				.byte	$c1,$a6,$f3
>b306	0c					.byte	12
>b307	4d					.byte	'M'
>b308	8a ac					.word	L10149
>b30a	00					.byte	0
>b30b	06					.byte	6
>b30c	c1 a6 ec db d9 dd			.byte	$c1,$a6,$ec,$db,$d9,$dd
>b312	0c					.byte	12
>b313	4d					.byte	'M'
>b314	8d ac					.word	L10150
>b316	00					.byte	0
>b317	06					.byte	6
>b318	c1 a6 e9 db d9 dd			.byte	$c1,$a6,$e9,$db,$d9,$dd
>b31e	09					.byte	9
>b31f	4d					.byte	'M'
>b320	90 ac					.word	L10151
>b322	00					.byte	0
>b323	03					.byte	3
>b324	c1 a6 e3				.byte	$c1,$a6,$e3
>b327	09					.byte	9
>b328	4d					.byte	'M'
>b329	94 ac					.word	L10152
>b32b	00					.byte	0
>b32c	03					.byte	3
>b32d	c1 a6 e2				.byte	$c1,$a6,$e2
>b330	09					.byte	9
>b331	4d					.byte	'M'
>b332	97 ac					.word	L10153
>b334	00					.byte	0
>b335	03					.byte	3
>b336	be be f3				.byte	$be,$be,$f3
>b339	09					.byte	9
>b33a	4d					.byte	'M'
>b33b	9a ac					.word	L10154
>b33d	00					.byte	0
>b33e	03					.byte	3
>b33f	be be ec				.byte	$be,$be,$ec
>b342	09					.byte	9
>b343	4d					.byte	'M'
>b344	a1 ac					.word	L10155
>b346	00					.byte	0
>b347	03					.byte	3
>b348	be be e9				.byte	$be,$be,$e9
>b34b	09					.byte	9
>b34c	4d					.byte	'M'
>b34d	a6 ac					.word	L10156
>b34f	00					.byte	0
>b350	03					.byte	3
>b351	be be e3				.byte	$be,$be,$e3
>b354	09					.byte	9
>b355	4d					.byte	'M'
>b356	aa ac					.word	L10157
>b358	00					.byte	0
>b359	03					.byte	3
>b35a	be be d2				.byte	$be,$be,$d2
>b35d	09					.byte	9
>b35e	4d					.byte	'M'
>b35f	b1 ac					.word	L10158
>b361	00					.byte	0
>b362	03					.byte	3
>b363	be be c1				.byte	$be,$be,$c1
>b366	09					.byte	9
>b367	4d					.byte	'M'
>b368	b3 ac					.word	L10159
>b36a	00					.byte	0
>b36b	03					.byte	3
>b36c	bc bc f3				.byte	$bc,$bc,$f3
>b36f	09					.byte	9
>b370	4d					.byte	'M'
>b371	b6 ac					.word	L10160
>b373	00					.byte	0
>b374	03					.byte	3
>b375	bc bc ec				.byte	$bc,$bc,$ec
>b378	09					.byte	9
>b379	4d					.byte	'M'
>b37a	bd ac					.word	L10161
>b37c	00					.byte	0
>b37d	03					.byte	3
>b37e	bc bc e9				.byte	$bc,$bc,$e9
>b381	09					.byte	9
>b382	4d					.byte	'M'
>b383	c2 ac					.word	L10162
>b385	00					.byte	0
>b386	03					.byte	3
>b387	bc bc e3				.byte	$bc,$bc,$e3
>b38a	09					.byte	9
>b38b	4d					.byte	'M'
>b38c	c6 ac					.word	L10163
>b38e	00					.byte	0
>b38f	03					.byte	3
>b390	bc bc d2				.byte	$bc,$bc,$d2
>b393	09					.byte	9
>b394	4d					.byte	'M'
>b395	cd ac					.word	L10164
>b397	00					.byte	0
>b398	03					.byte	3
>b399	bc bc c1				.byte	$bc,$bc,$c1
>b39c	0b					.byte	11
>b39d	4d					.byte	'M'
>b39e	cf ac					.word	L10165
>b3a0	00					.byte	0
>b3a1	05					.byte	5
>b3a2	ad 52 50 48 c1				.byte	$ad,$52,$50,$48,$c1
>b3a7	08					.byte	8
>b3a8	4d					.byte	'M'
>b3a9	db ac					.word	L10166
>b3ab	00					.byte	0
>b3ac	02					.byte	2
>b3ad	ad c1					.byte	$ad,$c1
>b3af	09					.byte	9
>b3b0	4d					.byte	'M'
>b3b1	df ac					.word	L10167
>b3b3	00					.byte	0
>b3b4	03					.byte	3
>b3b5	ad ad f3				.byte	$ad,$ad,$f3
>b3b8	09					.byte	9
>b3b9	4d					.byte	'M'
>b3ba	e2 ac					.word	L10168
>b3bc	00					.byte	0
>b3bd	03					.byte	3
>b3be	ad ad ec				.byte	$ad,$ad,$ec
>b3c1	09					.byte	9
>b3c2	4d					.byte	'M'
>b3c3	f0 ac					.word	L10169
>b3c5	00					.byte	0
>b3c6	03					.byte	3
>b3c7	ad ad e9				.byte	$ad,$ad,$e9
>b3ca	09					.byte	9
>b3cb	4d					.byte	'M'
>b3cc	fb ac					.word	L10170
>b3ce	00					.byte	0
>b3cf	03					.byte	3
>b3d0	ad ad e3				.byte	$ad,$ad,$e3
>b3d3	09					.byte	9
>b3d4	4d					.byte	'M'
>b3d5	ff ac					.word	L10171
>b3d7	00					.byte	0
>b3d8	03					.byte	3
>b3d9	ad ad d9				.byte	$ad,$ad,$d9
>b3dc	09					.byte	9
>b3dd	4d					.byte	'M'
>b3de	01 ad					.word	L10172
>b3e0	00					.byte	0
>b3e1	03					.byte	3
>b3e2	ad ad d2				.byte	$ad,$ad,$d2
>b3e5	09					.byte	9
>b3e6	4d					.byte	'M'
>b3e7	08 ad					.word	L10173
>b3e9	00					.byte	0
>b3ea	03					.byte	3
>b3eb	ad ad c1				.byte	$ad,$ad,$c1
>b3ee	09					.byte	9
>b3ef	4d					.byte	'M'
>b3f0	0a ad					.word	L10174
>b3f2	00					.byte	0
>b3f3	03					.byte	3
>b3f4	ab ab f3				.byte	$ab,$ab,$f3
>b3f7	09					.byte	9
>b3f8	4d					.byte	'M'
>b3f9	0d ad					.word	L10175
>b3fb	00					.byte	0
>b3fc	03					.byte	3
>b3fd	ab ab ec				.byte	$ab,$ab,$ec
>b400	09					.byte	9
>b401	4d					.byte	'M'
>b402	16 ad					.word	L10176
>b404	00					.byte	0
>b405	03					.byte	3
>b406	ab ab e9				.byte	$ab,$ab,$e9
>b409	09					.byte	9
>b40a	4d					.byte	'M'
>b40b	1d ad					.word	L10177
>b40d	00					.byte	0
>b40e	03					.byte	3
>b40f	ab ab e3				.byte	$ab,$ab,$e3
>b412	09					.byte	9
>b413	4d					.byte	'M'
>b414	21 ad					.word	L10178
>b416	00					.byte	0
>b417	03					.byte	3
>b418	ab ab d9				.byte	$ab,$ab,$d9
>b41b	09					.byte	9
>b41c	4d					.byte	'M'
>b41d	23 ad					.word	L10179
>b41f	00					.byte	0
>b420	03					.byte	3
>b421	ab ab d2				.byte	$ab,$ab,$d2
>b424	09					.byte	9
>b425	4d					.byte	'M'
>b426	28 ad					.word	L10180
>b428	00					.byte	0
>b429	03					.byte	3
>b42a	ab ab c1				.byte	$ab,$ab,$c1
>b42d	00					.byte	$00

;******  Return to file: main.asm


;******  Processing file: utility/loadcode.asm

.b42e					LoadBasicCode:
.b42e	a9 5d		lda #$5d			lda 	#(LBCTest) & $FF
.b430	85 1a		sta $1a				sta 	zTemp0
.b432	a9 b4		lda #$b4			lda 	#(LBCTest) >> 8
.b434	85 1b		sta $1b				sta 	zTemp0+1
.b436	a9 01		lda #$01			lda 	#($801) & $FF
.b438	85 1c		sta $1c				sta 	zTemp1
.b43a	a9 08		lda #$08			lda 	#($801) >> 8
.b43c	85 1d		sta $1d				sta 	zTemp1+1
.b43e					_LBCCopy:
.b43e	a0 02		ldy #$02			ldy 	#2							; skip over the loading address
.b440	b1 1a		lda ($1a),y			lda 	(zTemp0),y 					; skips first two bytes :)
.b442	92 1c		sta ($1c)			sta 	(zTemp1)
.b444	e6 1a		inc $1a				inc 	zTemp0
.b446	d0 02		bne $b44a			bne 	_NoCarry
.b448	e6 1b		inc $1b				inc 	zTemp0+1
.b44a					_NoCarry:
.b44a	e6 1c		inc $1c				inc 	zTemp1
.b44c	d0 02		bne $b450			bne 	_NoCarry
.b44e	e6 1d		inc $1d				inc 	zTemp1+1
.b450					_NoCarry:
.b450	a5 1a		lda $1a				lda 	zTemp0
.b452	c9 1a		cmp #$1a			cmp 	#LBCTestEnd & $FF
.b454	d0 e8		bne $b43e			bne 	_LBCCopy
.b456	a5 1b		lda $1b				lda 	zTemp0+1
.b458	c9 bb		cmp #$bb			cmp 	#LBCTestEnd >> 8
.b45a	d0 e2		bne $b43e			bne 	_LBCCopy
.b45c	60		rts				rts
.b45d					LBCTest:
>b45d	01 08 0c 08 e8 03 9e 34				.binary 	"../generated/test.prg"
>b465	30 39 36 30 00 27 08 f2 03 8f 2e 20 57 4f 52 44
>b475	20 56 45 52 41 2e 4c 4f 57 40 24 39 46 32 30 00
>b485	43 08 fc 03 8f 2e 20 42 59 54 45 20 56 45 52 41
>b495	2e 48 49 47 48 40 24 39 46 32 32 00 5f 08 06 04
>b4a5	8f 2e 20 42 59 54 45 20 56 45 52 41 2e 44 41 54
>b4b5	41 40 24 39 46 32 33 00 78 08 10 04 8f 2e 20 57
>b4c5	4f 52 44 20 2e 53 50 52 49 54 45 2e 42 41 53 45
>b4d5	00 91 08 1a 04 8f 2e 20 42 59 54 45 20 2e 53 50
>b4e5	52 49 54 45 2e 4d 4f 44 45 00 a5 08 24 04 8f 2e
>b4f5	20 57 4f 52 44 20 50 54 52 40 24 31 30 00 bc 08
>b505	2e 04 8f 2e 20 50 52 4f 43 20 56 45 52 41 2e 53
>b515	45 54 28 29 00 d0 08 38 04 8f 2e 20 56 45 52 41
>b525	2e 4c 4f 57 20 3d 20 52 00 f3 08 42 04 8f 2e 20
>b535	41 3d 59 20 41 26 24 30 46 20 41 3a 24 31 30 20
>b545	56 45 52 41 2e 48 49 47 48 3d 41 00 02 09 4c 04
>b555	8f 2e 20 45 4e 44 50 52 4f 43 00 1d 09 56 04 8f
>b565	2e 20 50 52 4f 43 20 56 45 52 41 2e 50 41 4c 45
>b575	54 54 45 28 29 00 2b 09 60 04 8f 2e 20 52 41 59
>b585	2d 3e 53 00 58 09 6a 04 8f 2e 20 52 2d 3e 53 20
>b595	52 3d 59 20 3c 3c 52 20 52 3a 24 31 30 30 30 20
>b5a5	59 3d 24 30 46 20 56 45 52 41 2e 53 45 54 28 29
>b5b5	00 83 09 74 04 8f 2e 20 53 2d 3e 52 20 56 45 52
>b5c5	41 2e 44 41 54 41 3d 41 20 52 2e 53 57 41 50 20
>b5d5	56 45 52 41 2e 44 41 54 41 3d 41 00 91 09 7e 04
>b5e5	8f 2e 20 53 2d 3e 52 41 59 00 a0 09 88 04 8f 2e
>b5f5	20 45 4e 44 50 52 4f 43 00 c2 09 92 04 8f 2e 20
>b605	50 52 4f 43 20 56 45 52 41 2e 53 50 52 49 54 45
>b615	53 2e 45 4e 41 42 4c 45 28 29 00 1f 0a 9c 04 8f
>b625	2e 20 52 41 59 2d 3e 53 20 2e 53 50 52 49 54 45
>b635	2e 4d 4f 44 45 3d 59 20 52 3c 3e 3f 20 49 46 20
>b645	31 20 45 4e 44 49 46 20 41 2d 3e 53 20 56 45 52
>b655	41 2e 53 45 54 28 24 34 30 30 30 2c 24 46 29 20
>b665	53 2d 3e 41 20 56 45 52 41 2e 44 41 54 41 3d 41
>b675	20 53 2d 3e 52 41 59 00 2e 0a a6 04 8f 2e 20 45
>b685	4e 44 50 52 4f 43 00 48 0a b0 04 8f 2e 20 50 52
>b695	4f 43 20 56 45 52 41 2e 53 45 4c 45 43 54 28 29
>b6a5	00 86 0a ba 04 8f 2e 20 52 41 59 2d 3e 53 20 52
>b6b5	26 24 37 46 20 3c 3c 41 20 3c 3c 52 20 3c 3c 52
>b6c5	20 52 3a 24 35 30 30 30 20 2e 53 50 52 49 54 45
>b6d5	2e 42 41 53 45 3d 52 20 53 2d 3e 52 41 59 00 95
>b6e5	0a c4 04 8f 2e 20 45 4e 44 50 52 4f 43 00 b0 0a
>b6f5	ce 04 8f 2e 20 50 52 4f 43 20 2e 56 45 52 41 2e
>b705	41 43 43 45 53 53 28 29 00 e1 0a d8 04 8f 2e 20
>b715	59 2d 3e 53 20 52 2b 2e 53 50 52 49 54 45 2e 42
>b725	41 53 45 20 59 3d 24 30 46 20 56 45 52 41 2e 53
>b735	45 54 28 29 20 53 2d 3e 59 00 f0 0a e2 04 8f 2e
>b745	20 45 4e 44 50 52 4f 43 00 05 0b ec 04 8f 2e 20
>b755	50 52 4f 43 20 56 45 52 41 2e 58 28 29 00 53 0b
>b765	f6 04 8f 2e 20 52 41 59 2d 3e 53 20 52 2d 3e 53
>b775	20 2e 56 45 52 41 2e 41 43 43 45 53 53 28 32 29
>b785	20 53 2d 3e 52 20 56 45 52 41 2e 44 41 54 41 3d
>b795	41 20 52 2e 53 57 41 50 20 56 45 52 41 2e 44 41
>b7a5	54 41 3d 41 20 53 2d 3e 52 41 59 00 62 0b 00 05
>b7b5	8f 2e 20 45 4e 44 50 52 4f 43 00 77 0b 0a 05 8f
>b7c5	2e 20 50 52 4f 43 20 56 45 52 41 2e 59 28 29 00
>b7d5	c5 0b 14 05 8f 2e 20 52 41 59 2d 3e 53 20 52 2d
>b7e5	3e 53 20 2e 56 45 52 41 2e 41 43 43 45 53 53 28
>b7f5	34 29 20 53 2d 3e 52 20 56 45 52 41 2e 44 41 54
>b805	41 3d 41 20 52 2e 53 57 41 50 20 56 45 52 41 2e
>b815	44 41 54 41 3d 41 20 53 2d 3e 52 41 59 00 d4 0b
>b825	1e 05 8f 2e 20 45 4e 44 50 52 4f 43 00 ee 0b 28
>b835	05 8f 2e 20 50 52 4f 43 20 56 45 52 41 2e 43 52
>b845	45 41 54 45 28 29 00 fc 0b 32 05 8f 2e 20 52 41
>b855	59 2d 3e 53 00 18 0c 3c 05 8f 2e 20 3c 3c 41 20
>b865	3c 3c 41 20 3c 3c 41 20 3c 3c 41 20 41 2d 3e 53
>b875	00 53 0c 46 05 8f 2e 20 2e 56 45 52 41 2e 41 43
>b885	43 45 53 53 28 36 29 20 41 20 3d 20 31 32 20 56
>b895	45 52 41 2e 44 41 54 41 3d 41 20 53 2d 3e 41 20
>b8a5	56 45 52 41 2e 44 41 54 41 3d 41 00 61 0c 50 05
>b8b5	8f 2e 20 53 2d 3e 52 41 59 00 70 0c 5a 05 8f 2e
>b8c5	20 45 4e 44 50 52 4f 43 00 8b 0c 64 05 8f 2e 20
>b8d5	50 52 4f 43 20 56 45 52 41 2e 47 52 41 50 48 49
>b8e5	43 28 29 00 99 0c 6e 05 8f 2e 20 52 41 59 2d 3e
>b8f5	53 00 be 0c 78 05 8f 2e 20 3e 3e 52 20 52 2d 3e
>b905	53 20 52 2d 3e 53 20 2e 56 45 52 41 2e 41 43 43
>b915	45 53 53 28 30 29 00 d6 0c 82 05 8f 2e 20 53 2d
>b925	3e 52 20 56 45 52 41 2e 44 41 54 41 3d 41 00 0a
>b935	0d 8c 05 8f 2e 20 53 2d 3e 52 20 52 2e 53 57 41
>b945	50 20 41 26 24 30 46 20 41 2b 2e 53 50 52 49 54
>b955	45 2e 4d 4f 44 45 20 56 45 52 41 2e 44 41 54 41
>b965	3d 41 00 18 0d 96 05 8f 2e 20 53 2d 3e 52 41 59
>b975	00 27 0d a0 05 8f 2e 20 45 4e 44 50 52 4f 43 00
>b985	3a 0d aa 05 8f 2e 20 50 52 4f 43 20 4d 41 49 4e
>b995	28 29 00 4a 0d b4 05 8f 2e 20 50 54 52 5b 59 5d
>b9a5	3d 41 00 66 0d be 05 8f 2e 20 56 45 52 41 2e 50
>b9b5	41 4c 45 54 54 45 28 24 46 38 30 2c 31 29 00 82
>b9c5	0d c8 05 8f 2e 20 56 45 52 41 2e 50 41 4c 45 54
>b9d5	54 45 28 24 30 30 30 2c 36 29 00 a4 0d d2 05 8f
>b9e5	2e 20 56 45 52 41 2e 53 50 52 49 54 45 53 2e 45
>b9f5	4e 41 42 4c 45 28 31 2c 24 30 30 29 00 bf 0d dc
>ba05	05 8f 2e 20 56 45 52 41 2e 53 45 54 28 24 34 30
>ba15	30 30 2c 24 30 31 29 00 ea 0d e6 05 8f 2e 20 34
>ba25	30 39 36 20 52 2e 46 4f 52 20 3e 3e 41 20 3e 3e
>ba35	41 20 56 45 52 41 2e 44 41 54 41 3d 41 20 4e 45
>ba45	58 54 00 fa 0d f0 05 8f 2e 20 31 32 20 41 2e 46
>ba55	4f 52 00 06 0e fa 05 8f 2e 20 52 2d 3e 53 00 1b
>ba65	0e 04 06 8f 2e 20 56 45 52 41 2e 53 45 4c 45 43
>ba75	54 28 29 00 33 0e 0e 06 8f 2e 20 56 45 52 41 2e
>ba85	43 52 45 41 54 45 28 24 30 41 29 00 4e 0e 18 06
>ba95	8f 2e 20 56 45 52 41 2e 47 52 41 50 48 49 43 28
>baa5	24 31 34 30 30 29 00 66 0e 22 06 8f 2e 20 53 2d
>bab5	3e 52 20 3c 3c 52 20 3c 3c 52 20 3c 3c 52 00 7a
>bac5	0e 2c 06 8f 2e 20 56 45 52 41 2e 58 28 29 20 3c
>bad5	3c 52 00 8a 0e 36 06 8f 2e 20 56 45 52 41 2e 59
>bae5	28 29 00 96 0e 40 06 8f 2e 20 4e 45 58 54 00 a5
>baf5	0e 4a 06 8f 2e 20 45 4e 44 50 52 4f 43 00 ba 0e
>bb05	54 06 8f 2e 20 52 45 4d 4f 56 45 2e 4c 4f 43 41
>bb15	4c 53 00 00 00
.bb1a					LBCTestEnd:

;******  Return to file: main.asm

.bb1a					EndCode:

;******  End of listing
