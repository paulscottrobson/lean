
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -Wall -q -c -D loadbas=1 -o lean.prg -L lean.lst main.asm
; Fri Nov  1 17:43:13 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					loadbas=1

;******  Processing input file: main.asm

=$0801					ProgramStart = $0801 						; where source code starts.
=$b92d					UserDictionary = EndCode 					; user dictionary
=$a000					CodeMemory = $A000 							; where object code goes.
=$01					CodePage = $01 								; page for code memory.
=$063f					AssemblerStack = $063F 						; compiler stack space.
=$0640					lineBuffer = $0640	 						; current line, match encoded.
=$0680					valueBuffer = $0680 						; buffer for associated values.
=$0700					VariableMemory = $0700 						; data memory allocaed from here
=$0700					BankCode = $0700 							; bank handling code goes here.
=64					LINEBUFFSIZE = 64
=128					VALBUFFSIZE = 128

;******  Processing file: data.asm

=$9f61					ramBank = $9F61 							; RAM Memory bank register.
>0010					scanPtr:	.word ?							; BASIC scan position.
>0012					aStackPtr:	.word ? 						; compiler stack.
>0014					dictPtr:	.word ? 						; dictionary pointer
>0016					genPtr:		.word ? 						; code generation pointer
>0018					varPtr: 	.word ?							; next free variable pointer.
>001a					zTemp0:		.word ? 						; temps.
>001c					zTemp1:		.word ?
>001e					zTemp2:		.word ?
>0020					zTemp3:		.word ?
>0022					lastCreate:	.word ? 						; last created dictionary word
>0024					codePtr:	.word ? 						; code pointer
>0026					codeBank:	.byte ?							; code bank
>0027					originalSP:			.byte ? 				; 6502 stack on entry.
>0028					lastDefine:			.fill 3 				; last defined word (addr/page)
>002b					lineNumber:			.word ? 				; current line number
>002d					identStart:			.byte ? 				; start offset of current identifier
>002e					dirLowByte:			.byte ?					; values returned from search
>002f					dirHighByte:		.byte ?
>0030					dirBank:			.byte ?
>0031					dirLength:			.byte ?
>0032					valueBufferPos:		.byte ? 				; position in value buffer.
>0033					genPos: 			.byte ? 				; position in line buffer, generation.
>0034					generateVar:		.word ? 				; variables used in set value
>0036					elementData:		.fill 3 				; data from matched constant/identifier
>0039					codeBackup:			.fill 3 				; backup code pointer.
>003c					varSize:			.byte ? 				; size of current variable.
>003d					matchCount:			.byte ? 				; successful line matches (for errors)
=$8f					REM_TOKEN = $8F 							; C64 REM Token
="*"					SCM_TOP = '*'								; top of stack marker.
="P"					SCM_PROC = 'P'								; procedure marker
="R"					SCM_REPEAT = 'R'							; repeat marker
="F"					SCM_FOR = 'F' 								; for marker (8 bit)
="G"					SCM_INTFOR = 'G'							; for marker (16 bit)
="I"					SCM_IF = 'I'								; if/else/endif marker.
=$60					CPU_RETURN = $60 							; RTS opcode.
=$48					CPU_PHA = $48 								; PHA
=$68					CPU_PLA = $68 								; PLA
=$3a					CPU_DECA = $3A 								; DEC A
=$d0					CPU_BNE = $D0								; BNE
=$80					CPU_BRA = $80								; BRA
=$20					CPU_JSR = $20 								; JSR
=$da					CPU_PHX = $DA 								; PHX
=$fa					CPU_PLX = $FA 								; PLX
=$c9					CPU_CMPIM = $C9 							; CMP#
=$e0					CPU_CPXIM = $E0 							; CPX#
=$ca					CPU_DEX = $CA 								; DEX

;******  Return to file: main.asm


;******  Processing file: generated/cgconst.inc

=$53					CGEN_C_ISZERO = $53
=$63					CGEN_C_LOW = $63
=$73					CGEN_C_HIGH = $73
=$83					CGEN_C_LOWPLUS1 = $83
=$93					CGEN_C_SETDATA = $93
=$a3					CGEN_C_EXEC = $a3

;******  Return to file: main.asm


;******  Processing file: macros.inc


;******  Return to file: main.asm

.a000					Start:
.a000	4c 21 a0	jmp $a021			jmp 	RunCompiler
.a003	4c 59 a0	jmp $a059			jmp 	CallCodeMemory
.a006					LeanMessage:
>a006	0d 20 20 20 20 4c 45 41				.text 	13,"    LEAN V0.3 (01-NOV-19)",0
>a00e	4e 20 56 30 2e 33 20 28 30 31 2d 4e 4f 56 2d 31
>a01e	39 29 00
.a021					RunCompiler:
.a021	ba		tsx				tsx 									; save SP
.a022	86 27		stx $27				stx 	originalSP
.a024	a2 05		ldx #$05			ldx 	#5 								; set up vectors.
.a026	bd 00 a0	lda $a000,x	_RCCopy:lda 	Start,x
.a029	95 00		sta $00,x			sta 	$00,x
.a02b	ca		dex				dex
.a02c	10 f8		bpl $a026			bpl 	_RCCopy
.a02e	20 5a b2	jsr $b25a			jsr 	LoadBasicCode
.a031	20 ab a3	jsr $a3ab			jsr 	BankCopyCode 					; copy banked code to RAM space.
.a034	20 e6 a8	jsr $a8e6			jsr 	StackReset 						; reset convert stack.
.a037	20 2a a7	jsr $a72a			jsr 	VariableReset 					; reset variable memory.
.a03a	20 20 a4	jsr $a420			jsr 	DictionaryReset 				; reset user dictionary
.a03d	20 94 a4	jsr $a494			jsr 	CodeReset 						; reset code output.
.a040	20 77 a0	jsr $a077			jsr 	ScannerReset 					; reset scanner
.a043					AsmLoop:
.a043	20 7a a0	jsr $a07a			jsr 	ScannerFind 					; next thing in code
.a046	90 08		bcc $a050			bcc 	AsmEnd 							; nothing more
.a048	20 bc a0	jsr $a0bc			jsr 	ProcessLineToBuffer 			; convert it.
.a04b	20 08 a2	jsr $a208			jsr 	GeneratorSearch 				; check it for generators
.a04e	80 f3		bra $a043			bra 	AsmLoop 						; and keep going.
.a050					AsmEnd:
.a050	a9 2a		lda #$2a			lda 	#SCM_TOP 						; check structures are done
.a052	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a055					ReturnCaller:
.a055	a6 27		ldx $27				ldx		originalSP 						; restore XP and exit.
.a057	9a		txs				txs
.a058	60		rts				rts
.a059					CallCodeMemory:
.a059	a5 28		lda $28				lda 	lastDefine 					; check if something defined (no error)
.a05b	05 29		ora $29				ora 	lastDefine+1
.a05d	05 2a		ora $2a				ora 	lastDefine+2
.a05f	f0 06		beq $a067			beq 	_NoExecute
.a061	20 ab a3	jsr $a3ab			jsr 	BankCopyCode 				; copy banked code to RAM space.
.a064	4c 02 07	jmp $0702			jmp 	CodeRunCode
.a067					_NoExecute:
.a067	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a06a	4c 45 41 4e 3a 4e 4f 20				.text 	"LEAN:","NO CODE",$00
>a072	43 4f 44 45 00

;******  Processing file: lean/scanner.asm

.a077					ScannerReset:
.a077	64 11		stz $11				stz 	scanPtr+1 					; zero MSB means the start
.a079	60		rts				rts
.a07a					ScannerFind:
.a07a	48		pha				pha 								; save registers
.a07b	da		phx				phx
.a07c	5a		phy				phy
.a07d	a5 11		lda $11				lda 	scanPtr+1 					; reset the scanner pointer ?
.a07f	d0 0a		bne $a08b			bne 	_SFScanForward 				; no, scan forward from current.
.a081	a9 01		lda #$01			lda 	#(ProgramStart) & $FF
.a083	85 10		sta $10				sta 	scanPtr
.a085	a9 08		lda #$08			lda 	#(ProgramStart) >> 8
.a087	85 11		sta $11				sta 	scanPtr+1
.a089	80 12		bra $a09d			bra 	_SFCheck 					; check if this one is a REM.
.a08b					_SFScanForward:
.a08b	a0 01		ldy #$01			ldy 	#1 							; check if the offset is zero
.a08d	b2 10		lda ($10)			lda 	(scanPtr)
.a08f	11 10		ora ($10),y			ora 	(scanPtr),y
.a091	18		clc				clc 								; if so exit with CC.
.a092	f0 24		beq $a0b8			beq 	_SFExit
.a094	b2 10		lda ($10)			lda 	(scanPtr) 					; forward to next.
.a096	aa		tax				tax
.a097	b1 10		lda ($10),y			lda 	(scanPtr),y
.a099	86 10		stx $10				stx 	scanPtr
.a09b	85 11		sta $11				sta 	scanPtr+1
.a09d					_SFCheck:
.a09d	a0 02		ldy #$02			ldy 	#2 								; copy line number.
.a09f	b1 10		lda ($10),y			lda 	(scanPtr),y
.a0a1	85 2b		sta $2b				sta 	lineNumber
.a0a3	c8		iny				iny
.a0a4	b1 10		lda ($10),y			lda 	(scanPtr),y
.a0a6	85 2c		sta $2c				sta 	lineNumber+1
.a0a8	c8		iny				iny
.a0a9	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it a "REM." line ?
.a0ab	c9 8f		cmp #$8f			cmp 	#REM_TOKEN
.a0ad	d0 dc		bne $a08b			bne 	_SFScanForward
.a0af	c8		iny				iny
.a0b0	b1 10		lda ($10),y			lda 	(scanPtr),y 				; is it followed by a '.'
.a0b2	c8		iny				iny
.a0b3	c9 2e		cmp #$2e			cmp 	#"."
.a0b5	d0 d4		bne $a08b			bne 	_SFScanForward
.a0b7	38		sec				sec 								; found something, exit with CS.
.a0b8					_SFExit:
.a0b8	7a		ply				ply 								; load registers and exit.
.a0b9	fa		plx				plx
.a0ba	68		pla				pla
.a0bb	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: lean/process.asm

.a0bc					ProcessLineToBuffer:
.a0bc	a0 06		ldy #$06			ldy 	#6 							; position in line
.a0be	a2 00		ldx #$00			ldx 	#0 							; position in buffer
.a0c0	64 32		stz $32				stz 	valueBufferPos 				; reset value buffer pos
.a0c2	a9 ff		lda #$ff			lda 	#$FF
.a0c4	8d 80 06	sta $0680			sta 	valueBuffer 				; erase value buffer (end marker $FF)
.a0c7					_PLTConvert:
.a0c7	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a0c9	f0 7a		beq $a145			beq 	_PLTExit
.a0cb	c8		iny				iny
.a0cc	c9 20		cmp #$20			cmp 	#' ' 						; skip over spaces.
.a0ce	f0 f7		beq $a0c7			beq 	_PLTConvert
.a0d0	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; identifier character.
.a0d3	b0 08		bcs $a0dd			bcs 	_PLTIsIdentifier 			; it's an identifier.
.a0d5	09 80		ora #$80			ora 	#$80 						; set bit 7
.a0d7	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write out
.a0da	e8		inx				inx
.a0db	80 ea		bra $a0c7			bra 	_PLTConvert
.a0dd					_PLTIsIdentifier:
.a0dd	86 2d		stx $2d				stx 	identStart 					; save as start of identifier.
.a0df					_PLTGetIdentifier:
.a0df	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out.
.a0e2	e8		inx				inx
.a0e3	b1 10		lda ($10),y			lda 	(scanPtr),y	 				; get next character
.a0e5	c8		iny				iny
.a0e6	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; still identifier
.a0e9	b0 f4		bcs $a0df			bcs 	_PLTGetIdentifier
.a0eb	88		dey				dey 								; undo last bump.
.a0ec					_PLTGotIdentifier:
.a0ec	bd 3f 06	lda $063f,x			lda 	lineBuffer-1,x 				; set bit 7 of last
.a0ef	09 80		ora #$80			ora 	#$80
.a0f1	9d 3f 06	sta $063f,x			sta 	lineBuffer-1,x
.a0f4	5a		phy				phy
.a0f5	da		phx				phx
.a0f6	20 9d a1	jsr $a19d			jsr 	PLTGetAddress 				; XY <= address of identifier.
.a0f9	20 2f a4	jsr $a42f			jsr 	DictionarySearch 			; is it in the dictionaries ?
.a0fc	90 0c		bcc $a10a			bcc 	_PLTTryConstant
.a0fe	c9 50		cmp #$50			cmp 	#"P" 						; procedure, short or var ?
.a100	f0 4b		beq $a14d			beq 	_PLTFoundIdentifier
.a102	c9 53		cmp #$53			cmp 	#"S"
.a104	f0 47		beq $a14d			beq 	_PLTFoundIdentifier
.a106	c9 49		cmp #$49			cmp 	#"I"
.a108	f0 43		beq $a14d			beq 	_PLTFoundIdentifier
.a10a					_PLTTryConstant:
.a10a	20 9d a1	jsr $a19d			jsr 	PLTGetAddress 				; try as a constant
.a10d	20 56 a8	jsr $a856			jsr 	StringToInt
.a110	b0 04		bcs $a116			bcs 	_PLTAttachIdentifier
.a112	fa		plx				plx 								; leave as it is - unknown identifier
.a113	7a		ply				ply
.a114	80 b1		bra $a0c7			bra 	_PLTConvert
.a116					_PLTAttachIdentifier:
.a116	86 1a		stx $1a				stx 	zTemp0 						; save XY
.a118	84 1b		sty $1b				sty 	zTemp0+1
.a11a	fa		plx				plx 								; restore current position
.a11b	7a		ply				ply
.a11c	b1 10		lda ($10),y			lda 	(scanPtr),y 				; next character
.a11e	c9 2d		cmp #$2d			cmp 	#"-"
.a120	d0 04		bne $a126			bne 	_PLTNotMinus
.a122	20 8f a1	jsr $a18f			jsr 	_PLTNegateZTemp0 			; negate zTemp0
.a125	c8		iny				iny 								; skip it if '-'
.a126					_PLTNotMinus:
.a126	5a		phy				phy 								; save current positions
.a127	da		phx				phx
.a128	a6 1a		ldx $1a				ldx 	zTemp0 						; restore XY number
.a12a	a4 1b		ldy $1b				ldy 	zTemp0+1
.a12c	a9 00		lda #$00			lda 	#0
.a12e	20 cd a1	jsr $a1cd			jsr 	ProcessRecordData 			; record associated data
.a131	a9 62		lda #$62			lda 	#"b"
.a133	c0 00		cpy #$00			cpy 	#0
.a135	f0 02		beq $a139			beq 	_PLTRecord
.a137	a9 77		lda #$77			lda 	#"w"
.a139					_PLTRecord:
.a139	fa		plx				plx 								; restore XY position
.a13a	7a		ply				ply
.a13b	a6 2d		ldx $2d				ldx 	identStart 					; overwrite the position with ident start
.a13d	09 80		ora #$80			ora 	#$80 						; bit 7, it's an element in its own right
.a13f	9d 40 06	sta $0640,x			sta 	lineBuffer,x 				; write it out
.a142	e8		inx				inx 								; bump the position
.a143	80 82		bra $a0c7			bra		_PLTConvert 				; do the next one.
.a145					_PLTExit:
.a145	9e 40 06	stz $0640,x			stz 	lineBuffer,x 				; make it ASCIIZ
.a148	e0 40		cpx #$40			cpx		#LINEBUFFSIZE 				; line too long.
.a14a	b0 31		bcs $a17d			bcs 	_PLTBuffer
.a14c	60		rts				rts
.a14d					_PLTFoundIdentifier:
.a14d	48		pha				pha 								; save type.
.a14e	a6 2e		ldx $2e				ldx 	dirLowByte 					; get the dictionary AXY values
.a150	a4 2f		ldy $2f				ldy 	dirHighByte
.a152	a5 30		lda $30				lda 	dirBank
.a154	20 cd a1	jsr $a1cd			jsr 	ProcessRecordData 			; attached to identstart
.a157	68		pla				pla 								; get type back, which is I or S or P
.a158	09 20		ora #$20			ora 	#$20 						; make it lower case.
.a15a	c9 70		cmp #$70			cmp 	#"p"						; P goes untrammelled
.a15c	f0 db		beq $a139			beq 	_PLTRecord
.a15e	c0 00		cpy #$00			cpy 	#0 							; if Y = 0, e.g. zero page, use that.
.a160	f0 d7		beq $a139			beq 	_PLTRecord
.a162	49 05		eor #$05			eor 	#"i"^"l" 					; convert it to L
.a164	c9 6c		cmp #$6c			cmp 	#"l"
.a166	f0 d1		beq $a139			beq 	_PLTRecord
.a168	a9 63		lda #$63			lda 	#"c" 						; otherwise C
.a16a	80 cd		bra $a139			bra 	_PLTRecord
.a16c					_PLTError:
.a16c	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a16f	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX ?",$00
>a177	54 41 58 20 3f 00
.a17d					_PLTBuffer:
.a17d	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a180	4c 45 41 4e 3a 4c 49 4e				.text 	"LEAN:","LINE SIZE",$00
>a188	45 20 53 49 5a 45 00
.a18f					_PLTNegateZTemp0:
.a18f	38		sec				sec 								; negate zTemp0
.a190	a9 00		lda #$00			lda 	#0
.a192	e5 1a		sbc $1a				sbc 	zTemp0
.a194	85 1a		sta $1a				sta 	zTemp0
.a196	a9 00		lda #$00			lda 	#0
.a198	e5 1b		sbc $1b				sbc 	zTemp0+1
.a19a	85 1b		sta $1b				sta 	zTemp0+1
.a19c	60		rts				rts
.a19d					PLTGetAddress:
.a19d	18		clc				clc
.a19e	a5 2d		lda $2d				lda 	identStart
.a1a0	69 40		adc #$40			adc 	#lineBuffer & $FF
.a1a2	aa		tax				tax
.a1a3	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a1a5	90 01		bcc $a1a8			bcc 	_PLGANoCarry
.a1a7	c8		iny				iny
.a1a8					_PLGANoCarry:
.a1a8	60		rts				rts
.a1a9					PLTCheckCharacter:
.a1a9	c9 25		cmp #$25			cmp 	#'%'
.a1ab	f0 1c		beq $a1c9			beq 	_PLCCYes
.a1ad	c9 5f		cmp #$5f			cmp 	#'_'
.a1af	f0 18		beq $a1c9			beq 	_PLCCYes
.a1b1	c9 24		cmp #$24			cmp 	#'$'
.a1b3	f0 14		beq $a1c9			beq 	_PLCCYes
.a1b5	c9 2e		cmp #$2e			cmp 	#'.'
.a1b7	f0 10		beq $a1c9			beq 	_PLCCYes
.a1b9	c9 30		cmp #$30			cmp 	#'0'
.a1bb	90 0e		bcc $a1cb			bcc 	_PLCCNo
.a1bd	c9 3a		cmp #$3a			cmp 	#'9'+1
.a1bf	90 08		bcc $a1c9			bcc 	_PLCCYes
.a1c1	c9 41		cmp #$41			cmp 	#'A'
.a1c3	90 06		bcc $a1cb			bcc 	_PLCCNo
.a1c5	c9 5b		cmp #$5b			cmp 	#'Z'+1
.a1c7	b0 02		bcs $a1cb			bcs 	_PLCCNo
.a1c9					_PLCCYes:
.a1c9	38		sec				sec
.a1ca	60		rts				rts
.a1cb					_PLCCNo:
.a1cb	18		clc				clc
.a1cc	60		rts				rts
.a1cd					ProcessRecordData:
.a1cd	48		pha				pha
.a1ce	da		phx				phx
.a1cf	5a		phy				phy
.a1d0	da		phx				phx
.a1d1	a6 32		ldx $32				ldx 	valueBufferPos 				; get current position
.a1d3	9d 83 06	sta $0683,x			sta 	valueBuffer+3,x 			; copy data to it
.a1d6	98		tya				tya
.a1d7	9d 82 06	sta $0682,x			sta 	valueBuffer+2,x
.a1da	68		pla				pla
.a1db	9d 81 06	sta $0681,x			sta 	valueBuffer+1,x
.a1de	a5 2d		lda $2d				lda 	identStart
.a1e0	9d 80 06	sta $0680,x			sta 	valueBuffer+0,x
.a1e3	e8		inx				inx 								; next position
.a1e4	e8		inx				inx
.a1e5	e8		inx				inx
.a1e6	e8		inx				inx
.a1e7	86 32		stx $32				stx 	valueBufferPos 				; save
.a1e9	a9 ff		lda #$ff			lda 	#$FF 						; write end marker.
.a1eb	9d 80 06	sta $0680,x			sta 	valueBuffer,x
.a1ee	e0 80		cpx #$80			cpx 	#VALBUFFSIZE
.a1f0	b0 04		bcs $a1f6			bcs 	_PRDError
.a1f2	7a		ply				ply
.a1f3	fa		plx				plx
.a1f4	68		pla				pla
.a1f5	60		rts				rts
.a1f6					_PRDError:
.a1f6	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a1f9	4c 45 41 4e 3a 43 4f 4d				.text 	"LEAN:","COMPLEX ?",$00
>a201	50 4c 45 58 20 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/generate.asm

.a208					GeneratorSearch:
.a208	64 33		stz $33				stz 	genPos 						; reset the generator pointer
.a20a	64 3d		stz $3d				stz 	matchCount 					; reset the match count.
.a20c					_GSNextItem:
.a20c	a6 33		ldx $33				ldx 	genPos 						; check end ?
.a20e	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a211	f0 07		beq $a21a			beq 	_GSExit
.a213	20 1b a2	jsr $a21b			jsr 	GenerateOne 				; do one match
.a216	e6 3d		inc $3d				inc 	matchCount 					; bump the count.
.a218	80 f2		bra $a20c			bra 	_GSNextItem
.a21a					_GSExit:
.a21a	60		rts				rts
.a21b					GenerateOne:
.a21b	a5 33		lda $33				lda 	genPos 						; point XY to the next thing
.a21d	18		clc				clc 								; the actual address in the line buffer.
.a21e	69 40		adc #$40			adc 	#lineBuffer & $FF
.a220	aa		tax				tax
.a221	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a223	90 01		bcc $a226			bcc 	_GSNoCarry
.a225	c8		iny				iny
.a226					_GSNoCarry:
.a226	20 2c a4	jsr $a42c			jsr 	DictionarySearchSystemOnly 	; dictionary search
.a229	b0 10		bcs $a23b			bcs 	_GSFound
.a22b					_GSError:
.a22b	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a22e	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX?",$00
>a236	54 41 58 3f 00
.a23b					_GSFound:
.a23b	c9 4d		cmp #$4d			cmp 	#"M"						; check it's a match.
.a23d	d0 ec		bne $a22b			bne 	_GSError
.a23f	a4 31		ldy $31				ldy 	dirLength 					; advance to next
.a241	a6 33		ldx $33				ldx 	genPos 						; checking for a-z.
.a243					_GSCheckData:
.a243	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a246	29 7f		and #$7f			and 	#$7F
.a248	c9 61		cmp #$61			cmp 	#'a'
.a24a	90 08		bcc $a254			bcc 	_GSNotLC
.a24c	c9 7b		cmp #$7b			cmp 	#'z'+1
.a24e	b0 04		bcs $a254			bcs 	_GSNotLC
.a250	8a		txa				txa
.a251	20 d7 a2	jsr $a2d7			jsr 	GenCopyData
.a254					_GSNotLC:
.a254	e8		inx				inx
.a255	88		dey				dey
.a256	d0 eb		bne $a243			bne 	_GSCheckData
.a258	86 33		stx $33				stx 	genPos
.a25a	a5 2e		lda $2e				lda 	dirLowByte					; copy address to genPtr
.a25c	85 16		sta $16				sta 	genPtr
.a25e	a5 2f		lda $2f				lda 	dirHighByte
.a260	85 17		sta $17				sta 	genPtr+1
.a262	b2 16		lda ($16)			lda 	(genPtr)					; count in A
.a264	f0 25		beq $a28b			beq 	_GSNext 					; nothing !
.a266	aa		tax				tax 								; X is count
.a267	a0 01		ldy #$01			ldy 	#1
.a269					_GSGenerate:
.a269	b1 16		lda ($16),y			lda 	(genPtr),y 					; execute something
.a26b	c9 a3		cmp #$a3			cmp 	#CGEN_C_EXEC
.a26d	f0 1d		beq $a28c			beq 	_GSExecute
.a26f	c9 93		cmp #$93			cmp 	#CGEN_C_SETDATA 			; set data ?
.a271	d0 0e		bne $a281			bne 	_GSCopy
.a273	c8		iny				iny									; copy next two bytes out.
.a274	b1 16		lda ($16),y			lda 	(genPtr),y
.a276	85 34		sta $34				sta 	generateVar
.a278	c8		iny				iny
.a279	b1 16		lda ($16),y			lda 	(genPtr),y
.a27b	85 35		sta $35				sta 	generateVar+1
.a27d	ca		dex				dex
.a27e	ca		dex				dex
.a27f	80 06		bra $a287			bra 	_GSContinue
.a281					_GSCopy:
.a281	20 a8 a2	jsr $a2a8			jsr 	GenConvertByte 				; replace bytes
.a284	20 00 07	jsr $0700			jsr 	CodeWriteByte				; write out.
.a287					_GSContinue:
.a287	c8		iny				iny
.a288	ca		dex				dex
.a289	d0 de		bne $a269			bne 	_GSGenerate
.a28b					_GSNext:
.a28b	60		rts				rts
.a28c					_GSExecute:
.a28c	c8		iny				iny 								; grab one.
.a28d	ca		dex				dex
.a28e	da		phx				phx 								; save XY
.a28f	5a		phy				phy
.a290	b1 16		lda ($16),y			lda 	(genPtr),y 					; read the execution ID
.a292	0a		asl a				asl 	a 							; index into table.
.a293	aa		tax				tax
.a294	bd 7c ac	lda $ac7c,x			lda 	ExecutableVectorTable,x 	; read jump vector
.a297	85 1a		sta $1a				sta 	zTemp0
.a299	bd 7d ac	lda $ac7d,x			lda 	ExecutableVectorTable+1,x
.a29c	85 1b		sta $1b				sta 	zTemp0+1
.a29e	20 a5 a2	jsr $a2a5			jsr 	_GSCallzTemp0 				; call routine
.a2a1	7a		ply				ply 								; restore XY
.a2a2	fa		plx				plx
.a2a3	80 e2		bra $a287			bra 	_GSContinue
.a2a5					_GSCallzTemp0:
.a2a5	6c 1a 00	jmp ($001a)			jmp 	(zTemp0)
.a2a8					GenConvertByte:
.a2a8	c9 63		cmp #$63			cmp 	#CGEN_C_LOW
.a2aa	f0 09		beq $a2b5			beq 	_GCBLowByte
.a2ac	c9 83		cmp #$83			cmp 	#CGEN_C_LOWPLUS1
.a2ae	f0 08		beq $a2b8			beq 	_GCBLowBytePlus1
.a2b0	c9 73		cmp #$73			cmp 	#CGEN_C_HIGH
.a2b2	f0 0a		beq $a2be			beq 	_GCBHighByte
.a2b4	60		rts				rts
.a2b5					_GCBLowByte:
.a2b5	a5 36		lda $36				lda 	elementData
.a2b7	60		rts				rts
.a2b8					_GCBLowBytePlus1:
.a2b8	a5 36		lda $36				lda 	elementData
.a2ba	1a		inc a				inc 	a
.a2bb	f0 04		beq $a2c1			beq 	_GCBSystem
.a2bd	60		rts				rts
.a2be					_GCBHighByte:
.a2be	a5 37		lda $37				lda 	elementData+1
.a2c0	60		rts				rts
.a2c1					_GCBSystem:
.a2c1	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a2c4	4c 45 41 4e 3a 57 4f 52				.text 	"LEAN:","WORD OFF PAGE",$00
>a2cc	44 20 4f 46 46 20 50 41 47 45 00
.a2d7					GenCopyData:
.a2d7	48		pha				pha
.a2d8	da		phx				phx
.a2d9	5a		phy				phy
.a2da	85 1a		sta $1a				sta 	zTemp0
.a2dc	a2 fc		ldx #$fc			ldx 	#256-4
.a2de					_GCDLoop:
.a2de	e8		inx				inx 								; next slot
.a2df	e8		inx				inx
.a2e0	e8		inx				inx
.a2e1	e8		inx				inx
.a2e2	bd 80 06	lda $0680,x			lda 	valueBuffer,x 				; next in value buffer
.a2e5	c9 ff		cmp #$ff			cmp 	#$FF
.a2e7	f0 16		beq $a2ff			beq 	_GCDError 					; system ?
.a2e9	c5 1a		cmp $1a				cmp 	zTemp0 						; match.
.a2eb	d0 f1		bne $a2de			bne 	_GCDLoop
.a2ed	a0 00		ldy #$00			ldy 	#0 							; copy assoc data back
.a2ef					_GCDCopy:
.a2ef	bd 81 06	lda $0681,x			lda 	valueBuffer+1,x
.a2f2	99 36 00	sta $0036,y			sta 	elementData,y
.a2f5	e8		inx				inx
.a2f6	c8		iny				iny
.a2f7	c0 03		cpy #$03			cpy 	#3
.a2f9	d0 f4		bne $a2ef			bne 	_GCDCopy
.a2fb	7a		ply				ply
.a2fc	fa		plx				plx
.a2fd	68		pla				pla
.a2fe	60		rts				rts
.a2ff					_GCDError:
.a2ff	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a302	4c 45 41 4e 3a 53 59 53				.text 	"LEAN:","SYS0?",$00
>a30a	30 3f 00

;******  Return to file: main.asm


;******  Processing file: lean/extract.asm

.a30d					EGetUnknownIdentifier:
.a30d	a6 33		ldx $33				ldx 	genPos 						; get next character
.a30f	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a312	29 7f		and #$7f			and 	#$7F
.a314	20 a9 a1	jsr $a1a9			jsr 	PLTCheckCharacter 			; is it an identifier ?
.a317	90 15		bcc $a32e			bcc 	_EUIError 					; no
.a319	da		phx				phx 								; save start position on stack.
.a31a					_EGetFindEnd:
.a31a	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a31d	e8		inx				inx
.a31e	0a		asl a				asl 	a
.a31f	90 f9		bcc $a31a			bcc 	_EGetFindEnd
.a321	86 33		stx $33				stx 	genPos 						; points to the next thing.
.a323	68		pla				pla 								; offset
.a324	a0 06		ldy #$06			ldy 	#lineBuffer >> 8 			; make address in YX
.a326	18		clc				clc
.a327	69 40		adc #$40			adc 	#lineBuffer & $FF
.a329	aa		tax				tax
.a32a	90 01		bcc $a32d			bcc 	_EGetNoCarry
.a32c	c8		iny				iny
.a32d					_EGetNoCarry:
.a32d	60		rts				rts
.a32e					_EUIError:
.a32e	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a331	4c 45 41 4e 3a 49 44 45				.text 	"LEAN:","IDENTIFIER ?",$00
>a339	4e 54 49 46 49 45 52 20 3f 00
.a343					EGetSyntaxCheck:
.a343	48		pha				pha
.a344	da		phx				phx
.a345	a6 33		ldx $33				ldx 	genPos 						; position of next
.a347	5d 40 06	eor $0640,x			eor 	lineBuffer,x 				; bits 0-6 will be zero if match
.a34a	29 7f		and #$7f			and 	#$7F
.a34c	d0 05		bne $a353			bne 	_EGSFail 					; different
.a34e	e6 33		inc $33				inc 	genPos 						; skip it and exit
.a350	fa		plx				plx
.a351	68		pla				pla
.a352	60		rts				rts
.a353					_EGSFail:
.a353	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a356	4c 45 41 4e 3a 4d 49 53				.text 	"LEAN:","MISSING ?",$00
>a35e	53 49 4e 47 20 3f 00
.a365					EGLookNext:
.a365	da		phx				phx
.a366	a6 33		ldx $33				ldx 	genPos 						; position of next
.a368	bd 40 06	lda $0640,x			lda 	lineBuffer,x
.a36b	fa		plx				plx
.a36c	60		rts				rts
.a36d					EGSkipNext:
.a36d	e6 33		inc $33				inc 	genPos
.a36f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: bank/banking.asm

.a370					BANKEDStart:
=$0700					CodeWriteByte = BankCode
=1794					CodeRunCode = Bankcode+2
.a370	80 21		bra $a393			bra 	BankedCodeWriteByte
.a372	80 00		bra $a374			bra 	BankedCodeRun
.a374					BankedCodeRun:
.a374	ad 61 9f	lda $9f61			lda 	ramBank 					; save current RAM bank
.a377	48		pha				pha
.a378	a5 2a		lda $2a				lda 	lastDefine+2 				; set page number
.a37a	8d 61 9f	sta $9f61			sta 	ramBank
.a37d	a5 28		lda $28				lda 	lastDefine 					; overwrite the call address
.a37f	8d 1c 07	sta $071c			sta 	_BCRCode-BANKEDStart+BankCode+1
.a382	a5 29		lda $29				lda 	lastDefine+1
.a384	8d 1d 07	sta $071d			sta 	_BCRCode-BANKEDStart+BankCode+2
.a387	a5 24		lda $24				lda 	codePtr						; pass in byte after code.
.a389	a6 25		ldx $25				ldx 	codePtr+1
.a38b					_BCRCode:
.a38b	20 00 00	jsr $0000			jsr 	$0000 						; call the code
.a38e	68		pla				pla 								; restore RAM page.
.a38f	8d 61 9f	sta $9f61			sta 	ramBank
.a392	60		rts				rts
.a393					BankedCodeWriteByte:
.a393	da		phx				phx 								; save XY
.a394	5a		phy				phy
.a395	ae 61 9f	ldx $9f61			ldx 	ramBank  					; save old RAM Bank# in X
.a398	a4 26		ldy $26				ldy 	codeBank 					; get code RAM bank and save code there.
.a39a	8c 61 9f	sty $9f61			sty 	ramBank
.a39d	92 24		sta ($24)			sta 	(codePtr) 					; save byte out
.a39f	e6 24		inc $24				inc 	codePtr 					; bump pointer
.a3a1	d0 02		bne $a3a5			bne 	_CWBNoCarry
.a3a3	e6 25		inc $25				inc 	codePtr+1
.a3a5					_CWBNoCarry:
.a3a5	8e 61 9f	stx $9f61			stx 	ramBank 					; restore page
.a3a8	7a		ply				ply 								; and exit.
.a3a9	fa		plx				plx
.a3aa	60		rts				rts
.a3ab					BANKEDEnd:
.a3ab					BankCopyCode:
.a3ab	48		pha				pha
.a3ac	da		phx				phx
.a3ad	a2 3b		ldx #$3b			ldx 	#BANKEDEnd-BANKEDStart
.a3af					_BCCCopy:
.a3af	bd 70 a3	lda $a370,x			lda 	BANKEDStart,x
.a3b2	9d 00 07	sta $0700,x			sta 	BankCode,x
.a3b5	ca		dex				dex
.a3b6	e0 ff		cpx #$ff			cpx 	#$FF
.a3b8	d0 f5		bne $a3af			bne 	_BCCCopy
.a3ba	fa		plx				plx
.a3bb	68		pla				pla
.a3bc	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/create.asm

.a3bd					DictionaryCreate:
.a3bd	86 1a		stx $1a				stx 	zTemp0 						; save identifier position
.a3bf	84 1b		sty $1b				sty 	zTemp0+1
.a3c1	a0 01		ldy #$01			ldy 	#1 							; write the type byte out.
.a3c3	91 14		sta ($14),y			sta 	(dictPtr),y
.a3c5	a0 00		ldy #$00			ldy 	#0 							; work out length.
.a3c7					_DCGetLength:
.a3c7	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a3c9	c8		iny				iny
.a3ca	0a		asl a				asl 	a
.a3cb	90 fa		bcc $a3c7			bcc 	_DCGetLength
.a3cd	5a		phy				phy 								; save Y on stack.
.a3ce	98		tya				tya 								; save length +6 as offset
.a3cf	18		clc				clc
.a3d0	69 06		adc #$06			adc 	#6
.a3d2	92 14		sta ($14)			sta 	(dictPtr)
.a3d4	a0 02		ldy #$02			ldy 	#2 							; fill 2 to 4 with $FF
.a3d6	a9 ff		lda #$ff	_DCFill:lda 	#$FF
.a3d8	91 14		sta ($14),y			sta 	(dictPtr),y
.a3da	c8		iny				iny
.a3db	c0 05		cpy #$05			cpy 	#5
.a3dd	d0 f7		bne $a3d6			bne 	_DCFill
.a3df	68		pla				pla 								; get length, store in X
.a3e0	aa		tax				tax
.a3e1	91 14		sta ($14),y			sta 	(dictPtr),y 				; write length out.
.a3e3	a0 00		ldy #$00			ldy 	#0
.a3e5					_DCCopy:
.a3e5	b1 1a		lda ($1a),y			lda 	(zTemp0),y 					; next identifier character
.a3e7	c8		iny				iny 								; save +1 on stack
.a3e8	5a		phy				phy
.a3e9	c8		iny				iny 								; advance by 6 total
.a3ea	c8		iny				iny
.a3eb	c8		iny				iny
.a3ec	c8		iny				iny
.a3ed	c8		iny				iny
.a3ee	91 14		sta ($14),y			sta 	(dictPtr),y 				; write out
.a3f0	7a		ply				ply 								; restore +1
.a3f1	ca		dex				dex
.a3f2	d0 f1		bne $a3e5			bne 	_DCCopy 					; do that the required# times.
.a3f4	a5 14		lda $14				lda 	dictPtr 					; copy last created
.a3f6	85 22		sta $22				sta 	lastCreate
.a3f8	a5 15		lda $15				lda 	dictPtr+1
.a3fa	85 23		sta $23				sta 	lastCreate+1
.a3fc	18		clc				clc 								; advance dictionary pointer
.a3fd	b2 14		lda ($14)			lda 	(dictPtr)
.a3ff	65 14		adc $14				adc 	dictPtr
.a401	85 14		sta $14				sta 	dictPtr
.a403	90 02		bcc $a407			bcc 	_DCNoCarry
.a405	e6 15		inc $15				inc 	dictPtr+1
.a407					_DCNoCarry:
.a407	a9 00		lda #$00			lda 	#$00 						; write end of dictionary marker
.a409	92 14		sta ($14)			sta 	(dictPtr)
.a40b	60		rts				rts
.a40c					DictionarySet:
.a40c	48		pha				pha
.a40d	da		phx				phx
.a40e	5a		phy				phy
.a40f	5a		phy				phy 								; copy data out to
.a410	a0 04		ldy #$04			ldy 	#4 							; offset 2,3,4 => A X Y
.a412	91 22		sta ($22),y			sta 	(lastCreate),y
.a414	88		dey				dey
.a415	68		pla				pla
.a416	91 22		sta ($22),y			sta 	(lastCreate),y
.a418	88		dey				dey
.a419	8a		txa				txa
.a41a	91 22		sta ($22),y			sta 	(lastCreate),y
.a41c	7a		ply				ply
.a41d	fa		plx				plx
.a41e	68		pla				pla
.a41f	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: dictionary/search.asm

.a420					DictionaryReset:
.a420	a9 2d		lda #$2d			lda 	#(UserDictionary) & $FF
.a422	85 14		sta $14				sta 	dictPtr
.a424	a9 b9		lda #$b9			lda 	#(UserDictionary) >> 8
.a426	85 15		sta $15				sta 	dictPtr+1
.a428	9c 2d b9	stz $b92d			stz 	UserDictionary
.a42b	60		rts				rts
.a42c					DictionarySearchSystemOnly:
.a42c	38		sec				sec
.a42d	80 01		bra $a430			bra 	DictionarySearchContinue
.a42f					DictionarySearch:
.a42f	18		clc				clc
.a430					DictionarySearchContinue:
.a430	da		phx				phx
.a431	5a		phy				phy
.a432	08		php				php 								; CS if user only
.a433	8a		txa				txa 								; subtract 6 so can use offset Y
.a434	38		sec				sec
.a435	e9 06		sbc #$06			sbc 	#6
.a437	85 1a		sta $1a				sta 	zTemp0
.a439	98		tya				tya
.a43a	e9 00		sbc #$00			sbc 	#0
.a43c	85 1b		sta $1b				sta 	zTemp0+1 					; in zTemp0
.a43e	28		plp				plp
.a43f	b0 09		bcs $a44a			bcs 	_DSCOnly
.a441	a2 2d		ldx #$2d			ldx 	#UserDictionary & $FF
.a443	a0 b9		ldy #$b9			ldy 	#UserDictionary >> 8
.a445	20 54 a4	jsr $a454			jsr 	DSSearch
.a448	b0 07		bcs $a451			bcs 	_DSCExit
.a44a					_DSCOnly:
.a44a	a2 98		ldx #$98			ldx 	#SystemDictionary & $FF
.a44c	a0 ac		ldy #$ac			ldy 	#SystemDictionary >> 8
.a44e	20 54 a4	jsr $a454			jsr 	DSSearch
.a451					_DSCExit:
.a451	7a		ply				ply 								; restore YX
.a452	fa		plx				plx
.a453	60		rts				rts
.a454					DSSearch:
.a454	86 1c		stx $1c				stx 	zTemp1 						; save dictionary in zTemp1
.a456	84 1d		sty $1d				sty 	zTemp1+1
.a458					_DSLoop:
.a458	b2 1c		lda ($1c)			lda 	(zTemp1) 					; offset 0 ?
.a45a	f0 36		beq $a492			beq 	_DSExit
.a45c	a0 05		ldy #$05			ldy 	#5 							; get length in X
.a45e	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a460	aa		tax				tax
.a461					_DSCompare:
.a461	c8		iny				iny 								; match next ?
.a462	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a464	d1 1a		cmp ($1a),y			cmp 	(zTemp0),y
.a466	d0 1d		bne $a485			bne 	_DSNext
.a468	ca		dex				dex 								; done all
.a469	d0 f6		bne $a461			bne 	_DSCompare
.a46b	a0 05		ldy #$05			ldy 	#5 							; copy bank/address
.a46d	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a46f	85 31		sta $31				sta 	dirLength
.a471	88		dey				dey
.a472	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a474	85 30		sta $30				sta 	dirBank
.a476	88		dey				dey
.a477	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a479	85 2f		sta $2f				sta 	dirHighByte
.a47b	88		dey				dey
.a47c	b1 1c		lda ($1c),y			lda 	(zTemp1),y
.a47e	85 2e		sta $2e				sta 	dirLowByte
.a480	88		dey				dey
.a481	b1 1c		lda ($1c),y			lda 	(zTemp1),y 					; return type
.a483	38		sec				sec
.a484	60		rts				rts
.a485					_DSNext:
.a485	18		clc				clc 								; advance to next.
.a486	b2 1c		lda ($1c)			lda 	(zTemp1)
.a488	65 1c		adc $1c				adc 	zTemp1
.a48a	85 1c		sta $1c				sta 	zTemp1
.a48c	90 ca		bcc $a458			bcc 	_DSLoop
.a48e	e6 1d		inc $1d				inc 	zTemp1+1
.a490	80 c6		bra $a458			bra 	_DSLoop
.a492					_DSExit:
.a492	18		clc				clc
.a493	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/code.asm

.a494					CodeReset:
.a494	a2 00		ldx #$00			ldx 	#CodeMemory & 255
.a496	a0 a0		ldy #$a0			ldy 	#CodeMemory >> 8
.a498	a9 01		lda #$01			lda 	#CodePage
.a49a	80 00		bra $a49c			bra 	CodeSetPointer
.a49c					CodeSetPointer:
.a49c	48		pha				pha 								; copy old to backup
.a49d	a5 24		lda $24				lda 	codePtr
.a49f	85 39		sta $39				sta 	codeBackup
.a4a1	a5 25		lda $25				lda 	codePtr+1
.a4a3	85 3a		sta $3a				sta 	codeBackup+1
.a4a5	a5 26		lda $26				lda 	codeBank
.a4a7	85 3b		sta $3b				sta 	codeBackup+2
.a4a9	68		pla				pla
.a4aa	85 26		sta $26				sta 	codeBank 					; update
.a4ac	86 24		stx $24				stx 	codePtr
.a4ae	84 25		sty $25				sty 	codePtr+1
.a4b0	60		rts				rts
.a4b1					CodeRestorePointer:
.a4b1	a5 39		lda $39				lda 	codeBackup
.a4b3	85 24		sta $24				sta 	codePtr
.a4b5	a5 3a		lda $3a				lda 	codeBackup+1
.a4b7	85 25		sta $25				sta 	codePtr+1
.a4b9	a5 3b		lda $3b				lda 	codeBackup+2
.a4bb	85 26		sta $26				sta 	codeBank
.a4bd	60		rts				rts
.a4be					CodeWriteBranch:
.a4be	18		clc				clc 								; borrow 1 as branch is from one on
.a4bf	8a		txa				txa
.a4c0	e5 24		sbc $24				sbc 	codePtr
.a4c2	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; compile anyway.
.a4c5	aa		tax				tax 								; actual result in X.
.a4c6	98		tya				tya
.a4c7	e5 25		sbc $25				sbc 	codePtr+1
.a4c9	f0 14		beq $a4df			beq 	_CWBCheckPositive 			; 00xx
.a4cb	c9 ff		cmp #$ff			cmp 	#$FF
.a4cd	f0 14		beq $a4e3			beq 	_CWBCheckNegative 			; FFxx
.a4cf					_CWBError:
.a4cf	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4d2	4c 45 41 4e 3a 42 52 41				.text 	"LEAN:","BRANCH?",$00
>a4da	4e 43 48 3f 00
.a4df					_CWBCheckPositive:
.a4df	8a		txa				txa
.a4e0	30 ed		bmi $a4cf			bmi 	_CWBError
.a4e2	60		rts				rts
.a4e3					_CWBCheckNegative:
.a4e3	8a		txa				txa
.a4e4	10 e9		bpl $a4cf			bpl 	_CWBError
.a4e6	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: support/error.asm

.a4e7					SyntaxError:
.a4e7	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a4ea	4c 45 41 4e 3a 53 59 4e				.text 	"LEAN:","SYNTAX",$00
>a4f2	54 41 58 00
.a4f6					ErrorHandler:
.a4f6	fa		plx				plx 								; pull address off.
.a4f7	7a		ply				ply
.a4f8	e8		inx				inx 								; point to message
.a4f9	d0 01		bne $a4fc			bne 	_EHNoCarry
.a4fb	c8		iny				iny
.a4fc					_EHNoCarry:
.a4fc	20 42 a5	jsr $a542			jsr 	PrintStringXY 				; print string at XY
.a4ff	a5 2b		lda $2b				lda 	lineNumber
.a501	05 2c		ora $2c				ora 	lineNumber+1
.a503	f0 28		beq $a52d			beq 	_EHNoLine
.a505	a2 3d		ldx #$3d			ldx 	#_EHMessage & $FF 			; print " AT "
.a507	a0 a5		ldy #$a5			ldy 	#_EHMessage >> 8
.a509	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a50c	a6 2b		ldx $2b				ldx 	lineNumber 					; convert line number
.a50e	a4 2c		ldy $2c				ldy 	lineNumber+1
.a510	20 0b a8	jsr $a80b			jsr 	IntToString
.a513	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a515	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a517	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a51a	a9 3a		lda #$3a			lda 	#":"						; print match count
.a51c	20 53 a5	jsr $a553			jsr 	PrintCharacter
.a51f	a6 3d		ldx $3d				ldx 	matchCount
.a521	a0 00		ldy #$00			ldy 	#0
.a523	20 0b a8	jsr $a80b			jsr 	IntToString
.a526	a2 40		ldx #$40			ldx 	#lineBuffer & $FF 			; print number
.a528	a0 06		ldy #$06			ldy 	#lineBuffer >> 8
.a52a	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a52d					_EHNoLine:
.a52d	64 28		stz $28				stz 	lastDefine 					; disable running by zeroing last defined
.a52f	64 29		stz $29				stz 	lastDefine+1
.a531	64 2a		stz $2a				stz 	lastDefine+2
.a533	a2 06		ldx #$06			ldx 	#LeanMessage & $FF 			; print LEAN info
.a535	a0 a0		ldy #$a0			ldy 	#LeanMessage >> 8
.a537	20 42 a5	jsr $a542			jsr 	PrintStringXY
.a53a	4c 55 a0	jmp $a055			jmp 	ReturnCaller 				; exit the compiler.
.a53d					_EHMessage:
>a53d	20 41 54 20 00					.text	" AT ",0
.a542					PrintStringXY:
.a542	86 1a		stx $1a				stx 	zTemp0
.a544	84 1b		sty $1b				sty 	zTemp0+1
.a546	a0 00		ldy #$00			ldy 	#0
.a548	b1 1a		lda ($1a),y	_PSLoop:lda 	(zTemp0),y
.a54a	f0 06		beq $a552			beq 	_PSExit
.a54c	20 53 a5	jsr $a553			jsr 	PrintCharacter
.a54f	c8		iny				iny
.a550	80 f6		bra $a548			bra 	_PSLoop
.a552	60		rts		_PSExit:rts
.a553					PrintCharacter:
.a553	48		pha				pha
.a554	da		phx				phx
.a555	5a		phy				phy
.a556	20 d2 ff	jsr $ffd2			jsr 	$FFD2
.a559	7a		ply				ply
.a55a	fa		plx				plx
.a55b	68		pla				pla
.a55c	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/procedure.asm

.a55d					Action_Procedure_Def:
.a55d	20 0d a3	jsr $a30d			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a560	a9 50		lda #$50			lda 	#"P"
.a562	20 bd a3	jsr $a3bd			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a565	a5 26		lda $26				lda 	codeBank 					; and assign it the current PC value.
.a567	a6 24		ldx $24				ldx 	codePtr
.a569	a4 25		ldy $25				ldy 	codePtr+1
.a56b	86 28		stx $28				stx 	lastDefine 					; update last defined
.a56d	84 29		sty $29				sty 	lastDefine+1
.a56f	85 2a		sta $2a				sta 	lastDefine+2
.a571	20 0c a4	jsr $a40c			jsr 	DictionarySet 				; set the dictionary values.
.a574	a9 28		lda #$28			lda 	#"("
.a576	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a579	a9 29		lda #$29			lda 	#")"
.a57b	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a57e	a9 50		lda #$50			lda 	#SCM_PROC 					; put a procedure marker on the stack.
.a580	20 03 a9	jsr $a903			jsr 	StackPush
.a583	60		rts				rts
.a584					_APError:
.a584	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a587	4c 45 41 4e 3a 50 52 4f				.text 	"LEAN:","PROCDEF",$00
>a58f	43 44 45 46 00
.a594					Action_EndProc:
.a594	a9 50		lda #$50			lda 	#SCM_PROC 					; check corresponding PROC
.a596	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a599	a9 60		lda #$60			lda 	#CPU_RETURN					; write out RTS
.a59b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a59e	a9 01		lda #$01			lda 	#1 							; remove from stack.
.a5a0	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a5a3	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/call.asm

.a5a4					Action_Call:
.a5a4	a5 33		lda $33				lda 	genPos 						; get position
.a5a6	3a		dec a				dec 	a 							; point to the <proc>
.a5a7	48		pha				pha 								; save it
.a5a8	a9 28		lda #$28			lda 	#'('						; check (
.a5aa	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a5ad	20 65 a3	jsr $a365			jsr 	EGLookNext 					; ) next ?
.a5b0	c9 a9		cmp #$a9			cmp 	#')'+$80
.a5b2	f0 1a		beq $a5ce			beq 	_ACNoParameters
.a5b4	a9 52		lda #$52			lda 	#"R" 	 					; do R=<something>
.a5b6	20 e7 a5	jsr $a5e7			jsr 	ACDoParameter 				; do the parameter.
.a5b9	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip the parameter
.a5bc	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what follows
.a5bf	c9 ac		cmp #$ac			cmp 	#","+$80 					; if not comma
.a5c1	d0 0b		bne $a5ce			bne 	_ACNoParameters 			; should be end of parameters
.a5c3	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip ,
.a5c6	a9 59		lda #$59			lda 	#"Y"						; do Y=<something>
.a5c8	20 e7 a5	jsr $a5e7			jsr 	ACDoParameter 				; do the parameter.
.a5cb	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip parameter.
.a5ce					_ACNoParameters:
.a5ce	a9 29		lda #$29			lda 	#')' 						; check closing bracket.
.a5d0	20 43 a3	jsr $a343			jsr 	EGetSyntaxCheck
.a5d3	68		pla				pla 								; restore procedure posiion.
.a5d4	20 d7 a2	jsr $a2d7			jsr 	GenCopyData					; get the data
.a5d7	a9 20		lda #$20			lda 	#CPU_JSR					; output a call to it.
.a5d9	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5dc	a5 36		lda $36				lda 	elementData
.a5de	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5e1	a5 37		lda $37				lda 	elementData+1
.a5e3	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a5e6	60		rts				rts
.a5e7					ACDoParameter:
.a5e7	a6 33		ldx $33				ldx 	genPos 						; save position
.a5e9	da		phx				phx
.a5ea	48		pha				pha 								; save the target register
.a5eb	bd 40 06	lda $0640,x			lda 	lineBuffer,x 				; what is there ?
.a5ee	c9 e1		cmp #$e1			cmp 	#"a"+$80 					; check a-z
.a5f0	90 1a		bcc $a60c			bcc 	_ADPError
.a5f2	c9 fb		cmp #$fb			cmp 	#"z"+$81
.a5f4	b0 16		bcs $a60c			bcs 	_ADPError
.a5f6	ca		dex				dex 								; write = before it
.a5f7	a9 bd		lda #$bd			lda 	#"="+$80
.a5f9	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a5fc	ca		dex				dex
.a5fd	68		pla				pla 								; write Y/R before that
.a5fe	09 80		ora #$80			ora 	#$80
.a600	9d 40 06	sta $0640,x			sta 	lineBuffer,x
.a603	86 33		stx $33				stx 	genPos 						; make genPos point to that.
.a605	20 1b a2	jsr $a21b			jsr 	GenerateOne 				; generate that.
.a608	68		pla				pla 								; restore position
.a609	85 33		sta $33				sta 	genPos
.a60b	60		rts				rts
.a60c					_ADPError:
.a60c	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a60f	4c 45 41 4e 3a 50 41 52				.text 	"LEAN:","PARAMETER?",$00
>a617	41 4d 45 54 45 52 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/if.asm

.a61f					Action_If:
.a61f	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a621	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a623	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; output it
.a626	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 				; push branch position on stack
.a629	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a62b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a62e	a9 49		lda #$49			lda 	#SCM_IF 					; put if marker on the stack.
.a630	20 03 a9	jsr $a903			jsr 	StackPush
.a633	60		rts				rts
.a634					Action_Else:
.a634	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a636	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a639	a9 80		lda #$80			lda 	#CPU_BRA 					; compile branch
.a63b	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a63e	a5 24		lda $24				lda 	codePtr 					; push current position on the stack
.a640	48		pha				pha
.a641	a5 25		lda $25				lda 	codePtr+1
.a643	48		pha				pha
.a644	a9 ff		lda #$ff			lda 	#$FF 						; dummy branch
.a646	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a649	20 64 a6	jsr $a664			jsr 	BackPatchIf 				; do the backpatch.
.a64c	68		pla				pla 								; overwrite backpatch address
.a64d	a0 01		ldy #$01			ldy 	#1 							; with stacked position.
.a64f	91 12		sta ($12),y			sta 	(aStackPtr),y
.a651	68		pla				pla
.a652	c8		iny				iny
.a653	91 12		sta ($12),y			sta 	(aStackPtr),y
.a655	60		rts				rts
.a656					Action_Endif:
.a656	a9 49		lda #$49			lda 	#SCM_IF 					; check in IF
.a658	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a65b	20 64 a6	jsr $a664			jsr 	BackPatchIf 				; do the backpatch.
.a65e	a9 04		lda #$04			lda 	#3+1 						; throw the stack.
.a660	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a663	60		rts				rts
.a664					BackPatchIf:
.a664	a5 24		lda $24					lda 	codePtr 					; save code pointer
.a666	48		pha				pha
.a667	a5 25		lda $25				lda 	codePtr+1
.a669	48		pha				pha
.a66a	a0 03		ldy #$03			ldy 	#3 							; AYX = address.
.a66c	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a66e	48		pha				pha
.a66f	88		dey				dey
.a670	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a672	aa		tax				tax
.a673	88		dey				dey
.a674	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a676	a8		tay				tay
.a677	68		pla				pla
.a678	20 9c a4	jsr $a49c			jsr 	CodeSetPointer 				; set write position to that
.a67b	7a		ply				ply 								; target address in YX
.a67c	fa		plx				plx
.a67d	20 be a4	jsr $a4be			jsr 	CodeWriteBranch 			; write the actual branch there
.a680	20 b1 a4	jsr $a4b1			jsr 	CodeRestorePointer 			; undo the set pointer.
.a683	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/repeat.asm

.a684					Action_Repeat:
.a684	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a687	a9 52		lda #$52			lda 	#SCM_REPEAT 					; put a repeat marker on the stack.
.a689	20 03 a9	jsr $a903			jsr 	StackPush
.a68c	60		rts				rts
.a68d					Action_Until:
.a68d	a9 52		lda #$52			lda 	#SCM_REPEAT 				; check corresponding repeat
.a68f	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a692	a5 34		lda $34				lda 	generateVar 				; branch to use.
.a694	49 20		eor #$20			eor 	#$20 						; this makes it negative, e.g. branch if false
.a696	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a698	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch.
.a69b	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a69d	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a6a0	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/for.asm

.a6a1					Action_AFor:
.a6a1	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a6a4	a9 3a		lda #$3a			lda 	#CPU_DECA 						; counts backwards from n-1 to 0.
.a6a6	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6a9	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6ab	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6ae	a9 46		lda #$46			lda 	#SCM_FOR 						; put a for marker on the stack.
.a6b0	20 03 a9	jsr $a903			jsr 	StackPush
.a6b3	60		rts				rts
.a6b4					Action_RFor:
.a6b4	20 f3 a8	jsr $a8f3			jsr 	StackPushPC 					; push loop position on stack
.a6b7	a9 c9		lda #$c9			lda 	#CPU_CMPIM 						; dec XA code cmp #0
.a6b9	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6bc	a9 00		lda #$00			lda 	#0
.a6be	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c1	a9 d0		lda #$d0			lda 	#CPU_BNE 						; bne +1
.a6c3	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6c6	a9 01		lda #$01			lda 	#1
.a6c8	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6cb	a9 ca		lda #$ca			lda 	#CPU_DEX 						; dex
.a6cd	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d0	a9 3a		lda #$3a			lda 	#CPU_DECA 						; dec a
.a6d2	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6d5	a9 48		lda #$48			lda 	#CPU_PHA 						; push index on stack
.a6d7	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6da	a9 da		lda #$da			lda 	#CPU_PHX
.a6dc	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6df	a9 47		lda #$47			lda 	#SCM_INTFOR 					; put a for marker on the stack.
.a6e1	20 03 a9	jsr $a903			jsr 	StackPush
.a6e4	60		rts				rts
.a6e5					Action_Next:
.a6e5	b2 12		lda ($12)			lda 	(aStackPtr) 				; check for R-Next
.a6e7	c9 47		cmp #$47			cmp 	#SCM_INTFOR
.a6e9	f0 17		beq $a702			beq 	_AN16Bit
.a6eb	a9 46		lda #$46			lda 	#SCM_FOR 					; check corresponding for
.a6ed	20 1f a9	jsr $a91f			jsr 	StackCheckStructureMarker
.a6f0	a9 68		lda #$68			lda 	#CPU_PLA 					; pop index off stack.
.a6f2	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a6f5	a9 d0		lda #$d0			lda 	#CPU_BNE 					; branch back if #0
.a6f7	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a6f9	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch.
.a6fc	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a6fe	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a701	60		rts				rts
.a702					_AN16Bit:
.a702	a9 fa		lda #$fa			lda 	#CPU_PLX 					; pop index on stack
.a704	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a707	a9 68		lda #$68			lda 	#CPU_PLA
.a709	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a70c	a9 d0		lda #$d0			lda 	#CPU_BNE
.a70e	a0 01		ldy #$01			ldy 	#1 							; stack at 1 (High) 2 (Low)
.a710	20 37 a9	jsr $a937			jsr 	StackCompileBranch 			; compile a branch (check LSB)
.a713	a9 e0		lda #$e0			lda 	#CPU_CPXIM  				; check MSB of index
.a715	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a718	a9 00		lda #$00			lda 	#0
.a71a	20 00 07	jsr $0700			jsr 	CodeWriteByte
.a71d	a9 d0		lda #$d0			lda 	#CPU_BNE
.a71f	a0 01		ldy #$01			ldy 	#1
.a721	20 37 a9	jsr $a937			jsr 	StackCompileBranch
.a724	a9 04		lda #$04			lda 	#1+3 						; remove from stack.
.a726	20 4c a9	jsr $a94c			jsr 	StackPopStack
.a729	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: actions/variables.asm

.a72a					VariableReset:
.a72a	a9 00		lda #$00			lda 	#(VariableMemory) & $FF
.a72c	85 18		sta $18				sta 	varPtr
.a72e	a9 07		lda #$07			lda 	#(VariableMemory) >> 8
.a730	85 19		sta $19				sta 	varPtr+1
.a732	60		rts				rts
.a733					Action_ByteVar:
.a733	a9 01		lda #$01			lda 	#1
.a735	80 02		bra $a739			bra 	VariableDeclare
.a737					Action_WordVar:
.a737	a9 02		lda #$02			lda 	#2
.a739					VariableDeclare:
.a739	85 3c		sta $3c				sta 	varSize 					; save variable size.
.a73b					_VDLoop:
.a73b	a9 53		lda #$53			lda 	#"S"						; get I or S
.a73d	a6 3c		ldx $3c				ldx 	varSize
.a73f	ca		dex				dex
.a740	f0 02		beq $a744			beq 	_VDNotWord
.a742	a9 49		lda #$49			lda 	#"I"
.a744					_VDNotWord:
.a744	48		pha				pha
.a745	20 0d a3	jsr $a30d			jsr 	EGetUnknownIdentifier 		; get an unknown identifier.
.a748	68		pla				pla
.a749	20 bd a3	jsr $a3bd			jsr 	DictionaryCreate 			; create procedure dictionary entries
.a74c	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what's next ?
.a74f	c9 c0		cmp #$c0			cmp 	#'@'|$80 					; if not @, use default
.a751	d0 21		bne $a774			bne 	_VDDefault
.a753	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; skip @
.a756	20 65 a3	jsr $a365			jsr 	EGLookNext 					; get next
.a759	c9 e2		cmp #$e2			cmp 	#'b'|$80 					; must be b/w constant
.a75b	f0 04		beq $a761			beq 	_VDLegit
.a75d	c9 f7		cmp #$f7			cmp 	#'w'|$80
.a75f	d0 34		bne $a795			bne 	_VDError
.a761					_VDLegit:
.a761	a5 33		lda $33				lda 	genPos 						; position
.a763	20 d7 a2	jsr $a2d7			jsr 	GenCopyData					; access data
.a766	a9 00		lda #$00			lda 	#0 		 					; set the address
.a768	a6 36		ldx $36				ldx 	elementData
.a76a	a4 37		ldy $37				ldy 	elementData+1
.a76c	20 0c a4	jsr $a40c			jsr 	DictionarySet
.a76f	20 6d a3	jsr $a36d			jsr 	EGSkipNext 					; consume the constant
.a772	80 14		bra $a788			bra 	_VDTryNext
.a774					_VDDefault:
.a774	a6 18		ldx $18				ldx 	varPtr 						; place at default position
.a776	a4 19		ldy $19				ldy 	varPtr+1
.a778	a9 00		lda #$00			lda 	#0
.a77a	20 0c a4	jsr $a40c			jsr 	DictionarySet
.a77d	a5 3c		lda $3c				lda 	varSize 					; get count of bytes back
.a77f	18		clc				clc
.a780	65 18		adc $18				adc 	varPtr
.a782	85 18		sta $18				sta 	varPtr
.a784	90 02		bcc $a788			bcc 	_VDNoCarry
.a786	e6 19		inc $19				inc 	varPtr+1
.a788					_VDNoCarry:
.a788					_VDTryNext:
.a788	20 65 a3	jsr $a365			jsr 	EGLookNext 					; what's next ?
.a78b	c9 ac		cmp #$ac			cmp 	#","|$80 					; is it a comma
.a78d	d0 05		bne $a794			bne 	_VDExit 					; no, exit.
.a78f	20 6d a3	jsr $a36d			jsr 	EGSkipNext
.a792	80 a7		bra $a73b			bra 	_VDLoop
.a794					_VDExit:
.a794	60		rts				rts
.a795					_VDError:
.a795	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a798	4c 45 41 4e 3a 41 44 44				.text 	"LEAN:","ADDRESS?",$00
>a7a0	52 45 53 53 3f 00

;******  Return to file: main.asm


;******  Processing file: actions/crunch.asm

.a7a6					Action_DictionaryCrunch:
.a7a6	a9 2d		lda #$2d			lda 	#(UserDictionary) & $FF
.a7a8	85 1a		sta $1a				sta 	zTemp0
.a7aa	a9 b9		lda #$b9			lda 	#(UserDictionary) >> 8
.a7ac	85 1b		sta $1b				sta 	zTemp0+1
.a7ae					_ADCLoop:
.a7ae	b2 1a		lda ($1a)			lda 	(zTemp0) 					; reached end of dictionary
.a7b0	f0 58		beq $a80a			beq 	_ADCExit
.a7b2	a0 06		ldy #$06			ldy 	#6							; read first character
.a7b4	b1 1a		lda ($1a),y			lda 	(zTemp0),y
.a7b6	29 7f		and #$7f			and 	#$7F 						; is it a '.' ?
.a7b8	c9 2e		cmp #$2e			cmp 	#'.'
.a7ba	d0 41		bne $a7fd			bne 	_ADCNext 					; if not, it's a global, skip to next.
.a7bc	a5 1a		lda $1a				lda 	zTemp0 						; work out copy from, into zTemp1
.a7be	48		pha				pha
.a7bf	18		clc				clc
.a7c0	72 1a		adc ($1a)			adc 	(zTemp0)
.a7c2	85 1c		sta $1c				sta 	zTemp1
.a7c4	a5 1b		lda $1b				lda 	zTemp0+1
.a7c6	48		pha				pha
.a7c7	69 00		adc #$00			adc 	#0
.a7c9	85 1d		sta $1d				sta 	zTemp1+1
.a7cb					_ADCopyOverwrite:
.a7cb	b2 1c		lda ($1c)			lda 	(zTemp1) 					; byte copy
.a7cd	92 1a		sta ($1a)			sta 	(zTemp0)
.a7cf	a5 1c		lda $1c				lda 	zTemp1 						; until the upper address = dictionary top
.a7d1	c5 14		cmp $14				cmp 	dictPtr
.a7d3	d0 06		bne $a7db			bne 	_ADCNextCopy
.a7d5	a5 1d		lda $1d				lda 	zTemp1+1
.a7d7	c5 15		cmp $15				cmp 	dictPtr+1
.a7d9	f0 0e		beq $a7e9			beq 	_ADCRemoved
.a7db					_ADCNextCopy:
.a7db	e6 1a		inc $1a				inc 	zTemp0
.a7dd	d0 02		bne $a7e1			bne 	_NoCarry
.a7df	e6 1b		inc $1b				inc 	zTemp0+1
.a7e1					_NoCarry:
.a7e1	e6 1c		inc $1c				inc 	zTemp1
.a7e3	d0 02		bne $a7e7			bne 	_NoCarry
.a7e5	e6 1d		inc $1d				inc 	zTemp1+1
.a7e7					_NoCarry:
.a7e7	80 e2		bra $a7cb			bra 	_ADCopyOverwrite
.a7e9					_ADCRemoved:
.a7e9	a5 1a		lda $1a				lda 	zTemp0 						; copy from position is new top.
.a7eb	85 14		sta $14				sta 	dictPtr
.a7ed	a5 1b		lda $1b				lda 	zTemp0+1
.a7ef	85 15		sta $15				sta 	dictPtr+1
.a7f1	a9 00		lda #$00			lda 	#0							; mark end as not copied in loop
.a7f3	92 14		sta ($14)			sta 	(dictPtr)
.a7f5	68		pla				pla 								; restore original position.
.a7f6	85 1b		sta $1b				sta 	zTemp0+1
.a7f8	68		pla				pla
.a7f9	85 1a		sta $1a				sta 	zTemp0
.a7fb	80 b1		bra $a7ae			bra 	_ADCLoop 					; and continue from same position.
.a7fd					_ADCNext:
.a7fd	18		clc				clc 								; advance to next.
.a7fe	a5 1a		lda $1a				lda 	zTemp0
.a800	72 1a		adc ($1a)			adc 	(zTemp0)
.a802	85 1a		sta $1a				sta 	zTemp0
.a804	90 a8		bcc $a7ae			bcc 	_ADCLoop
.a806	e6 1b		inc $1b				inc 	zTemp0+1
.a808	80 a4		bra $a7ae			bra 	_ADCLoop
.a80a					_ADCExit:
.a80a	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/tostring.asm

.a80b					IntToString:
.a80b	86 1a		stx $1a				stx 	zTemp0 						; count is in zTemp0
.a80d	84 1b		sty $1b				sty 	zTemp0+1
.a80f	a0 00		ldy #$00			ldy 	#0 							; index into token buffer (out)
.a811	a2 00		ldx #$00			ldx 	#0 							; index into the word table
.a813					_ITSLoop:
.a813	64 1c		stz $1c				stz 	zTemp1 						; this is the count of subtracts.
.a815					_ITSSubtractLoop:
.a815	38		sec				sec
.a816	a5 1a		lda $1a				lda 	zTemp0 						; try to calculate
.a818	fd 4e a8	sbc $a84e,x			sbc 	_ITSWords,x
.a81b	48		pha				pha
.a81c	a5 1b		lda $1b				lda 	zTemp0+1
.a81e	fd 4f a8	sbc $a84f,x			sbc 	_ITSWords+1,x
.a821	90 09		bcc $a82c			bcc 	_ITSEndSub 					; can't subtract any more.
.a823	85 1b		sta $1b				sta 	zTemp0+1 					; update zTemp
.a825	68		pla				pla
.a826	85 1a		sta $1a				sta 	zTemp0
.a828	e6 1c		inc $1c				inc 	zTemp1 						; bump subtract count.
.a82a	80 e9		bra $a815			bra 	_ITSSubtractLoop
.a82c					_ITSEndSub:
.a82c	68		pla				pla 								; throw away the interim result
.a82d	a5 1c		lda $1c				lda 	zTemp1 						; if the subtract count is non zero
.a82f	d0 04		bne $a835			bne 	_ITSWriteOut 				; always write it out
.a831	c0 00		cpy #$00			cpy 	#0 							; don't write if this is the first
.a833	f0 06		beq $a83b			beq 	_ITSNext 					; suppressing leading zeros.
.a835					_ITSWriteOut:
.a835	09 30		ora #$30			ora 	#48 						; output digit.
.a837	99 40 06	sta $0640,y			sta 	lineBuffer,y
.a83a	c8		iny				iny
.a83b					_ITSNext:
.a83b	e8		inx				inx
.a83c	e8		inx				inx
.a83d	e0 08		cpx #$08			cpx 	#_ITSWordsEnd-_ITSWords 	; done all subtractors
.a83f	d0 d2		bne $a813			bne 	_ITSLoop 					; do the new digits
.a841	a5 1a		lda $1a				lda 	zTemp0 						; output the last digit
.a843	09 30		ora #$30			ora 	#48
.a845	99 40 06	sta $0640,y			sta 	lineBuffer,y 				; make it ASCIIZ.
.a848	a9 00		lda #$00			lda 	#0
.a84a	99 41 06	sta $0641,y			sta 	lineBuffer+1,y
.a84d	60		rts				rts
.a84e					_ITSWords:
>a84e	10 27 e8 03 64 00 0a 00				.word 	10000,1000,100,10
.a856					_ITSWordsEnd:

;******  Return to file: main.asm


;******  Processing file: utility/tointeger.asm

.a856					StringToInt:
.a856	86 20		stx $20				stx 	zTemp3 						; save string
.a858	84 21		sty $21				sty 	zTemp3+1
.a85a	a2 10		ldx #$10			ldx 	#16 						; base to use.
.a85c	a0 01		ldy #$01			ldy 	#1 							; character offset.
.a85e	b2 20		lda ($20)			lda 	(zTemp3) 					; first character
.a860	c9 24		cmp #$24			cmp 	#"$"						; is it hexadecimal
.a862	f0 1b		beq $a87f			beq 	_STIConvert 				; convert from character 1, base 16.
.a864	88		dey				dey 								; from character 0
.a865	a2 0a		ldx #$0a			ldx 	#10 						; base 10.
.a867	c9 2d		cmp #$2d			cmp 	#"-"						; first char is unary minus ?
.a869	d0 14		bne $a87f			bne 	_STIConvert 				; no, convert as +ve decimal
.a86b	c8		iny				iny 								; skip the minus
.a86c	20 7f a8	jsr $a87f			jsr 	_STIConvert 				; convert the unsigned part.
.a86f	90 0d		bcc $a87e			bcc 	_STIExit 					; failed
.a871	8a		txa				txa 								; 1's complement YX
.a872	49 ff		eor #$ff			eor 	#$FF
.a874	aa		tax				tax
.a875	98		tya				tya
.a876	49 ff		eor #$ff			eor 	#$FF
.a878	a8		tay				tay
.a879	e8		inx				inx 								; +1 to make it negative
.a87a	38		sec				sec
.a87b	d0 01		bne $a87e			bne 	_STIExit
.a87d	c8		iny				iny
.a87e					_STIExit:
.a87e	60		rts				rts
.a87f					_STIConvert:
.a87f	86 1c		stx $1c				stx 	zTemp1 						; save base in zTemp1
.a881	b1 20		lda ($20),y			lda 	(zTemp3),y 					; get first character
.a883	f0 5f		beq $a8e4			beq 	_STIFail 					; if zero, then it has failed anyway.
.a885	64 1a		stz $1a				stz 	zTemp0 						; clear the result.
.a887	64 1b		stz $1b				stz 	zTemp0+1
.a889					_STILoop:
.a889	a5 1a		lda $1a				lda 	zTemp0 						; copy current to zTemp2
.a88b	85 1e		sta $1e				sta 	zTemp2
.a88d	a5 1b		lda $1b				lda 	zTemp0+1
.a88f	85 1f		sta $1f				sta 	zTemp2+1
.a891	64 1a		stz $1a				stz 	zTemp0 						; clear result
.a893	64 1b		stz $1b				stz 	zTemp0+1
.a895	a6 1c		ldx $1c				ldx 	zTemp1 						; X contains the base.
.a897					_STIMultiply:
.a897	8a		txa				txa 								; shift Y right into carry.
.a898	4a		lsr a				lsr 	a
.a899	aa		tax				tax
.a89a	90 0d		bcc $a8a9			bcc 	_STINoAdd 					; skip if CC, e.g. LSB was zero
.a89c	18		clc				clc
.a89d	a5 1e		lda $1e				lda 	zTemp2 						; add zTemp2 into zTemp0
.a89f	65 1a		adc $1a				adc 	zTemp0
.a8a1	85 1a		sta $1a				sta 	zTemp0
.a8a3	a5 1f		lda $1f				lda 	zTemp2+1
.a8a5	65 1b		adc $1b				adc 	zTemp0+1
.a8a7	85 1b		sta $1b				sta 	zTemp0+1
.a8a9					_STINoAdd:
.a8a9	06 1e		asl $1e				asl 	zTemp2 						; shift zTemp2 left e.g. x 2
.a8ab	26 1f		rol $1f				rol 	zTemp2+1
.a8ad	e0 00		cpx #$00			cpx 	#0 							; multiply finished ?
.a8af	d0 e6		bne $a897			bne 	_STIMultiply
.a8b1	b1 20		lda ($20),y			lda 	(zTemp3),y 					; check in range 0-9 A-F
.a8b3	29 7f		and #$7f			and 	#$7F 						; remove End of Token bit if set
.a8b5	c9 30		cmp #$30			cmp 	#"0"
.a8b7	90 2b		bcc $a8e4			bcc 	_STIFail
.a8b9	c9 3a		cmp #$3a			cmp 	#"9"+1
.a8bb	90 0b		bcc $a8c8			bcc 	_STIOkay
.a8bd	c9 41		cmp #$41			cmp 	#"A"
.a8bf	90 23		bcc $a8e4			bcc 	_STIFail
.a8c1	c9 47		cmp #$47			cmp 	#"F"+1
.a8c3	b0 1f		bcs $a8e4			bcs 	_STIFail
.a8c5	38		sec				sec 								; hex adjust
.a8c6	e9 07		sbc #$07			sbc 	#7
.a8c8					_STIOkay:
.a8c8	38		sec				sec
.a8c9	e9 30		sbc #$30			sbc 	#48
.a8cb	c5 1c		cmp $1c				cmp 	zTemp1  					; if >= base then fail.
.a8cd	b0 15		bcs $a8e4			bcs 	_STIFail
.a8cf	d8		cld				cld
.a8d0	65 1a		adc $1a				adc 	zTemp0 						; add into the current value
.a8d2	85 1a		sta $1a				sta 	zTemp0
.a8d4	90 02		bcc $a8d8			bcc 	_STINoCarry
.a8d6	e6 1b		inc $1b				inc 	zTemp0+1
.a8d8					_STINoCarry:
.a8d8	b1 20		lda ($20),y			lda 	(zTemp3),y					; get character just done.
.a8da	c8		iny				iny 								; point to next
.a8db	0a		asl a				asl 	a 							; shift bit 7 into carry
.a8dc	90 ab		bcc $a889			bcc 	_STILoop 					; not reached the end.
.a8de	a6 1a		ldx $1a				ldx 	zTemp0 						; return result
.a8e0	a4 1b		ldy $1b				ldy 	zTemp0+1
.a8e2	38		sec				sec
.a8e3	60		rts				rts
.a8e4					_STIFail:
.a8e4	18		clc				clc
.a8e5	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: utility/astack.asm

.a8e6					StackReset:
.a8e6	a9 3f		lda #$3f			lda 	#(assemblerStack) & $FF
.a8e8	85 12		sta $12				sta 	aStackPtr
.a8ea	a9 06		lda #$06			lda 	#(assemblerStack) >> 8
.a8ec	85 13		sta $13				sta 	aStackPtr+1
.a8ee	a9 2a		lda #$2a			lda 	#SCM_TOP
.a8f0	92 12		sta ($12)			sta 	(aStackPtr)
.a8f2	60		rts				rts
.a8f3					StackPushPC:
.a8f3	a5 26		lda $26				lda 	codeBank
.a8f5	20 03 a9	jsr $a903			jsr 	StackPush
.a8f8	a5 24		lda $24				lda 	codePtr
.a8fa	20 03 a9	jsr $a903			jsr 	StackPush
.a8fd	a5 25		lda $25				lda 	codePtr+1
.a8ff	20 03 a9	jsr $a903			jsr 	StackPush
.a902	60		rts				rts
.a903					StackPush:
.a903	c6 12		dec $12				dec 	aStackPtr 					; decrement TOS pointer.
.a905	f0 03		beq $a90a			beq 	_SPStack
.a907	92 12		sta ($12)			sta 	(aStackPtr)					; write to new TOS
.a909	60		rts				rts
.a90a					_SPStack:
.a90a	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a90d	4c 45 41 4e 3a 52 45 54				.text 	"LEAN:","RETURN STACK",$00
>a915	55 52 4e 20 53 54 41 43 4b 00
.a91f					StackCheckStructureMarker:
.a91f	d2 12		cmp ($12)			cmp 	(aStackPtr)					; check if tos matches
.a921	d0 01		bne $a924			bne 	_SCSError
.a923	60		rts				rts
.a924					_SCSError:
.a924	20 f6 a4	jsr $a4f6			jsr 	ErrorHandler
>a927	4c 45 41 4e 3a 53 54 52				.text 	"LEAN:","STRUCTURES",$00
>a92f	55 43 54 55 52 45 53 00
.a937					StackCompileBranch:
.a937	48		pha				pha
.a938	da		phx				phx
.a939	5a		phy				phy
.a93a	20 00 07	jsr $0700			jsr 	CodeWriteByte 				; write the opcode.
.a93d	c8		iny				iny
.a93e	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a940	aa		tax				tax
.a941	88		dey				dey
.a942	b1 12		lda ($12),y			lda 	(aStackPtr),y
.a944	a8		tay				tay
.a945	20 be a4	jsr $a4be			jsr 	CodeWriteBranch 			; write a branch there.
.a948	7a		ply				ply
.a949	fa		plx				plx
.a94a	68		pla				pla
.a94b	60		rts				rts
.a94c					StackPopStack:
.a94c	18		clc				clc 								; return stack all in same page
.a94d	65 12		adc $12				adc 	aStackPtr 					; so we don't carry out.
.a94f	85 12		sta $12				sta 	aStackPtr
.a951	60		rts				rts

;******  Return to file: main.asm


;******  Processing file: generated/system.inc

.a952					L10000:
>a952	04					.byte L10000_END-L10000-1
.a953	a9 63		lda #$63		lda  #$63
.a955	a2 73		ldx #$73		ldx  #$73
.a957					L10000_END:
.a957					L10001:
>a957	09					.byte L10001_END-L10001-1
.a958	91 63		sta ($63),y		sta  ($63),y
.a95a	c8		iny			iny
.a95b	8a		txa			txa
.a95c	91 63		sta ($63),y		sta  ($63),y
.a95e	88		dey			dey
.a95f	b1 63		lda ($63),y		lda  ($63),y
.a961					L10001_END:
.a961					L10002:
>a961	02					.byte L10002_END-L10002-1
.a962	91 63		sta ($63),y		sta  ($63),y
.a964					L10002_END:
.a964					L10003:
>a964	02					.byte L10003_END-L10003-1
.a965	84 63		sty $63			sty  $63
.a967					L10003_END:
.a967					L10004:
>a967	02					.byte L10004_END-L10004-1
.a968	85 63		sta $63			sta  $63
.a96a					L10004_END:
.a96a					L10005:
>a96a	02					.byte L10005_END-L10005-1
.a96b	85 63		sta $63			sta  $63
.a96d					L10005_END:
.a96d					L10006:
>a96d	04					.byte L10006_END-L10006-1
.a96e	a5 63		lda $63			lda  $63
.a970	a2 00		ldx #$00		ldx  #0
.a972					L10006_END:
.a972					L10007:
>a972	02					.byte L10007_END-L10007-1
>a973	a3 00					.byte $a3,$00
.a975					L10007_END:
.a975					L10008:
>a975	06					.byte L10008_END-L10008-1
.a976	8d 63 73	sta $7363		sta  $7363
.a979	8e 83 73	stx $7383		stx  $7383
.a97c					L10008_END:
.a97c					L10009:
>a97c	06					.byte L10009_END-L10009-1
.a97d	ad 63 73	lda $7363		lda  $7363
.a980	ae 83 73	ldx $7383		ldx  $7383
.a983					L10009_END:
.a983					L10010:
>a983	04					.byte L10010_END-L10010-1
.a984	85 63		sta $63			sta  $63
.a986	86 83		stx $83			stx  $83
.a988					L10010_END:
.a988					L10011:
>a988	04					.byte L10011_END-L10011-1
.a989	a5 63		lda $63			lda  $63
.a98b	a6 83		ldx $83			ldx  $83
.a98d					L10011_END:
.a98d					L10012:
>a98d	03					.byte L10012_END-L10012-1
.a98e	8c 63 73	sty $7363		sty  $7363
.a991					L10012_END:
.a991					L10013:
>a991	03					.byte L10013_END-L10013-1
.a992	8d 63 73	sta $7363		sta  $7363
.a995					L10013_END:
.a995					L10014:
>a995	03					.byte L10014_END-L10014-1
.a996	8d 63 73	sta $7363		sta  $7363
.a999					L10014_END:
.a999					L10015:
>a999	05					.byte L10015_END-L10015-1
.a99a	ad 63 73	lda $7363		lda  $7363
.a99d	a2 00		ldx #$00		ldx  #0
.a99f					L10015_END:
.a99f					L10016:
>a99f	04					.byte L10016_END-L10016-1
.a9a0	a9 63		lda #$63		lda  #$63
.a9a2	a2 73		ldx #$73		ldx  #$73
.a9a4					L10016_END:
.a9a4					L10017:
>a9a4	07					.byte L10017_END-L10017-1
.a9a5	8a		txa			txa
.a9a6	49 ff		eor #$ff		eor  #$ff
.a9a8	aa		tax			tax
.a9a9	68		pla			pla
.a9aa	49 ff		eor #$ff		eor  #$ff
.a9ac					L10017_END:
.a9ac					L10018:
>a9ac	02					.byte L10018_END-L10018-1
.a9ad	49 ff		eor #$ff		eor  #$ff
.a9af					L10018_END:
.a9af					L10019:
>a9af	02					.byte L10019_END-L10019-1
.a9b0	a4 63		ldy $63			ldy  $63
.a9b2					L10019_END:
.a9b2					L10020:
>a9b2	03					.byte L10020_END-L10020-1
.a9b3	ac 63 73	ldy $7363		ldy  $7363
.a9b6					L10020_END:
.a9b6					L10021:
>a9b6	02					.byte L10021_END-L10021-1
.a9b7	a0 63		ldy #$63		ldy  #$63
.a9b9					L10021_END:
.a9b9					L10022:
>a9b9	01					.byte L10022_END-L10022-1
.a9ba	a8		tay			tay
.a9bb					L10022_END:
.a9bb					L10023:
>a9bb	01					.byte L10023_END-L10023-1
.a9bc	a8		tay			tay
.a9bd					L10023_END:
.a9bd					L10024:
>a9bd	01					.byte L10024_END-L10024-1
.a9be	5a		phy			phy
.a9bf					L10024_END:
.a9bf					L10025:
>a9bf	02					.byte L10025_END-L10025-1
>a9c0	a3 01					.byte $a3,$01
.a9c2					L10025_END:
.a9c2					L10026:
>a9c2	02					.byte L10026_END-L10026-1
>a9c3	a3 02					.byte $a3,$02
.a9c5					L10026_END:
.a9c5					L10027:
>a9c5	01					.byte L10027_END-L10027-1
.a9c6	7a		ply			ply
.a9c7					L10027_END:
.a9c7					L10028:
>a9c7	03					.byte L10028_END-L10028-1
.a9c8	7a		ply			ply
.a9c9	fa		plx			plx
.a9ca	68		pla			pla
.a9cb					L10028_END:
.a9cb					L10029:
>a9cb	02					.byte L10029_END-L10029-1
.a9cc	fa		plx			plx
.a9cd	68		pla			pla
.a9ce					L10029_END:
.a9ce					L10030:
>a9ce	01					.byte L10030_END-L10030-1
.a9cf	68		pla			pla
.a9d0					L10030_END:
.a9d0					L10031:
>a9d0	08					.byte L10031_END-L10031-1
.a9d1	49 63		eor #$63		eor  #$63
.a9d3	48		pha			pha
.a9d4	8a		txa			txa
.a9d5	49 73		eor #$73		eor  #$73
.a9d7	aa		tax			tax
.a9d8	68		pla			pla
.a9d9					L10031_END:
.a9d9					L10032:
>a9d9	0a					.byte L10032_END-L10032-1
.a9da	51 63		eor ($63),y		eor  ($63),y
.a9dc	48		pha			pha
.a9dd	8a		txa			txa
.a9de	c8		iny			iny
.a9df	51 63		eor ($63),y		eor  ($63),y
.a9e1	88		dey			dey
.a9e2	aa		tax			tax
.a9e3	68		pla			pla
.a9e4					L10032_END:
.a9e4					L10033:
>a9e4	02					.byte L10033_END-L10033-1
.a9e5	45 63		eor $63			eor  $63
.a9e7					L10033_END:
.a9e7					L10034:
>a9e7	0a					.byte L10034_END-L10034-1
.a9e8	4d 63 73	eor $7363		eor  $7363
.a9eb	48		pha			pha
.a9ec	8a		txa			txa
.a9ed	4d 83 73	eor $7383		eor  $7383
.a9f0	aa		tax			tax
.a9f1	68		pla			pla
.a9f2					L10034_END:
.a9f2					L10035:
>a9f2	08					.byte L10035_END-L10035-1
.a9f3	45 63		eor $63			eor  $63
.a9f5	48		pha			pha
.a9f6	8a		txa			txa
.a9f7	45 83		eor $83			eor  $83
.a9f9	aa		tax			tax
.a9fa	68		pla			pla
.a9fb					L10035_END:
.a9fb					L10036:
>a9fb	03					.byte L10036_END-L10036-1
.a9fc	4d 63 73	eor $7363		eor  $7363
.a9ff					L10036_END:
.a9ff					L10037:
>a9ff	02					.byte L10037_END-L10037-1
.aa00	49 63		eor #$63		eor  #$63
.aa02					L10037_END:
.aa02					L10038:
>aa02	02					.byte L10038_END-L10038-1
>aa03	a3 03					.byte $a3,$03
.aa05					L10038_END:
.aa05					L10039:
>aa05	02					.byte L10039_END-L10039-1
>aa06	a3 04					.byte $a3,$04
.aa08					L10039_END:
.aa08					L10040:
>aa08	03					.byte L10040_END-L10040-1
.aa09	48		pha			pha
.aa0a	da		phx			phx
.aa0b	5a		phy			phy
.aa0c					L10040_END:
.aa0c					L10041:
>aa0c	04					.byte L10041_END-L10041-1
.aa0d	a9 63		lda #$63		lda  #$63
.aa0f	a2 73		ldx #$73		ldx  #$73
.aa11					L10041_END:
.aa11					L10042:
>aa11	07					.byte L10042_END-L10042-1
.aa12	c8		iny			iny
.aa13	b1 63		lda ($63),y		lda  ($63),y
.aa15	aa		tax			tax
.aa16	88		dey			dey
.aa17	b1 63		lda ($63),y		lda  ($63),y
.aa19					L10042_END:
.aa19					L10043:
>aa19	04					.byte L10043_END-L10043-1
.aa1a	a5 63		lda $63			lda  $63
.aa1c	a2 00		ldx #$00		ldx  #0
.aa1e					L10043_END:
.aa1e					L10044:
>aa1e	06					.byte L10044_END-L10044-1
.aa1f	ad 63 73	lda $7363		lda  $7363
.aa22	ae 83 73	ldx $7383		ldx  $7383
.aa25					L10044_END:
.aa25					L10045:
>aa25	04					.byte L10045_END-L10045-1
.aa26	a5 63		lda $63			lda  $63
.aa28	a6 83		ldx $83			ldx  $83
.aa2a					L10045_END:
.aa2a					L10046:
>aa2a	05					.byte L10046_END-L10046-1
.aa2b	ad 63 73	lda $7363		lda  $7363
.aa2e	a2 00		ldx #$00		ldx  #0
.aa30					L10046_END:
.aa30					L10047:
>aa30	04					.byte L10047_END-L10047-1
.aa31	a9 63		lda #$63		lda  #$63
.aa33	a2 73		ldx #$73		ldx  #$73
.aa35					L10047_END:
.aa35					L10048:
>aa35	03					.byte L10048_END-L10048-1
.aa36	98		tya			tya
.aa37	a2 00		ldx #$00		ldx  #0
.aa39					L10048_END:
.aa39					L10049:
>aa39	02					.byte L10049_END-L10049-1
.aa3a	a2 00		ldx #$00		ldx  #0
.aa3c					L10049_END:
.aa3c					L10050:
>aa3c	09					.byte L10050_END-L10050-1
.aa3d	c9 00		cmp #$00		cmp #0
.aa3f	d0 02		bne $aa43		bne *+4
.aa41	e0 00		cpx #$00		cpx #0
>aa43	93					.byte $93
.aa44	f0 fe		beq $aa44		beq *
.aa46					L10050_END:
.aa46					L10051:
>aa46	09					.byte L10051_END-L10051-1
.aa47	c9 00		cmp #$00		cmp #0
.aa49	d0 02		bne $aa4d		bne *+4
.aa4b	e0 00		cpx #$00		cpx #0
>aa4d	93					.byte $93
.aa4e	d0 fe		bne $aa4e		bne *
.aa50					L10051_END:
.aa50					L10052:
>aa50	08					.byte L10052_END-L10052-1
.aa51	09 63		ora #$63		ora  #$63
.aa53	48		pha			pha
.aa54	8a		txa			txa
.aa55	09 73		ora #$73		ora  #$73
.aa57	aa		tax			tax
.aa58	68		pla			pla
.aa59					L10052_END:
.aa59					L10053:
>aa59	0a					.byte L10053_END-L10053-1
.aa5a	11 63		ora ($63),y		ora  ($63),y
.aa5c	48		pha			pha
.aa5d	8a		txa			txa
.aa5e	c8		iny			iny
.aa5f	11 63		ora ($63),y		ora  ($63),y
.aa61	88		dey			dey
.aa62	aa		tax			tax
.aa63	68		pla			pla
.aa64					L10053_END:
.aa64					L10054:
>aa64	02					.byte L10054_END-L10054-1
.aa65	05 63		ora $63			ora  $63
.aa67					L10054_END:
.aa67					L10055:
>aa67	0a					.byte L10055_END-L10055-1
.aa68	0d 63 73	ora $7363		ora  $7363
.aa6b	48		pha			pha
.aa6c	8a		txa			txa
.aa6d	0d 83 73	ora $7383		ora  $7383
.aa70	aa		tax			tax
.aa71	68		pla			pla
.aa72					L10055_END:
.aa72					L10056:
>aa72	08					.byte L10056_END-L10056-1
.aa73	05 63		ora $63			ora  $63
.aa75	48		pha			pha
.aa76	8a		txa			txa
.aa77	05 83		ora $83			ora  $83
.aa79	aa		tax			tax
.aa7a	68		pla			pla
.aa7b					L10056_END:
.aa7b					L10057:
>aa7b	03					.byte L10057_END-L10057-1
.aa7c	0d 63 73	ora $7363		ora  $7363
.aa7f					L10057_END:
.aa7f					L10058:
>aa7f	02					.byte L10058_END-L10058-1
.aa80	09 63		ora #$63		ora  #$63
.aa82					L10058_END:
.aa82					L10059:
>aa82	03					.byte L10059_END-L10059-1
.aa83	48		pha			pha
.aa84	8a		txa			txa
.aa85	fa		plx			plx
.aa86					L10059_END:
.aa86					L10060:
>aa86	02					.byte L10060_END-L10060-1
>aa87	a3 05					.byte $a3,$05
.aa89					L10060_END:
.aa89					L10061:
>aa89	09					.byte L10061_END-L10061-1
.aa8a	38		sec			sec
.aa8b	e9 63		sbc #$63		sbc  #$63
.aa8d	48		pha			pha
.aa8e	8a		txa			txa
.aa8f	e9 73		sbc #$73		sbc  #$73
.aa91	aa		tax			tax
.aa92	68		pla			pla
.aa93					L10061_END:
.aa93					L10062:
>aa93	0b					.byte L10062_END-L10062-1
.aa94	38		sec			sec
.aa95	f1 63		sbc ($63),y		sbc  ($63),y
.aa97	48		pha			pha
.aa98	8a		txa			txa
.aa99	c8		iny			iny
.aa9a	f1 63		sbc ($63),y		sbc  ($63),y
.aa9c	88		dey			dey
.aa9d	aa		tax			tax
.aa9e	68		pla			pla
.aa9f					L10062_END:
.aa9f					L10063:
>aa9f	06					.byte L10063_END-L10063-1
.aaa0	38		sec			sec
.aaa1	e5 63		sbc $63			sbc  $63
.aaa3	b0 01		bcs $aaa6		bcs  *+3
.aaa5	ca		dex			dex
.aaa6					L10063_END:
.aaa6					L10064:
>aaa6	0b					.byte L10064_END-L10064-1
.aaa7	38		sec			sec
.aaa8	ed 63 73	sbc $7363		sbc  $7363
.aaab	48		pha			pha
.aaac	8a		txa			txa
.aaad	ed 83 73	sbc $7383		sbc  $7383
.aab0	aa		tax			tax
.aab1	68		pla			pla
.aab2					L10064_END:
.aab2					L10065:
>aab2	09					.byte L10065_END-L10065-1
.aab3	38		sec			sec
.aab4	e5 63		sbc $63			sbc  $63
.aab6	48		pha			pha
.aab7	8a		txa			txa
.aab8	e5 83		sbc $83			sbc  $83
.aaba	aa		tax			tax
.aabb	68		pla			pla
.aabc					L10065_END:
.aabc					L10066:
>aabc	07					.byte L10066_END-L10066-1
.aabd	38		sec			sec
.aabe	ed 63 73	sbc $7363		sbc  $7363
.aac1	b0 01		bcs $aac4		bcs  *+3
.aac3	ca		dex			dex
.aac4					L10066_END:
.aac4					L10067:
>aac4	06					.byte L10067_END-L10067-1
.aac5	38		sec			sec
.aac6	e9 63		sbc #$63		sbc  #$63
.aac8	b0 01		bcs $aacb		bcs  *+3
.aaca	ca		dex			dex
.aacb					L10067_END:
.aacb					L10068:
>aacb	05					.byte L10068_END-L10068-1
.aacc	e0 00		cpx #$00		cpx #0
>aace	93					.byte $93
.aacf	30 fe		bmi $aacf		bmi *
.aad1					L10068_END:
.aad1					L10069:
>aad1	02					.byte L10069_END-L10069-1
.aad2	48		pha			pha
.aad3	da		phx			phx
.aad4					L10069_END:
.aad4					L10070:
>aad4	09					.byte L10070_END-L10070-1
.aad5	18		clc			clc
.aad6	69 63		adc #$63		adc  #$63
.aad8	48		pha			pha
.aad9	8a		txa			txa
.aada	69 73		adc #$73		adc  #$73
.aadc	aa		tax			tax
.aadd	68		pla			pla
.aade					L10070_END:
.aade					L10071:
>aade	0b					.byte L10071_END-L10071-1
.aadf	18		clc			clc
.aae0	71 63		adc ($63),y		adc  ($63),y
.aae2	48		pha			pha
.aae3	8a		txa			txa
.aae4	c8		iny			iny
.aae5	71 63		adc ($63),y		adc  ($63),y
.aae7	88		dey			dey
.aae8	aa		tax			tax
.aae9	68		pla			pla
.aaea					L10071_END:
.aaea					L10072:
>aaea	06					.byte L10072_END-L10072-1
.aaeb	18		clc			clc
.aaec	65 63		adc $63			adc  $63
.aaee	90 01		bcc $aaf1		bcc  *+3
.aaf0	e8		inx			inx
.aaf1					L10072_END:
.aaf1					L10073:
>aaf1	0b					.byte L10073_END-L10073-1
.aaf2	18		clc			clc
.aaf3	6d 63 73	adc $7363		adc  $7363
.aaf6	48		pha			pha
.aaf7	8a		txa			txa
.aaf8	6d 83 73	adc $7383		adc  $7383
.aafb	aa		tax			tax
.aafc	68		pla			pla
.aafd					L10073_END:
.aafd					L10074:
>aafd	09					.byte L10074_END-L10074-1
.aafe	18		clc			clc
.aaff	65 63		adc $63			adc  $63
.ab01	48		pha			pha
.ab02	8a		txa			txa
.ab03	65 83		adc $83			adc  $83
.ab05	aa		tax			tax
.ab06	68		pla			pla
.ab07					L10074_END:
.ab07					L10075:
>ab07	07					.byte L10075_END-L10075-1
.ab08	18		clc			clc
.ab09	6d 63 73	adc $7363		adc  $7363
.ab0c	90 01		bcc $ab0f		bcc  *+3
.ab0e	e8		inx			inx
.ab0f					L10075_END:
.ab0f					L10076:
>ab0f	06					.byte L10076_END-L10076-1
.ab10	18		clc			clc
.ab11	69 63		adc #$63		adc  #$63
.ab13	90 01		bcc $ab16		bcc  *+3
.ab15	e8		inx			inx
.ab16					L10076_END:
.ab16					L10077:
>ab16	05					.byte L10077_END-L10077-1
.ab17	e0 00		cpx #$00		cpx #0
>ab19	93					.byte $93
.ab1a	10 fe		bpl $ab1a		bpl *
.ab1c					L10077_END:
.ab1c					L10078:
>ab1c	08					.byte L10078_END-L10078-1
.ab1d	29 63		and #$63		and  #$63
.ab1f	48		pha			pha
.ab20	8a		txa			txa
.ab21	29 73		and #$73		and  #$73
.ab23	aa		tax			tax
.ab24	68		pla			pla
.ab25					L10078_END:
.ab25					L10079:
>ab25	0a					.byte L10079_END-L10079-1
.ab26	31 63		and ($63),y		and  ($63),y
.ab28	48		pha			pha
.ab29	8a		txa			txa
.ab2a	c8		iny			iny
.ab2b	31 63		and ($63),y		and  ($63),y
.ab2d	88		dey			dey
.ab2e	aa		tax			tax
.ab2f	68		pla			pla
.ab30					L10079_END:
.ab30					L10080:
>ab30	04					.byte L10080_END-L10080-1
.ab31	25 63		and $63			and  $63
.ab33	a2 00		ldx #$00		ldx  #0
.ab35					L10080_END:
.ab35					L10081:
>ab35	0a					.byte L10081_END-L10081-1
.ab36	2d 63 73	and $7363		and  $7363
.ab39	48		pha			pha
.ab3a	8a		txa			txa
.ab3b	2d 83 73	and $7383		and  $7383
.ab3e	aa		tax			tax
.ab3f	68		pla			pla
.ab40					L10081_END:
.ab40					L10082:
>ab40	08					.byte L10082_END-L10082-1
.ab41	25 63		and $63			and  $63
.ab43	48		pha			pha
.ab44	8a		txa			txa
.ab45	25 83		and $83			and  $83
.ab47	aa		tax			tax
.ab48	68		pla			pla
.ab49					L10082_END:
.ab49					L10083:
>ab49	05					.byte L10083_END-L10083-1
.ab4a	2d 63 73	and $7363		and  $7363
.ab4d	a2 00		ldx #$00		ldx  #0
.ab4f					L10083_END:
.ab4f					L10084:
>ab4f	04					.byte L10084_END-L10084-1
.ab50	29 63		and #$63		and  #$63
.ab52	a2 00		ldx #$00		ldx  #0
.ab54					L10084_END:
.ab54					L10085:
>ab54	02					.byte L10085_END-L10085-1
>ab55	a3 06					.byte $a3,$06
.ab57					L10085_END:
.ab57					L10086:
>ab57	02					.byte L10086_END-L10086-1
>ab58	a3 07					.byte $a3,$07
.ab5a					L10086_END:
.ab5a					L10087:
>ab5a	02					.byte L10087_END-L10087-1
>ab5b	a3 08					.byte $a3,$08
.ab5d					L10087_END:
.ab5d					L10088:
>ab5d	02					.byte L10088_END-L10088-1
>ab5e	a3 09					.byte $a3,$09
.ab60					L10088_END:
.ab60					L10089:
>ab60	02					.byte L10089_END-L10089-1
>ab61	a3 0a					.byte $a3,$0a
.ab63					L10089_END:
.ab63					L10090:
>ab63	02					.byte L10090_END-L10090-1
>ab64	a3 0b					.byte $a3,$0b
.ab66					L10090_END:
.ab66					L10091:
>ab66	03					.byte L10091_END-L10091-1
>ab67	93					.byte $93
.ab68	b0 fe		bcs $ab68		bcs  *
.ab6a					L10091_END:
.ab6a					L10092:
>ab6a	03					.byte L10092_END-L10092-1
>ab6b	93					.byte $93
.ab6c	90 fe		bcc $ab6c		bcc  *
.ab6e					L10092_END:
.ab6e					L10093:
>ab6e	02					.byte L10093_END-L10093-1
>ab6f	a3 0c					.byte $a3,$0c
.ab71					L10093_END:
.ab71					L10094:
>ab71	01					.byte L10094_END-L10094-1
>ab72	ff					.byte  $ff
.ab73					L10094_END:
.ab73					L10095:
>ab73	02					.byte L10095_END-L10095-1
.ab74	51 63		eor ($63),y		eor  ($63),y
.ab76					L10095_END:
.ab76					L10096:
>ab76	02					.byte L10096_END-L10096-1
.ab77	45 63		eor $63			eor  $63
.ab79					L10096_END:
.ab79					L10097:
>ab79	03					.byte L10097_END-L10097-1
.ab7a	4d 63 73	eor $7363		eor  $7363
.ab7d					L10097_END:
.ab7d					L10098:
>ab7d	02					.byte L10098_END-L10098-1
.ab7e	49 63		eor #$63		eor  #$63
.ab80					L10098_END:
.ab80					L10099:
>ab80	02					.byte L10099_END-L10099-1
.ab81	b1 63		lda ($63),y		lda  ($63),y
.ab83					L10099_END:
.ab83					L10100:
>ab83	02					.byte L10100_END-L10100-1
.ab84	a5 63		lda $63			lda  $63
.ab86					L10100_END:
.ab86					L10101:
>ab86	03					.byte L10101_END-L10101-1
.ab87	ad 63 73	lda $7363		lda  $7363
.ab8a					L10101_END:
.ab8a					L10102:
>ab8a	02					.byte L10102_END-L10102-1
.ab8b	a9 63		lda #$63		lda  #$63
.ab8d					L10102_END:
.ab8d					L10103:
>ab8d	01					.byte L10103_END-L10103-1
.ab8e	98		tya			tya
.ab8f					L10103_END:
.ab8f					L10104:
>ab8f	00					.byte L10104_END-L10104-1
.ab90					L10104_END:
.ab90					L10105:
>ab90	05					.byte L10105_END-L10105-1
.ab91	c9 00		cmp #$00		cmp #0
>ab93	93					.byte $93
.ab94	f0 fe		beq $ab94		beq *
.ab96					L10105_END:
.ab96					L10106:
>ab96	05					.byte L10106_END-L10106-1
.ab97	c9 00		cmp #$00		cmp #0
>ab99	93					.byte $93
.ab9a	d0 fe		bne $ab9a		bne *
.ab9c					L10106_END:
.ab9c					L10107:
>ab9c	02					.byte L10107_END-L10107-1
.ab9d	11 63		ora ($63),y		ora  ($63),y
.ab9f					L10107_END:
.ab9f					L10108:
>ab9f	02					.byte L10108_END-L10108-1
.aba0	05 63		ora $63			ora  $63
.aba2					L10108_END:
.aba2					L10109:
>aba2	03					.byte L10109_END-L10109-1
.aba3	0d 63 73	ora $7363		ora  $7363
.aba6					L10109_END:
.aba6					L10110:
>aba6	02					.byte L10110_END-L10110-1
.aba7	09 63		ora #$63		ora  #$63
.aba9					L10110_END:
.aba9					L10111:
>aba9	02					.byte L10111_END-L10111-1
>abaa	a3 0d					.byte $a3,$0d
.abac					L10111_END:
.abac					L10112:
>abac	03					.byte L10112_END-L10112-1
.abad	38		sec			sec
.abae	f1 63		sbc ($63),y		sbc  ($63),y
.abb0					L10112_END:
.abb0					L10113:
>abb0	03					.byte L10113_END-L10113-1
.abb1	38		sec			sec
.abb2	e5 63		sbc $63			sbc  $63
.abb4					L10113_END:
.abb4					L10114:
>abb4	04					.byte L10114_END-L10114-1
.abb5	38		sec			sec
.abb6	ed 63 73	sbc $7363		sbc  $7363
.abb9					L10114_END:
.abb9					L10115:
>abb9	03					.byte L10115_END-L10115-1
.abba	38		sec			sec
.abbb	e9 63		sbc #$63		sbc  #$63
.abbd					L10115_END:
.abbd					L10116:
>abbd	05					.byte L10116_END-L10116-1
.abbe	c9 00		cmp #$00		cmp #0
>abc0	93					.byte $93
.abc1	30 fe		bmi $abc1		bmi *
.abc3					L10116_END:
.abc3					L10117:
>abc3	01					.byte L10117_END-L10117-1
.abc4	48		pha			pha
.abc5					L10117_END:
.abc5					L10118:
>abc5	03					.byte L10118_END-L10118-1
.abc6	18		clc			clc
.abc7	71 63		adc ($63),y		adc  ($63),y
.abc9					L10118_END:
.abc9					L10119:
>abc9	03					.byte L10119_END-L10119-1
.abca	18		clc			clc
.abcb	65 63		adc $63			adc  $63
.abcd					L10119_END:
.abcd					L10120:
>abcd	04					.byte L10120_END-L10120-1
.abce	18		clc			clc
.abcf	6d 63 73	adc $7363		adc  $7363
.abd2					L10120_END:
.abd2					L10121:
>abd2	03					.byte L10121_END-L10121-1
.abd3	18		clc			clc
.abd4	69 63		adc #$63		adc  #$63
.abd6					L10121_END:
.abd6					L10122:
>abd6	05					.byte L10122_END-L10122-1
.abd7	c9 00		cmp #$00		cmp #0
>abd9	93					.byte $93
.abda	10 fe		bpl $abda		bpl *
.abdc					L10122_END:
.abdc					L10123:
>abdc	02					.byte L10123_END-L10123-1
.abdd	31 63		and ($63),y		and  ($63),y
.abdf					L10123_END:
.abdf					L10124:
>abdf	02					.byte L10124_END-L10124-1
.abe0	25 63		and $63			and  $63
.abe2					L10124_END:
.abe2					L10125:
>abe2	03					.byte L10125_END-L10125-1
.abe3	2d 63 73	and $7363		and  $7363
.abe6					L10125_END:
.abe6					L10126:
>abe6	02					.byte L10126_END-L10126-1
.abe7	29 63		and #$63		and  #$63
.abe9					L10126_END:
.abe9					L10127:
>abe9	02					.byte L10127_END-L10127-1
.abea	46 63		lsr $63			lsr  $63
.abec					L10127_END:
.abec					L10128:
>abec	06					.byte L10128_END-L10128-1
.abed	4e 83 73	lsr $7383		lsr  $7383
.abf0	6e 63 73	ror $7363		ror  $7363
.abf3					L10128_END:
.abf3					L10129:
>abf3	04					.byte L10129_END-L10129-1
.abf4	46 83		lsr $83			lsr  $83
.abf6	66 63		ror $63			ror  $63
.abf8					L10129_END:
.abf8					L10130:
>abf8	03					.byte L10130_END-L10130-1
.abf9	4e 63 73	lsr $7363		lsr  $7363
.abfc					L10130_END:
.abfc					L10131:
>abfc	06					.byte L10131_END-L10131-1
.abfd	48		pha			pha
.abfe	8a		txa			txa
.abff	4a		lsr a			lsr  a
.ac00	aa		tax			tax
.ac01	68		pla			pla
.ac02	6a		ror a			ror  a
.ac03					L10131_END:
.ac03					L10132:
>ac03	01					.byte L10132_END-L10132-1
.ac04	4a		lsr a			lsr  a
.ac05					L10132_END:
.ac05					L10133:
>ac05	02					.byte L10133_END-L10133-1
.ac06	06 63		asl $63			asl  $63
.ac08					L10133_END:
.ac08					L10134:
>ac08	06					.byte L10134_END-L10134-1
.ac09	0e 63 73	asl $7363		asl  $7363
.ac0c	2e 83 73	rol $7383		rol  $7383
.ac0f					L10134_END:
.ac0f					L10135:
>ac0f	04					.byte L10135_END-L10135-1
.ac10	06 63		asl $63			asl  $63
.ac12	26 83		rol $83			rol  $83
.ac14					L10135_END:
.ac14					L10136:
>ac14	03					.byte L10136_END-L10136-1
.ac15	0e 63 73	asl $7363		asl  $7363
.ac18					L10136_END:
.ac18					L10137:
>ac18	06					.byte L10137_END-L10137-1
.ac19	0a		asl a			asl  a
.ac1a	48		pha			pha
.ac1b	8a		txa			txa
.ac1c	2a		rol a			rol  a
.ac1d	aa		tax			tax
.ac1e	68		pla			pla
.ac1f					L10137_END:
.ac1f					L10138:
>ac1f	01					.byte L10138_END-L10138-1
.ac20	0a		asl a			asl  a
.ac21					L10138_END:
.ac21					L10139:
>ac21	0b					.byte L10139_END-L10139-1
.ac22	8a		txa			txa
.ac23	49 ff		eor #$ff		eor  #$ff
.ac25	aa		tax			tax
.ac26	68		pla			pla
.ac27	49 ff		eor #$ff		eor  #$ff
.ac29	1a		inc a			inc  a
.ac2a	d0 01		bne $ac2d		bne  *+3
.ac2c	e8		inx			inx
.ac2d					L10139_END:
.ac2d					L10140:
>ac2d	03					.byte L10140_END-L10140-1
.ac2e	49 ff		eor #$ff		eor  #$ff
.ac30	1a		inc a			inc  a
.ac31					L10140_END:
.ac31					L10141:
>ac31	02					.byte L10141_END-L10141-1
.ac32	c6 63		dec $63			dec  $63
.ac34					L10141_END:
.ac34					L10142:
>ac34	0d					.byte L10142_END-L10142-1
.ac35	48		pha			pha
.ac36	ad 63 73	lda $7363		lda  $7363
.ac39	d0 03		bne $ac3e		bne  _noborrow
.ac3b	ce 83 73	dec $7383		dec  $7383
.ac3e					_noborrow:
.ac3e	ce 63 73	dec $7363		dec  $7363
.ac41	68		pla			pla
.ac42					L10142_END:
.ac42					L10143:
>ac42	0a					.byte L10143_END-L10143-1
.ac43	48		pha			pha
.ac44	a5 63		lda $63			lda  $63
.ac46	d0 02		bne $ac4a		bne  _noborrow
.ac48	c6 83		dec $83			dec  $83
.ac4a					_noborrow:
.ac4a	c6 63		dec $63			dec  $63
.ac4c	68		pla			pla
.ac4d					L10143_END:
.ac4d					L10144:
>ac4d	03					.byte L10144_END-L10144-1
.ac4e	ce 63 73	dec $7363		dec  $7363
.ac51					L10144_END:
.ac51					L10145:
>ac51	01					.byte L10145_END-L10145-1
.ac52	88		dey			dey
.ac53					L10145_END:
.ac53					L10146:
>ac53	06					.byte L10146_END-L10146-1
.ac54	c9 00		cmp #$00		cmp  #0
.ac56	d0 01		bne $ac59		bne  *+3
.ac58	ca		dex			dex
.ac59	3a		dec a			dec  a
.ac5a					L10146_END:
.ac5a					L10147:
>ac5a	01					.byte L10147_END-L10147-1
.ac5b	3a		dec a			dec  a
.ac5c					L10147_END:
.ac5c					L10148:
>ac5c	02					.byte L10148_END-L10148-1
.ac5d	e6 63		inc $63			inc  $63
.ac5f					L10148_END:
.ac5f					L10149:
>ac5f	08					.byte L10149_END-L10149-1
.ac60	ee 63 73	inc $7363		inc  $7363
.ac63	d0 03		bne $ac68		bne  _nocarry
.ac65	ee 83 73	inc $7383		inc  $7383
.ac68					_nocarry:
.ac68					L10149_END:
.ac68					L10150:
>ac68	06					.byte L10150_END-L10150-1
.ac69	e6 63		inc $63			inc  $63
.ac6b	d0 02		bne $ac6f		bne  _nocarry
.ac6d	e6 83		inc $83			inc  $83
.ac6f					_nocarry:
.ac6f					L10150_END:
.ac6f					L10151:
>ac6f	03					.byte L10151_END-L10151-1
.ac70	ee 63 73	inc $7363		inc  $7363
.ac73					L10151_END:
.ac73					L10152:
>ac73	01					.byte L10152_END-L10152-1
.ac74	c8		iny			iny
.ac75					L10152_END:
.ac75					L10153:
>ac75	04					.byte L10153_END-L10153-1
.ac76	1a		inc a			inc  a
.ac77	d0 01		bne $ac7a		bne  *+3
.ac79	e8		inx			inx
.ac7a					L10153_END:
.ac7a					L10154:
>ac7a	01					.byte L10154_END-L10154-1
.ac7b	1a		inc a			inc  a
.ac7c					L10154_END:
.ac7c					ExecutableVectorTable:
>ac7c	a4 a5					.word Action_call                      ; 0
>ac7e	37 a7					.word Action_wordvar                   ; 1
>ac80	8d a6					.word Action_until                     ; 2
>ac82	84 a6					.word Action_repeat                    ; 3
>ac84	a6 a7					.word Action_dictionarycrunch          ; 4
>ac86	b4 a6					.word Action_rfor                      ; 5
>ac88	5d a5					.word Action_procedure_def             ; 6
>ac8a	e5 a6					.word Action_next                      ; 7
>ac8c	1f a6					.word Action_if                        ; 8
>ac8e	94 a5					.word Action_endproc                   ; 9
>ac90	56 a6					.word Action_endif                     ; 10
>ac92	34 a6					.word Action_else                      ; 11
>ac94	33 a7					.word Action_bytevar                   ; 12
>ac96	a1 a6					.word Action_afor                      ; 13
.ac98					SystemDictionary:
>ac98	07					.byte	7
>ac99	4d					.byte	'M'
>ac9a	52 a9					.word	L10000
>ac9c	00					.byte	0
>ac9d	01					.byte	1
>ac9e	f7					.byte	$f7
>ac9f	0c					.byte	12
>aca0	4d					.byte	'M'
>aca1	57 a9					.word	L10001
>aca3	00					.byte	0
>aca4	06					.byte	6
>aca5	f3 db d9 dd bd d2			.byte	$f3,$db,$d9,$dd,$bd,$d2
>acab	0c					.byte	12
>acac	4d					.byte	'M'
>acad	61 a9					.word	L10002
>acaf	00					.byte	0
>acb0	06					.byte	6
>acb1	f3 db d9 dd bd c1			.byte	$f3,$db,$d9,$dd,$bd,$c1
>acb7	09					.byte	9
>acb8	4d					.byte	'M'
>acb9	64 a9					.word	L10003
>acbb	00					.byte	0
>acbc	03					.byte	3
>acbd	f3 bd d9				.byte	$f3,$bd,$d9
>acc0	09					.byte	9
>acc1	4d					.byte	'M'
>acc2	67 a9					.word	L10004
>acc4	00					.byte	0
>acc5	03					.byte	3
>acc6	f3 bd d2				.byte	$f3,$bd,$d2
>acc9	09					.byte	9
>acca	4d					.byte	'M'
>accb	6a a9					.word	L10005
>accd	00					.byte	0
>acce	03					.byte	3
>accf	f3 bd c1				.byte	$f3,$bd,$c1
>acd2	07					.byte	7
>acd3	4d					.byte	'M'
>acd4	6d a9					.word	L10006
>acd6	00					.byte	0
>acd7	01					.byte	1
>acd8	f3					.byte	$f3
>acd9	07					.byte	7
>acda	4d					.byte	'M'
>acdb	72 a9					.word	L10007
>acdd	00					.byte	0
>acde	01					.byte	1
>acdf	f0					.byte	$f0
>ace0	09					.byte	9
>ace1	4d					.byte	'M'
>ace2	75 a9					.word	L10008
>ace4	00					.byte	0
>ace5	03					.byte	3
>ace6	ec bd d2				.byte	$ec,$bd,$d2
>ace9	07					.byte	7
>acea	4d					.byte	'M'
>aceb	7c a9					.word	L10009
>aced	00					.byte	0
>acee	01					.byte	1
>acef	ec					.byte	$ec
>acf0	09					.byte	9
>acf1	4d					.byte	'M'
>acf2	83 a9					.word	L10010
>acf4	00					.byte	0
>acf5	03					.byte	3
>acf6	e9 bd d2				.byte	$e9,$bd,$d2
>acf9	07					.byte	7
>acfa	4d					.byte	'M'
>acfb	88 a9					.word	L10011
>acfd	00					.byte	0
>acfe	01					.byte	1
>acff	e9					.byte	$e9
>ad00	09					.byte	9
>ad01	4d					.byte	'M'
>ad02	8d a9					.word	L10012
>ad04	00					.byte	0
>ad05	03					.byte	3
>ad06	e3 bd d9				.byte	$e3,$bd,$d9
>ad09	09					.byte	9
>ad0a	4d					.byte	'M'
>ad0b	91 a9					.word	L10013
>ad0d	00					.byte	0
>ad0e	03					.byte	3
>ad0f	e3 bd d2				.byte	$e3,$bd,$d2
>ad12	09					.byte	9
>ad13	4d					.byte	'M'
>ad14	95 a9					.word	L10014
>ad16	00					.byte	0
>ad17	03					.byte	3
>ad18	e3 bd c1				.byte	$e3,$bd,$c1
>ad1b	07					.byte	7
>ad1c	4d					.byte	'M'
>ad1d	99 a9					.word	L10015
>ad1f	00					.byte	0
>ad20	01					.byte	1
>ad21	e3					.byte	$e3
>ad22	07					.byte	7
>ad23	4d					.byte	'M'
>ad24	9f a9					.word	L10016
>ad26	00					.byte	0
>ad27	01					.byte	1
>ad28	e2					.byte	$e2
>ad29	0b					.byte	11
>ad2a	4d					.byte	'M'
>ad2b	a4 a9					.word	L10017
>ad2d	00					.byte	0
>ad2e	05					.byte	5
>ad2f	de 52 50 48 c1				.byte	$de,$52,$50,$48,$c1
>ad34	08					.byte	8
>ad35	4d					.byte	'M'
>ad36	ac a9					.word	L10018
>ad38	00					.byte	0
>ad39	02					.byte	2
>ad3a	de c1					.byte	$de,$c1
>ad3c	09					.byte	9
>ad3d	4d					.byte	'M'
>ad3e	af a9					.word	L10019
>ad40	00					.byte	0
>ad41	03					.byte	3
>ad42	d9 bd f3				.byte	$d9,$bd,$f3
>ad45	09					.byte	9
>ad46	4d					.byte	'M'
>ad47	b2 a9					.word	L10020
>ad49	00					.byte	0
>ad4a	03					.byte	3
>ad4b	d9 bd e3				.byte	$d9,$bd,$e3
>ad4e	09					.byte	9
>ad4f	4d					.byte	'M'
>ad50	b6 a9					.word	L10021
>ad52	00					.byte	0
>ad53	03					.byte	3
>ad54	d9 bd e2				.byte	$d9,$bd,$e2
>ad57	09					.byte	9
>ad58	4d					.byte	'M'
>ad59	b9 a9					.word	L10022
>ad5b	00					.byte	0
>ad5c	03					.byte	3
>ad5d	d9 bd d2				.byte	$d9,$bd,$d2
>ad60	09					.byte	9
>ad61	4d					.byte	'M'
>ad62	bb a9					.word	L10023
>ad64	00					.byte	0
>ad65	03					.byte	3
>ad66	d9 bd c1				.byte	$d9,$bd,$c1
>ad69	0a					.byte	10
>ad6a	4d					.byte	'M'
>ad6b	bd a9					.word	L10024
>ad6d	00					.byte	0
>ad6e	04					.byte	4
>ad6f	d9 ad be d3				.byte	$d9,$ad,$be,$d3
>ad73	0a					.byte	10
>ad74	4d					.byte	'M'
>ad75	bf a9					.word	L10025
>ad77	00					.byte	0
>ad78	04					.byte	4
>ad79	57 4f 52 c4				.byte	$57,$4f,$52,$c4
>ad7d	0b					.byte	11
>ad7e	4d					.byte	'M'
>ad7f	c2 a9					.word	L10026
>ad81	00					.byte	0
>ad82	05					.byte	5
>ad83	55 4e 54 49 cc				.byte	$55,$4e,$54,$49,$cc
>ad88	0a					.byte	10
>ad89	4d					.byte	'M'
>ad8a	c5 a9					.word	L10027
>ad8c	00					.byte	0
>ad8d	04					.byte	4
>ad8e	d3 ad be d9				.byte	$d3,$ad,$be,$d9
>ad92	0c					.byte	12
>ad93	4d					.byte	'M'
>ad94	c7 a9					.word	L10028
>ad96	00					.byte	0
>ad97	06					.byte	6
>ad98	d3 ad be 52 41 d9			.byte	$d3,$ad,$be,$52,$41,$d9
>ad9e	0a					.byte	10
>ad9f	4d					.byte	'M'
>ada0	cb a9					.word	L10029
>ada2	00					.byte	0
>ada3	04					.byte	4
>ada4	d3 ad be d2				.byte	$d3,$ad,$be,$d2
>ada8	0a					.byte	10
>ada9	4d					.byte	'M'
>adaa	ce a9					.word	L10030
>adac	00					.byte	0
>adad	04					.byte	4
>adae	d3 ad be c1				.byte	$d3,$ad,$be,$c1
>adb2	09					.byte	9
>adb3	4d					.byte	'M'
>adb4	d0 a9					.word	L10031
>adb6	00					.byte	0
>adb7	03					.byte	3
>adb8	d2 f7 f7				.byte	$d2,$f7,$f7
>adbb	0c					.byte	12
>adbc	4d					.byte	'M'
>adbd	d9 a9					.word	L10032
>adbf	00					.byte	0
>adc0	06					.byte	6
>adc1	d2 f3 f3 db d9 dd			.byte	$d2,$f3,$f3,$db,$d9,$dd
>adc7	09					.byte	9
>adc8	4d					.byte	'M'
>adc9	e4 a9					.word	L10033
>adcb	00					.byte	0
>adcc	03					.byte	3
>adcd	d2 f3 f3				.byte	$d2,$f3,$f3
>add0	09					.byte	9
>add1	4d					.byte	'M'
>add2	e7 a9					.word	L10034
>add4	00					.byte	0
>add5	03					.byte	3
>add6	d2 ec ec				.byte	$d2,$ec,$ec
>add9	09					.byte	9
>adda	4d					.byte	'M'
>addb	f2 a9					.word	L10035
>addd	00					.byte	0
>adde	03					.byte	3
>addf	d2 e9 e9				.byte	$d2,$e9,$e9
>ade2	09					.byte	9
>ade3	4d					.byte	'M'
>ade4	fb a9					.word	L10036
>ade6	00					.byte	0
>ade7	03					.byte	3
>ade8	d2 e3 e3				.byte	$d2,$e3,$e3
>adeb	09					.byte	9
>adec	4d					.byte	'M'
>aded	ff a9					.word	L10037
>adef	00					.byte	0
>adf0	03					.byte	3
>adf1	d2 e2 e2				.byte	$d2,$e2,$e2
>adf4	0c					.byte	12
>adf5	4d					.byte	'M'
>adf6	02 aa					.word	L10038
>adf8	00					.byte	0
>adf9	06					.byte	6
>adfa	52 45 50 45 41 d4			.byte	$52,$45,$50,$45,$41,$d4
>ae00	13					.byte	19
>ae01	4d					.byte	'M'
>ae02	05 aa					.word	L10039
>ae04	00					.byte	0
>ae05	0d					.byte	13
>ae06	52 45 4d 4f 56 45 2e 4c			.byte	$52,$45,$4d,$4f,$56,$45,$2e,$4c,$4f,$43,$41,$4c,$d3
>ae0e	4f 43 41 4c d3
>ae13	0c					.byte	12
>ae14	4d					.byte	'M'
>ae15	08 aa					.word	L10040
>ae17	00					.byte	0
>ae18	06					.byte	6
>ae19	52 41 d9 ad be d3			.byte	$52,$41,$d9,$ad,$be,$d3
>ae1f	09					.byte	9
>ae20	4d					.byte	'M'
>ae21	0c aa					.word	L10041
>ae23	00					.byte	0
>ae24	03					.byte	3
>ae25	d2 bd f7				.byte	$d2,$bd,$f7
>ae28	0c					.byte	12
>ae29	4d					.byte	'M'
>ae2a	11 aa					.word	L10042
>ae2c	00					.byte	0
>ae2d	06					.byte	6
>ae2e	d2 bd f3 db d9 dd			.byte	$d2,$bd,$f3,$db,$d9,$dd
>ae34	09					.byte	9
>ae35	4d					.byte	'M'
>ae36	19 aa					.word	L10043
>ae38	00					.byte	0
>ae39	03					.byte	3
>ae3a	d2 bd f3				.byte	$d2,$bd,$f3
>ae3d	09					.byte	9
>ae3e	4d					.byte	'M'
>ae3f	1e aa					.word	L10044
>ae41	00					.byte	0
>ae42	03					.byte	3
>ae43	d2 bd ec				.byte	$d2,$bd,$ec
>ae46	09					.byte	9
>ae47	4d					.byte	'M'
>ae48	25 aa					.word	L10045
>ae4a	00					.byte	0
>ae4b	03					.byte	3
>ae4c	d2 bd e9				.byte	$d2,$bd,$e9
>ae4f	09					.byte	9
>ae50	4d					.byte	'M'
>ae51	2a aa					.word	L10046
>ae53	00					.byte	0
>ae54	03					.byte	3
>ae55	d2 bd e3				.byte	$d2,$bd,$e3
>ae58	09					.byte	9
>ae59	4d					.byte	'M'
>ae5a	30 aa					.word	L10047
>ae5c	00					.byte	0
>ae5d	03					.byte	3
>ae5e	d2 bd e2				.byte	$d2,$bd,$e2
>ae61	09					.byte	9
>ae62	4d					.byte	'M'
>ae63	35 aa					.word	L10048
>ae65	00					.byte	0
>ae66	03					.byte	3
>ae67	d2 bd d9				.byte	$d2,$bd,$d9
>ae6a	09					.byte	9
>ae6b	4d					.byte	'M'
>ae6c	39 aa					.word	L10049
>ae6e	00					.byte	0
>ae6f	03					.byte	3
>ae70	d2 bd c1				.byte	$d2,$bd,$c1
>ae73	09					.byte	9
>ae74	4d					.byte	'M'
>ae75	3c aa					.word	L10050
>ae77	00					.byte	0
>ae78	03					.byte	3
>ae79	d2 bd bf				.byte	$d2,$bd,$bf
>ae7c	0a					.byte	10
>ae7d	4d					.byte	'M'
>ae7e	46 aa					.word	L10051
>ae80	00					.byte	0
>ae81	04					.byte	4
>ae82	d2 bc be bf				.byte	$d2,$bc,$be,$bf
>ae86	09					.byte	9
>ae87	4d					.byte	'M'
>ae88	50 aa					.word	L10052
>ae8a	00					.byte	0
>ae8b	03					.byte	3
>ae8c	d2 ba f7				.byte	$d2,$ba,$f7
>ae8f	0c					.byte	12
>ae90	4d					.byte	'M'
>ae91	59 aa					.word	L10053
>ae93	00					.byte	0
>ae94	06					.byte	6
>ae95	d2 ba f3 db d9 dd			.byte	$d2,$ba,$f3,$db,$d9,$dd
>ae9b	09					.byte	9
>ae9c	4d					.byte	'M'
>ae9d	64 aa					.word	L10054
>ae9f	00					.byte	0
>aea0	03					.byte	3
>aea1	d2 ba f3				.byte	$d2,$ba,$f3
>aea4	09					.byte	9
>aea5	4d					.byte	'M'
>aea6	67 aa					.word	L10055
>aea8	00					.byte	0
>aea9	03					.byte	3
>aeaa	d2 ba ec				.byte	$d2,$ba,$ec
>aead	09					.byte	9
>aeae	4d					.byte	'M'
>aeaf	72 aa					.word	L10056
>aeb1	00					.byte	0
>aeb2	03					.byte	3
>aeb3	d2 ba e9				.byte	$d2,$ba,$e9
>aeb6	09					.byte	9
>aeb7	4d					.byte	'M'
>aeb8	7b aa					.word	L10057
>aeba	00					.byte	0
>aebb	03					.byte	3
>aebc	d2 ba e3				.byte	$d2,$ba,$e3
>aebf	09					.byte	9
>aec0	4d					.byte	'M'
>aec1	7f aa					.word	L10058
>aec3	00					.byte	0
>aec4	03					.byte	3
>aec5	d2 ba e2				.byte	$d2,$ba,$e2
>aec8	0c					.byte	12
>aec9	4d					.byte	'M'
>aeca	82 aa					.word	L10059
>aecc	00					.byte	0
>aecd	06					.byte	6
>aece	52 2e 53 57 41 d0			.byte	$52,$2e,$53,$57,$41,$d0
>aed4	0b					.byte	11
>aed5	4d					.byte	'M'
>aed6	86 aa					.word	L10060
>aed8	00					.byte	0
>aed9	05					.byte	5
>aeda	52 2e 46 4f d2				.byte	$52,$2e,$46,$4f,$d2
>aedf	09					.byte	9
>aee0	4d					.byte	'M'
>aee1	89 aa					.word	L10061
>aee3	00					.byte	0
>aee4	03					.byte	3
>aee5	d2 ad f7				.byte	$d2,$ad,$f7
>aee8	0c					.byte	12
>aee9	4d					.byte	'M'
>aeea	93 aa					.word	L10062
>aeec	00					.byte	0
>aeed	06					.byte	6
>aeee	d2 ad f3 db d9 dd			.byte	$d2,$ad,$f3,$db,$d9,$dd
>aef4	09					.byte	9
>aef5	4d					.byte	'M'
>aef6	9f aa					.word	L10063
>aef8	00					.byte	0
>aef9	03					.byte	3
>aefa	d2 ad f3				.byte	$d2,$ad,$f3
>aefd	09					.byte	9
>aefe	4d					.byte	'M'
>aeff	a6 aa					.word	L10064
>af01	00					.byte	0
>af02	03					.byte	3
>af03	d2 ad ec				.byte	$d2,$ad,$ec
>af06	09					.byte	9
>af07	4d					.byte	'M'
>af08	b2 aa					.word	L10065
>af0a	00					.byte	0
>af0b	03					.byte	3
>af0c	d2 ad e9				.byte	$d2,$ad,$e9
>af0f	09					.byte	9
>af10	4d					.byte	'M'
>af11	bc aa					.word	L10066
>af13	00					.byte	0
>af14	03					.byte	3
>af15	d2 ad e3				.byte	$d2,$ad,$e3
>af18	09					.byte	9
>af19	4d					.byte	'M'
>af1a	c4 aa					.word	L10067
>af1c	00					.byte	0
>af1d	03					.byte	3
>af1e	d2 ad e2				.byte	$d2,$ad,$e2
>af21	09					.byte	9
>af22	4d					.byte	'M'
>af23	cb aa					.word	L10068
>af25	00					.byte	0
>af26	03					.byte	3
>af27	d2 ad bf				.byte	$d2,$ad,$bf
>af2a	0a					.byte	10
>af2b	4d					.byte	'M'
>af2c	d1 aa					.word	L10069
>af2e	00					.byte	0
>af2f	04					.byte	4
>af30	d2 ad be d3				.byte	$d2,$ad,$be,$d3
>af34	09					.byte	9
>af35	4d					.byte	'M'
>af36	d4 aa					.word	L10070
>af38	00					.byte	0
>af39	03					.byte	3
>af3a	d2 ab f7				.byte	$d2,$ab,$f7
>af3d	0c					.byte	12
>af3e	4d					.byte	'M'
>af3f	de aa					.word	L10071
>af41	00					.byte	0
>af42	06					.byte	6
>af43	d2 ab f3 db d9 dd			.byte	$d2,$ab,$f3,$db,$d9,$dd
>af49	09					.byte	9
>af4a	4d					.byte	'M'
>af4b	ea aa					.word	L10072
>af4d	00					.byte	0
>af4e	03					.byte	3
>af4f	d2 ab f3				.byte	$d2,$ab,$f3
>af52	09					.byte	9
>af53	4d					.byte	'M'
>af54	f1 aa					.word	L10073
>af56	00					.byte	0
>af57	03					.byte	3
>af58	d2 ab ec				.byte	$d2,$ab,$ec
>af5b	09					.byte	9
>af5c	4d					.byte	'M'
>af5d	fd aa					.word	L10074
>af5f	00					.byte	0
>af60	03					.byte	3
>af61	d2 ab e9				.byte	$d2,$ab,$e9
>af64	09					.byte	9
>af65	4d					.byte	'M'
>af66	07 ab					.word	L10075
>af68	00					.byte	0
>af69	03					.byte	3
>af6a	d2 ab e3				.byte	$d2,$ab,$e3
>af6d	09					.byte	9
>af6e	4d					.byte	'M'
>af6f	0f ab					.word	L10076
>af71	00					.byte	0
>af72	03					.byte	3
>af73	d2 ab e2				.byte	$d2,$ab,$e2
>af76	09					.byte	9
>af77	4d					.byte	'M'
>af78	16 ab					.word	L10077
>af7a	00					.byte	0
>af7b	03					.byte	3
>af7c	d2 ab bf				.byte	$d2,$ab,$bf
>af7f	09					.byte	9
>af80	4d					.byte	'M'
>af81	1c ab					.word	L10078
>af83	00					.byte	0
>af84	03					.byte	3
>af85	d2 a6 f7				.byte	$d2,$a6,$f7
>af88	0c					.byte	12
>af89	4d					.byte	'M'
>af8a	25 ab					.word	L10079
>af8c	00					.byte	0
>af8d	06					.byte	6
>af8e	d2 a6 f3 db d9 dd			.byte	$d2,$a6,$f3,$db,$d9,$dd
>af94	09					.byte	9
>af95	4d					.byte	'M'
>af96	30 ab					.word	L10080
>af98	00					.byte	0
>af99	03					.byte	3
>af9a	d2 a6 f3				.byte	$d2,$a6,$f3
>af9d	09					.byte	9
>af9e	4d					.byte	'M'
>af9f	35 ab					.word	L10081
>afa1	00					.byte	0
>afa2	03					.byte	3
>afa3	d2 a6 ec				.byte	$d2,$a6,$ec
>afa6	09					.byte	9
>afa7	4d					.byte	'M'
>afa8	40 ab					.word	L10082
>afaa	00					.byte	0
>afab	03					.byte	3
>afac	d2 a6 e9				.byte	$d2,$a6,$e9
>afaf	09					.byte	9
>afb0	4d					.byte	'M'
>afb1	49 ab					.word	L10083
>afb3	00					.byte	0
>afb4	03					.byte	3
>afb5	d2 a6 e3				.byte	$d2,$a6,$e3
>afb8	09					.byte	9
>afb9	4d					.byte	'M'
>afba	4f ab					.word	L10084
>afbc	00					.byte	0
>afbd	03					.byte	3
>afbe	d2 a6 e2				.byte	$d2,$a6,$e2
>afc1	0a					.byte	10
>afc2	4d					.byte	'M'
>afc3	54 ab					.word	L10085
>afc5	00					.byte	0
>afc6	04					.byte	4
>afc7	50 52 4f c3				.byte	$50,$52,$4f,$c3
>afcb	0a					.byte	10
>afcc	4d					.byte	'M'
>afcd	57 ab					.word	L10086
>afcf	00					.byte	0
>afd0	04					.byte	4
>afd1	4e 45 58 d4				.byte	$4e,$45,$58,$d4
>afd5	08					.byte	8
>afd6	4d					.byte	'M'
>afd7	5a ab					.word	L10087
>afd9	00					.byte	0
>afda	02					.byte	2
>afdb	49 c6					.byte	$49,$c6
>afdd	0d					.byte	13
>afde	4d					.byte	'M'
>afdf	5d ab					.word	L10088
>afe1	00					.byte	0
>afe2	07					.byte	7
>afe3	45 4e 44 50 52 4f c3			.byte	$45,$4e,$44,$50,$52,$4f,$c3
>afea	0b					.byte	11
>afeb	4d					.byte	'M'
>afec	60 ab					.word	L10089
>afee	00					.byte	0
>afef	05					.byte	5
>aff0	45 4e 44 49 c6				.byte	$45,$4e,$44,$49,$c6
>aff5	0a					.byte	10
>aff6	4d					.byte	'M'
>aff7	63 ab					.word	L10090
>aff9	00					.byte	0
>affa	04					.byte	4
>affb	45 4c 53 c5				.byte	$45,$4c,$53,$c5
>afff	09					.byte	9
>b000	4d					.byte	'M'
>b001	66 ab					.word	L10091
>b003	00					.byte	0
>b004	03					.byte	3
>b005	43 d3 bf				.byte	$43,$d3,$bf
>b008	09					.byte	9
>b009	4d					.byte	'M'
>b00a	6a ab					.word	L10092
>b00c	00					.byte	0
>b00d	03					.byte	3
>b00e	43 c3 bf				.byte	$43,$c3,$bf
>b011	0a					.byte	10
>b012	4d					.byte	'M'
>b013	6e ab					.word	L10093
>b015	00					.byte	0
>b016	04					.byte	4
>b017	42 59 54 c5				.byte	$42,$59,$54,$c5
>b01b	0b					.byte	11
>b01c	4d					.byte	'M'
>b01d	71 ab					.word	L10094
>b01f	00					.byte	0
>b020	05					.byte	5
>b021	42 52 45 41 cb				.byte	$42,$52,$45,$41,$cb
>b026	0c					.byte	12
>b027	4d					.byte	'M'
>b028	73 ab					.word	L10095
>b02a	00					.byte	0
>b02b	06					.byte	6
>b02c	c1 f3 f3 db d9 dd			.byte	$c1,$f3,$f3,$db,$d9,$dd
>b032	09					.byte	9
>b033	4d					.byte	'M'
>b034	76 ab					.word	L10096
>b036	00					.byte	0
>b037	03					.byte	3
>b038	c1 f3 f3				.byte	$c1,$f3,$f3
>b03b	09					.byte	9
>b03c	4d					.byte	'M'
>b03d	79 ab					.word	L10097
>b03f	00					.byte	0
>b040	03					.byte	3
>b041	c1 e3 e3				.byte	$c1,$e3,$e3
>b044	09					.byte	9
>b045	4d					.byte	'M'
>b046	7d ab					.word	L10098
>b048	00					.byte	0
>b049	03					.byte	3
>b04a	c1 e2 e2				.byte	$c1,$e2,$e2
>b04d	0c					.byte	12
>b04e	4d					.byte	'M'
>b04f	80 ab					.word	L10099
>b051	00					.byte	0
>b052	06					.byte	6
>b053	c1 bd f3 db d9 dd			.byte	$c1,$bd,$f3,$db,$d9,$dd
>b059	09					.byte	9
>b05a	4d					.byte	'M'
>b05b	83 ab					.word	L10100
>b05d	00					.byte	0
>b05e	03					.byte	3
>b05f	c1 bd f3				.byte	$c1,$bd,$f3
>b062	09					.byte	9
>b063	4d					.byte	'M'
>b064	86 ab					.word	L10101
>b066	00					.byte	0
>b067	03					.byte	3
>b068	c1 bd e3				.byte	$c1,$bd,$e3
>b06b	09					.byte	9
>b06c	4d					.byte	'M'
>b06d	8a ab					.word	L10102
>b06f	00					.byte	0
>b070	03					.byte	3
>b071	c1 bd e2				.byte	$c1,$bd,$e2
>b074	09					.byte	9
>b075	4d					.byte	'M'
>b076	8d ab					.word	L10103
>b078	00					.byte	0
>b079	03					.byte	3
>b07a	c1 bd d9				.byte	$c1,$bd,$d9
>b07d	09					.byte	9
>b07e	4d					.byte	'M'
>b07f	8f ab					.word	L10104
>b081	00					.byte	0
>b082	03					.byte	3
>b083	c1 bd d2				.byte	$c1,$bd,$d2
>b086	09					.byte	9
>b087	4d					.byte	'M'
>b088	90 ab					.word	L10105
>b08a	00					.byte	0
>b08b	03					.byte	3
>b08c	c1 bd bf				.byte	$c1,$bd,$bf
>b08f	0a					.byte	10
>b090	4d					.byte	'M'
>b091	96 ab					.word	L10106
>b093	00					.byte	0
>b094	04					.byte	4
>b095	c1 bc be bf				.byte	$c1,$bc,$be,$bf
>b099	0c					.byte	12
>b09a	4d					.byte	'M'
>b09b	9c ab					.word	L10107
>b09d	00					.byte	0
>b09e	06					.byte	6
>b09f	c1 ba f3 db d9 dd			.byte	$c1,$ba,$f3,$db,$d9,$dd
>b0a5	09					.byte	9
>b0a6	4d					.byte	'M'
>b0a7	9f ab					.word	L10108
>b0a9	00					.byte	0
>b0aa	03					.byte	3
>b0ab	c1 ba f3				.byte	$c1,$ba,$f3
>b0ae	09					.byte	9
>b0af	4d					.byte	'M'
>b0b0	a2 ab					.word	L10109
>b0b2	00					.byte	0
>b0b3	03					.byte	3
>b0b4	c1 ba e3				.byte	$c1,$ba,$e3
>b0b7	09					.byte	9
>b0b8	4d					.byte	'M'
>b0b9	a6 ab					.word	L10110
>b0bb	00					.byte	0
>b0bc	03					.byte	3
>b0bd	c1 ba e2				.byte	$c1,$ba,$e2
>b0c0	0b					.byte	11
>b0c1	4d					.byte	'M'
>b0c2	a9 ab					.word	L10111
>b0c4	00					.byte	0
>b0c5	05					.byte	5
>b0c6	41 2e 46 4f d2				.byte	$41,$2e,$46,$4f,$d2
>b0cb	0c					.byte	12
>b0cc	4d					.byte	'M'
>b0cd	ac ab					.word	L10112
>b0cf	00					.byte	0
>b0d0	06					.byte	6
>b0d1	c1 ad f3 db d9 dd			.byte	$c1,$ad,$f3,$db,$d9,$dd
>b0d7	09					.byte	9
>b0d8	4d					.byte	'M'
>b0d9	b0 ab					.word	L10113
>b0db	00					.byte	0
>b0dc	03					.byte	3
>b0dd	c1 ad f3				.byte	$c1,$ad,$f3
>b0e0	09					.byte	9
>b0e1	4d					.byte	'M'
>b0e2	b4 ab					.word	L10114
>b0e4	00					.byte	0
>b0e5	03					.byte	3
>b0e6	c1 ad e3				.byte	$c1,$ad,$e3
>b0e9	09					.byte	9
>b0ea	4d					.byte	'M'
>b0eb	b9 ab					.word	L10115
>b0ed	00					.byte	0
>b0ee	03					.byte	3
>b0ef	c1 ad e2				.byte	$c1,$ad,$e2
>b0f2	09					.byte	9
>b0f3	4d					.byte	'M'
>b0f4	bd ab					.word	L10116
>b0f6	00					.byte	0
>b0f7	03					.byte	3
>b0f8	c1 ad bf				.byte	$c1,$ad,$bf
>b0fb	0a					.byte	10
>b0fc	4d					.byte	'M'
>b0fd	c3 ab					.word	L10117
>b0ff	00					.byte	0
>b100	04					.byte	4
>b101	c1 ad be d3				.byte	$c1,$ad,$be,$d3
>b105	0c					.byte	12
>b106	4d					.byte	'M'
>b107	c5 ab					.word	L10118
>b109	00					.byte	0
>b10a	06					.byte	6
>b10b	c1 ab f3 db d9 dd			.byte	$c1,$ab,$f3,$db,$d9,$dd
>b111	09					.byte	9
>b112	4d					.byte	'M'
>b113	c9 ab					.word	L10119
>b115	00					.byte	0
>b116	03					.byte	3
>b117	c1 ab f3				.byte	$c1,$ab,$f3
>b11a	09					.byte	9
>b11b	4d					.byte	'M'
>b11c	cd ab					.word	L10120
>b11e	00					.byte	0
>b11f	03					.byte	3
>b120	c1 ab e3				.byte	$c1,$ab,$e3
>b123	09					.byte	9
>b124	4d					.byte	'M'
>b125	d2 ab					.word	L10121
>b127	00					.byte	0
>b128	03					.byte	3
>b129	c1 ab e2				.byte	$c1,$ab,$e2
>b12c	09					.byte	9
>b12d	4d					.byte	'M'
>b12e	d6 ab					.word	L10122
>b130	00					.byte	0
>b131	03					.byte	3
>b132	c1 ab bf				.byte	$c1,$ab,$bf
>b135	0c					.byte	12
>b136	4d					.byte	'M'
>b137	dc ab					.word	L10123
>b139	00					.byte	0
>b13a	06					.byte	6
>b13b	c1 a6 f3 db d9 dd			.byte	$c1,$a6,$f3,$db,$d9,$dd
>b141	09					.byte	9
>b142	4d					.byte	'M'
>b143	df ab					.word	L10124
>b145	00					.byte	0
>b146	03					.byte	3
>b147	c1 a6 f3				.byte	$c1,$a6,$f3
>b14a	09					.byte	9
>b14b	4d					.byte	'M'
>b14c	e2 ab					.word	L10125
>b14e	00					.byte	0
>b14f	03					.byte	3
>b150	c1 a6 e3				.byte	$c1,$a6,$e3
>b153	09					.byte	9
>b154	4d					.byte	'M'
>b155	e6 ab					.word	L10126
>b157	00					.byte	0
>b158	03					.byte	3
>b159	c1 a6 e2				.byte	$c1,$a6,$e2
>b15c	09					.byte	9
>b15d	4d					.byte	'M'
>b15e	e9 ab					.word	L10127
>b160	00					.byte	0
>b161	03					.byte	3
>b162	be be f3				.byte	$be,$be,$f3
>b165	09					.byte	9
>b166	4d					.byte	'M'
>b167	ec ab					.word	L10128
>b169	00					.byte	0
>b16a	03					.byte	3
>b16b	be be ec				.byte	$be,$be,$ec
>b16e	09					.byte	9
>b16f	4d					.byte	'M'
>b170	f3 ab					.word	L10129
>b172	00					.byte	0
>b173	03					.byte	3
>b174	be be e9				.byte	$be,$be,$e9
>b177	09					.byte	9
>b178	4d					.byte	'M'
>b179	f8 ab					.word	L10130
>b17b	00					.byte	0
>b17c	03					.byte	3
>b17d	be be e3				.byte	$be,$be,$e3
>b180	09					.byte	9
>b181	4d					.byte	'M'
>b182	fc ab					.word	L10131
>b184	00					.byte	0
>b185	03					.byte	3
>b186	be be d2				.byte	$be,$be,$d2
>b189	09					.byte	9
>b18a	4d					.byte	'M'
>b18b	03 ac					.word	L10132
>b18d	00					.byte	0
>b18e	03					.byte	3
>b18f	be be c1				.byte	$be,$be,$c1
>b192	09					.byte	9
>b193	4d					.byte	'M'
>b194	05 ac					.word	L10133
>b196	00					.byte	0
>b197	03					.byte	3
>b198	bc bc f3				.byte	$bc,$bc,$f3
>b19b	09					.byte	9
>b19c	4d					.byte	'M'
>b19d	08 ac					.word	L10134
>b19f	00					.byte	0
>b1a0	03					.byte	3
>b1a1	bc bc ec				.byte	$bc,$bc,$ec
>b1a4	09					.byte	9
>b1a5	4d					.byte	'M'
>b1a6	0f ac					.word	L10135
>b1a8	00					.byte	0
>b1a9	03					.byte	3
>b1aa	bc bc e9				.byte	$bc,$bc,$e9
>b1ad	09					.byte	9
>b1ae	4d					.byte	'M'
>b1af	14 ac					.word	L10136
>b1b1	00					.byte	0
>b1b2	03					.byte	3
>b1b3	bc bc e3				.byte	$bc,$bc,$e3
>b1b6	09					.byte	9
>b1b7	4d					.byte	'M'
>b1b8	18 ac					.word	L10137
>b1ba	00					.byte	0
>b1bb	03					.byte	3
>b1bc	bc bc d2				.byte	$bc,$bc,$d2
>b1bf	09					.byte	9
>b1c0	4d					.byte	'M'
>b1c1	1f ac					.word	L10138
>b1c3	00					.byte	0
>b1c4	03					.byte	3
>b1c5	bc bc c1				.byte	$bc,$bc,$c1
>b1c8	0b					.byte	11
>b1c9	4d					.byte	'M'
>b1ca	21 ac					.word	L10139
>b1cc	00					.byte	0
>b1cd	05					.byte	5
>b1ce	ad 52 50 48 c1				.byte	$ad,$52,$50,$48,$c1
>b1d3	08					.byte	8
>b1d4	4d					.byte	'M'
>b1d5	2d ac					.word	L10140
>b1d7	00					.byte	0
>b1d8	02					.byte	2
>b1d9	ad c1					.byte	$ad,$c1
>b1db	09					.byte	9
>b1dc	4d					.byte	'M'
>b1dd	31 ac					.word	L10141
>b1df	00					.byte	0
>b1e0	03					.byte	3
>b1e1	ad ad f3				.byte	$ad,$ad,$f3
>b1e4	09					.byte	9
>b1e5	4d					.byte	'M'
>b1e6	34 ac					.word	L10142
>b1e8	00					.byte	0
>b1e9	03					.byte	3
>b1ea	ad ad ec				.byte	$ad,$ad,$ec
>b1ed	09					.byte	9
>b1ee	4d					.byte	'M'
>b1ef	42 ac					.word	L10143
>b1f1	00					.byte	0
>b1f2	03					.byte	3
>b1f3	ad ad e9				.byte	$ad,$ad,$e9
>b1f6	09					.byte	9
>b1f7	4d					.byte	'M'
>b1f8	4d ac					.word	L10144
>b1fa	00					.byte	0
>b1fb	03					.byte	3
>b1fc	ad ad e3				.byte	$ad,$ad,$e3
>b1ff	09					.byte	9
>b200	4d					.byte	'M'
>b201	51 ac					.word	L10145
>b203	00					.byte	0
>b204	03					.byte	3
>b205	ad ad d9				.byte	$ad,$ad,$d9
>b208	09					.byte	9
>b209	4d					.byte	'M'
>b20a	53 ac					.word	L10146
>b20c	00					.byte	0
>b20d	03					.byte	3
>b20e	ad ad d2				.byte	$ad,$ad,$d2
>b211	09					.byte	9
>b212	4d					.byte	'M'
>b213	5a ac					.word	L10147
>b215	00					.byte	0
>b216	03					.byte	3
>b217	ad ad c1				.byte	$ad,$ad,$c1
>b21a	09					.byte	9
>b21b	4d					.byte	'M'
>b21c	5c ac					.word	L10148
>b21e	00					.byte	0
>b21f	03					.byte	3
>b220	ab ab f3				.byte	$ab,$ab,$f3
>b223	09					.byte	9
>b224	4d					.byte	'M'
>b225	5f ac					.word	L10149
>b227	00					.byte	0
>b228	03					.byte	3
>b229	ab ab ec				.byte	$ab,$ab,$ec
>b22c	09					.byte	9
>b22d	4d					.byte	'M'
>b22e	68 ac					.word	L10150
>b230	00					.byte	0
>b231	03					.byte	3
>b232	ab ab e9				.byte	$ab,$ab,$e9
>b235	09					.byte	9
>b236	4d					.byte	'M'
>b237	6f ac					.word	L10151
>b239	00					.byte	0
>b23a	03					.byte	3
>b23b	ab ab e3				.byte	$ab,$ab,$e3
>b23e	09					.byte	9
>b23f	4d					.byte	'M'
>b240	73 ac					.word	L10152
>b242	00					.byte	0
>b243	03					.byte	3
>b244	ab ab d9				.byte	$ab,$ab,$d9
>b247	09					.byte	9
>b248	4d					.byte	'M'
>b249	75 ac					.word	L10153
>b24b	00					.byte	0
>b24c	03					.byte	3
>b24d	ab ab d2				.byte	$ab,$ab,$d2
>b250	09					.byte	9
>b251	4d					.byte	'M'
>b252	7a ac					.word	L10154
>b254	00					.byte	0
>b255	03					.byte	3
>b256	ab ab c1				.byte	$ab,$ab,$c1
>b259	00					.byte	$00

;******  Return to file: main.asm


;******  Processing file: utility/loadcode.asm

.b25a					LoadBasicCode:
.b25a	a9 89		lda #$89			lda 	#(LBCTest) & $FF
.b25c	85 1a		sta $1a				sta 	zTemp0
.b25e	a9 b2		lda #$b2			lda 	#(LBCTest) >> 8
.b260	85 1b		sta $1b				sta 	zTemp0+1
.b262	a9 01		lda #$01			lda 	#($801) & $FF
.b264	85 1c		sta $1c				sta 	zTemp1
.b266	a9 08		lda #$08			lda 	#($801) >> 8
.b268	85 1d		sta $1d				sta 	zTemp1+1
.b26a					_LBCCopy:
.b26a	a0 02		ldy #$02			ldy 	#2							; skip over the loading address
.b26c	b1 1a		lda ($1a),y			lda 	(zTemp0),y 					; skips first two bytes :)
.b26e	92 1c		sta ($1c)			sta 	(zTemp1)
.b270	e6 1a		inc $1a				inc 	zTemp0
.b272	d0 02		bne $b276			bne 	_NoCarry
.b274	e6 1b		inc $1b				inc 	zTemp0+1
.b276					_NoCarry:
.b276	e6 1c		inc $1c				inc 	zTemp1
.b278	d0 02		bne $b27c			bne 	_NoCarry
.b27a	e6 1d		inc $1d				inc 	zTemp1+1
.b27c					_NoCarry:
.b27c	a5 1a		lda $1a				lda 	zTemp0
.b27e	c9 2d		cmp #$2d			cmp 	#LBCTestEnd & $FF
.b280	d0 e8		bne $b26a			bne 	_LBCCopy
.b282	a5 1b		lda $1b				lda 	zTemp0+1
.b284	c9 b9		cmp #$b9			cmp 	#LBCTestEnd >> 8
.b286	d0 e2		bne $b26a			bne 	_LBCCopy
.b288	60		rts				rts
.b289					LBCTest:
>b289	01 08 0c 08 e8 03 99 c7				.binary 	"../generated/test.prg"
>b291	28 31 34 29 00 17 08 f2 03 9e 34 30 39 36 30 00
>b2a1	32 08 fc 03 8f 2e 20 57 4f 52 44 20 56 45 52 41
>b2b1	2e 4c 4f 57 40 24 39 46 32 30 00 4e 08 06 04 8f
>b2c1	2e 20 42 59 54 45 20 56 45 52 41 2e 48 49 47 48
>b2d1	40 24 39 46 32 32 00 6a 08 10 04 8f 2e 20 42 59
>b2e1	54 45 20 56 45 52 41 2e 44 41 54 41 40 24 39 46
>b2f1	32 33 00 83 08 1a 04 8f 2e 20 57 4f 52 44 20 2e
>b301	53 50 52 49 54 45 2e 42 41 53 45 00 9c 08 24 04
>b311	8f 2e 20 42 59 54 45 20 2e 53 50 52 49 54 45 2e
>b321	4d 4f 44 45 00 b3 08 2e 04 8f 2e 20 50 52 4f 43
>b331	20 56 45 52 41 2e 53 45 54 28 29 00 c7 08 38 04
>b341	8f 2e 20 56 45 52 41 2e 4c 4f 57 20 3d 20 52 00
>b351	ea 08 42 04 8f 2e 20 41 3d 59 20 41 26 24 30 46
>b361	20 41 3a 24 31 30 20 56 45 52 41 2e 48 49 47 48
>b371	3d 41 00 f9 08 4c 04 8f 2e 20 45 4e 44 50 52 4f
>b381	43 00 14 09 56 04 8f 2e 20 50 52 4f 43 20 56 45
>b391	52 41 2e 50 41 4c 45 54 54 45 28 29 00 22 09 60
>b3a1	04 8f 2e 20 52 41 59 2d 3e 53 00 4f 09 6a 04 8f
>b3b1	2e 20 52 2d 3e 53 20 52 3d 59 20 3c 3c 52 20 52
>b3c1	3a 24 31 30 30 30 20 59 3d 24 30 46 20 56 45 52
>b3d1	41 2e 53 45 54 28 29 00 7a 09 74 04 8f 2e 20 53
>b3e1	2d 3e 52 20 56 45 52 41 2e 44 41 54 41 3d 41 20
>b3f1	52 2e 53 57 41 50 20 56 45 52 41 2e 44 41 54 41
>b401	3d 41 00 88 09 7e 04 8f 2e 20 53 2d 3e 52 41 59
>b411	00 97 09 88 04 8f 2e 20 45 4e 44 50 52 4f 43 00
>b421	b9 09 92 04 8f 2e 20 50 52 4f 43 20 56 45 52 41
>b431	2e 53 50 52 49 54 45 53 2e 45 4e 41 42 4c 45 28
>b441	29 00 16 0a 9c 04 8f 2e 20 52 41 59 2d 3e 53 20
>b451	2e 53 50 52 49 54 45 2e 4d 4f 44 45 3d 59 20 52
>b461	3c 3e 3f 20 49 46 20 31 20 45 4e 44 49 46 20 41
>b471	2d 3e 53 20 56 45 52 41 2e 53 45 54 28 24 34 30
>b481	30 30 2c 24 46 29 20 53 2d 3e 41 20 56 45 52 41
>b491	2e 44 41 54 41 3d 41 20 53 2d 3e 52 41 59 00 25
>b4a1	0a a6 04 8f 2e 20 45 4e 44 50 52 4f 43 00 3f 0a
>b4b1	b0 04 8f 2e 20 50 52 4f 43 20 56 45 52 41 2e 53
>b4c1	45 4c 45 43 54 28 29 00 7d 0a ba 04 8f 2e 20 52
>b4d1	41 59 2d 3e 53 20 52 26 24 37 46 20 3c 3c 41 20
>b4e1	3c 3c 52 20 3c 3c 52 20 52 3a 24 35 30 30 30 20
>b4f1	2e 53 50 52 49 54 45 2e 42 41 53 45 3d 52 20 53
>b501	2d 3e 52 41 59 00 8c 0a c4 04 8f 2e 20 45 4e 44
>b511	50 52 4f 43 00 a7 0a ce 04 8f 2e 20 50 52 4f 43
>b521	20 2e 56 45 52 41 2e 41 43 43 45 53 53 28 29 00
>b531	d8 0a d8 04 8f 2e 20 59 2d 3e 53 20 52 2b 2e 53
>b541	50 52 49 54 45 2e 42 41 53 45 20 59 3d 24 30 46
>b551	20 56 45 52 41 2e 53 45 54 28 29 20 53 2d 3e 59
>b561	00 e7 0a e2 04 8f 2e 20 45 4e 44 50 52 4f 43 00
>b571	fc 0a ec 04 8f 2e 20 50 52 4f 43 20 56 45 52 41
>b581	2e 58 28 29 00 4a 0b f6 04 8f 2e 20 52 41 59 2d
>b591	3e 53 20 52 2d 3e 53 20 2e 56 45 52 41 2e 41 43
>b5a1	43 45 53 53 28 32 29 20 53 2d 3e 52 20 56 45 52
>b5b1	41 2e 44 41 54 41 3d 41 20 52 2e 53 57 41 50 20
>b5c1	56 45 52 41 2e 44 41 54 41 3d 41 20 53 2d 3e 52
>b5d1	41 59 00 59 0b 00 05 8f 2e 20 45 4e 44 50 52 4f
>b5e1	43 00 6e 0b 0a 05 8f 2e 20 50 52 4f 43 20 56 45
>b5f1	52 41 2e 59 28 29 00 bc 0b 14 05 8f 2e 20 52 41
>b601	59 2d 3e 53 20 52 2d 3e 53 20 2e 56 45 52 41 2e
>b611	41 43 43 45 53 53 28 34 29 20 53 2d 3e 52 20 56
>b621	45 52 41 2e 44 41 54 41 3d 41 20 52 2e 53 57 41
>b631	50 20 56 45 52 41 2e 44 41 54 41 3d 41 20 53 2d
>b641	3e 52 41 59 00 cb 0b 1e 05 8f 2e 20 45 4e 44 50
>b651	52 4f 43 00 e5 0b 28 05 8f 2e 20 50 52 4f 43 20
>b661	56 45 52 41 2e 43 52 45 41 54 45 28 29 00 f3 0b
>b671	32 05 8f 2e 20 52 41 59 2d 3e 53 00 0f 0c 3c 05
>b681	8f 2e 20 3c 3c 41 20 3c 3c 41 20 3c 3c 41 20 3c
>b691	3c 41 20 41 2d 3e 53 00 4a 0c 46 05 8f 2e 20 2e
>b6a1	56 45 52 41 2e 41 43 43 45 53 53 28 36 29 20 41
>b6b1	20 3d 20 31 32 20 56 45 52 41 2e 44 41 54 41 3d
>b6c1	41 20 53 2d 3e 41 20 56 45 52 41 2e 44 41 54 41
>b6d1	3d 41 00 58 0c 50 05 8f 2e 20 53 2d 3e 52 41 59
>b6e1	00 67 0c 5a 05 8f 2e 20 45 4e 44 50 52 4f 43 00
>b6f1	82 0c 64 05 8f 2e 20 50 52 4f 43 20 56 45 52 41
>b701	2e 47 52 41 50 48 49 43 28 29 00 90 0c 6e 05 8f
>b711	2e 20 52 41 59 2d 3e 53 00 b5 0c 78 05 8f 2e 20
>b721	3e 3e 52 20 52 2d 3e 53 20 52 2d 3e 53 20 2e 56
>b731	45 52 41 2e 41 43 43 45 53 53 28 30 29 00 cd 0c
>b741	82 05 8f 2e 20 53 2d 3e 52 20 56 45 52 41 2e 44
>b751	41 54 41 3d 41 00 01 0d 8c 05 8f 2e 20 53 2d 3e
>b761	52 20 52 2e 53 57 41 50 20 41 26 24 30 46 20 41
>b771	2b 2e 53 50 52 49 54 45 2e 4d 4f 44 45 20 56 45
>b781	52 41 2e 44 41 54 41 3d 41 00 0f 0d 96 05 8f 2e
>b791	20 53 2d 3e 52 41 59 00 1e 0d a0 05 8f 2e 20 45
>b7a1	4e 44 50 52 4f 43 00 31 0d aa 05 8f 2e 20 50 52
>b7b1	4f 43 20 4d 41 49 4e 28 29 00 4d 0d b4 05 8f 2e
>b7c1	20 56 45 52 41 2e 50 41 4c 45 54 54 45 28 24 46
>b7d1	38 30 2c 31 29 00 69 0d be 05 8f 2e 20 56 45 52
>b7e1	41 2e 50 41 4c 45 54 54 45 28 24 30 30 30 2c 36
>b7f1	29 00 8b 0d c8 05 8f 2e 20 56 45 52 41 2e 53 50
>b801	52 49 54 45 53 2e 45 4e 41 42 4c 45 28 31 2c 24
>b811	30 30 29 00 a6 0d d2 05 8f 2e 20 56 45 52 41 2e
>b821	53 45 54 28 24 34 30 30 30 2c 24 30 31 29 00 d1
>b831	0d dc 05 8f 2e 20 34 30 39 36 20 52 2e 46 4f 52
>b841	20 3e 3e 41 20 3e 3e 41 20 56 45 52 41 2e 44 41
>b851	54 41 3d 41 20 4e 45 58 54 00 e1 0d e6 05 8f 2e
>b861	20 31 32 20 41 2e 46 4f 52 00 ed 0d f0 05 8f 2e
>b871	20 52 2d 3e 53 00 02 0e fa 05 8f 2e 20 56 45 52
>b881	41 2e 53 45 4c 45 43 54 28 29 00 1a 0e 04 06 8f
>b891	2e 20 56 45 52 41 2e 43 52 45 41 54 45 28 24 30
>b8a1	41 29 00 35 0e 0e 06 8f 2e 20 56 45 52 41 2e 47
>b8b1	52 41 50 48 49 43 28 24 31 34 30 30 29 00 4d 0e
>b8c1	18 06 8f 2e 20 53 2d 3e 52 20 3c 3c 52 20 3c 3c
>b8d1	52 20 3c 3c 52 00 61 0e 22 06 8f 2e 20 56 45 52
>b8e1	41 2e 58 28 29 20 3c 3c 52 00 71 0e 2c 06 8f 2e
>b8f1	20 56 45 52 41 2e 59 28 29 00 7d 0e 36 06 8f 2e
>b901	20 4e 45 58 54 00 8c 0e 40 06 8f 2e 20 45 4e 44
>b911	50 52 4f 43 00 a1 0e 4a 06 8f 2e 20 52 45 4d 4f
>b921	56 45 2e 4c 4f 43 41 4c 53 00 00 00
.b92d					LBCTestEnd:

;******  Return to file: main.asm

.b92d					EndCode:

;******  End of listing
