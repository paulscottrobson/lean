// ******************************************************************************
// ******************************************************************************
//
//		Name : 		conditionals.def
//		Purpose : 	Conditionals
//		Author : 	Paul Robson (paul@robsons.org.uk)
//		Created : 	1st November 2019
//
// ******************************************************************************
// ******************************************************************************

// ******************************************************************************
//
//								Carry Flag checks
//
// ******************************************************************************

*	CS?
	[data] ; bcs		*

*	CC?
	[data];	bcc 	*

// ******************************************************************************
//
//							  Zero comparison checks
//
// ******************************************************************************

* 	R=?
	cmp #0;bne	*+4
	cpx #0
	[data] ; beq *

* 	R<>?
	cmp #0;bne	*+4
	cpx #0
	[data] ; bne *

* 	R+?
	cpx #0
	[data] ; bpl *

* 	R-?
	cpx #0
	[data] ; bmi *


* 	A=?
	cmp #0
	[data] ; beq *

* 	A<>?
	cmp #0
	[data] ; bne *

* 	A+?
	cmp #0
	[data] ; bpl *

* 	A-?
	cmp #0
	[data] ; bmi *

// ******************************************************************************
//
//								Short variable checks
//
// ******************************************************************************

S	A<<var>?
	cmp 	<addr>
	[data] ; bcc *

S	A>=<var>?
	cmp 	<addr>
	[data] ; bcs *

S	A=<var>?
	cmp 	<addr>
	[data] ; beq *

S	A<><var>?
	cmp 	<addr>
	[data] ; bne *

// ******************************************************************************
//
//								Short constant checks
//
// ******************************************************************************

B	A<<const>?
	cmp 	#<low>
	[data] ; bcc *

B	A>=<const>?
	cmp 	#<low>
	[data] ; bcs *

B	A=<const>?
	cmp 	#<low>
	[data] ; beq *

B	A<><const>?
	cmp 	#<low>
	[data] ; bne *

// ******************************************************************************
//
//								Long constant checks
//
// ******************************************************************************

W 	R>=<const>?
	cmp 	#<low>
	pha
	txa
	sbc 	#<high>
	pla
	[data] ; bcs *

W 	R<<const>?
	cmp 	#<low>
	pha
	txa
	sbc 	#<high>
	pla
	[data] ; bcc *

W 	R=<const>?
	cmp 	#<low>
	bne 	_Skip1
	cpx 	#<high>
	_Skip1:
	[data] ; beq *

W 	R<><const>?
	cmp 	#<low>
	bne 	_Skip1
	cpx 	#<high>
	_Skip1:
	[data] ; bne *

// ******************************************************************************
//
//								Long variable checks
//
// ******************************************************************************

I 	R>=<var>?
	cmp 	<addr>
	pha
	txa
	sbc 	<next>
	pla
	[data] ; bcs *

I	R<<var>?
	cmp 	<addr>
	pha
	txa
	sbc 	<next>
	pla
	[data] ; bcc *

I 	R=<var>?
	cmp 	<addr>
	bne 	_Skip1
	cpx 	<next>
	_Skip1:
	[data] ; beq *

I 	R<><var>?
	cmp 	<addr>
	bne 	_Skip1
	cpx 	<next>
	_Skip1:
	[data] ; bne *
