//
//		Constants
//
B 	A = <const>
	lda 	#<low>

BW	R = <const>
	lda 	#<low>
	ldx 	#<high>

S 	A = <var>
		lda 	<addr>
//
//		Required for parameters
//
			
B 	Y = <const>
		ldy 	#<low>

S 	Y = <var>
		ldy 	<addr>

S 	R = <var>
		lda 	<addr>
		ldx 	#0

I 	R = <var>
		lda 	<addr>
		ldx 	<next>

//
//		Save
//
I 	<var> = R		
		sta <addr>; stx <next>
S 	<var> = R
		sta <addr>		
S	<var> = A
		sta <addr>
//
//		More complex examples for adding variables:
//
S 	A+<var>	
		clc;adc <addr>
S 	R+<var>
		clc;adc <addr>;bcc *+3;inx
I	R+<var>	
		clc;adc <addr>;pha;txa;adc <next>;tax;pla

//
//		Adding constants:
//
B 	A+<const>	
		clc;adc# <low>
B 	R+<const>	
		clc;adc #<low>;bcc *+3;inx
W 	R+<const>	
		clc;adc #<low>
		pha;txa;adc #<high>;tax;pla

//
//		Procedure Definition/invocation/End
//

//
//		Condition
//		
* 		R+?
		cpx #0
		[data] ; bpl *
//
//		Miscellany
//
* 	byte 			
		[exec:byteVar]
* 	word 			
		[exec:wordVar]		
*	remove.locals
		[exec:dictionarycrunch]		
* 	repeat
		[exec:repeat]
* 	until 			
		[exec:until]
*	a.for
		[exec:afor]
*	next
		[exec:next]
*	if
		[exec:if]			
*	else
		[exec:else]			
* 	endif
		[exec:endif]			
* 	proc 			
		[exec:procedure_def]
P	<proc>
		[exec:call]
*	endproc			
		[exec:endproc]
