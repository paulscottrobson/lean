//
//		Dave's Balls in LEAN.
//
word vera.low@$9f20
byte vera.high@$9f22
byte vera.data@$9f23

word x.ptr@$10,xi.ptr@$12,y.ptr@$14,yi.ptr@$16,col.ptr@$18

byte count
byte current
word seed
//
//			set write location to R. R and A are the same, just R is 16 bit, A is 8 bit.
//
proc vera.set()
	R->S 
	vera.low=R 						// write low address
	A=$10 vera.high = A 			// write high address
	S->R
endproc
//
//			write A to data port.
//
proc vera.write()
	vera.data=A
endproc
//
//			Random number generator
//
proc random()
	Y->S
	byte limit
	limit = A 												// must be < this
	repeat
		R=seed R=?  										// if zero set seed non-zero
		if ++R endif
		R=seed >>seed 										// Galois LFSR
		A&1 A=? if R=seed R*$B400 seed=R endif
		R=seed R.Swap R*Seed 							 	// Eor MSB/LSB together
	A<limit? until 											// until in range. We have no modulus.
	S->Y 													// You'd do random()&64+random()&16 for 80 in practice.
endproc
//
//			Random Direction
//
proc random.dir()
	random(127) A&1  										// 0 or 1
	A=? if A=255 endif 										// 255 or 1
endproc
//
//			Create ball Y
//
proc ball.create()
	random(80) x.ptr[y]=A 									// Put random values in array elements
	random(60) y.ptr[y]=A
	random.dir() xi.ptr[y]=A 
	random.dir() yi.ptr[y]=A
	random(127) A&15 col.ptr[y]=A
endproc
//
//			Draw ball Y
//
proc ball.draw()
	A->S  													// Push A on stack 
	A=y.ptr[y] R=A  										// Get Y into A, make it 16 bit
															// (doing R=y.ptr[y] loads a word in)
	R.swap A+x.ptr[y] A+x.ptr[y] vera.set() 				// Put into MSB and add 2 x X to it
	S->A vera.write()										// Pop the graphic off and write it
	A=col.ptr[y] vera.write() 								// Write the colour byte
endproc	
//
//			Move Ball Y
//
proc ball.move()
	//
	// 	The conditions are like FORTH, so this line loads A from the array
	//	checks if it is zero, and if it is, sets the xi.ptr[y] element to 1.
	//
	A=x.ptr[y] A=0? if A=1 xi.ptr[y]=A endif 		
	A=y.ptr[y] A=0? if A=1 yi.ptr[y]=A endif
	A=x.ptr[y] A=79? if A=255 xi.ptr[y]=A endif
	A=y.ptr[y] A=59? if A=255 yi.ptr[y]=A endif

	A=x.ptr[y] A+xi.ptr[y] x.ptr[y]=A 						// Move the ball positions
	A=y.ptr[y] A+yi.ptr[y] y.ptr[y]=A
endproc
//
//			Main Program
//
proc main()
	x.ptr=R 						// Set five pointers to point to 1/4k each.
	R+256 y.ptr=R  					// the main procedure (last one defined)
	R+256 xi.ptr=R 	 				// receives free ram pointer in R
	R+256 yi.ptr=R
	R+256 col.ptr=R

	vera.set(0) 					// Clear the screen. Bodge :)
	$1E00 r.for  					// R.For is a 16 bit loop A.For (as below) is an 8 bit loop
		vera.write(32) vera.write(1)
	next

	A=100 count=a 					// Count of balls (no input ... yet)

	A=count a.for 					// Create the balls.
		Y=A 						// At the start of a FOR, A (or R) contains the index.
		ball.create()
		ball.draw(81)
	next

	1000 r.for 						// do 1000 frames of movement.
		A=count a.for
			Y=A
			ball.draw(32)
			ball.move()
			ball.draw(81)
			100 r.for next 			// slow down. without it does about 200 fps :)
		next
	next
endproc

remove.locals
